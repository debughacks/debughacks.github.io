<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Debug Hacks</title>
  <subtitle>谦虚其心，宏大其量.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://debughacks.github.io/"/>
  <updated>2016-11-17T07:10:24.000Z</updated>
  <id>http://debughacks.github.io/</id>
  
  <author>
    <name>GaoYuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac终端穿墙技术汇总</title>
    <link href="http://debughacks.github.io/2016/11/17/mac-terminal-cross-gfw/"/>
    <id>http://debughacks.github.io/2016/11/17/mac-terminal-cross-gfw/</id>
    <published>2016-11-17T02:32:39.000Z</published>
    <updated>2016-11-17T07:10:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个互联网从业人员，要想在天朝愉快地工作，生活，目前必须正视墙（gfw）的存在。<br>本文涉及的翻墙方法，主要针对mac系统。但大部分内容，同样适用于window和linux。也可以自行寻找相关替代品。<br><a id="more"></a></p>
<h1 id="土豪的方法"><a href="#土豪的方法" class="headerlink" title="土豪的方法"></a>土豪的方法</h1><p>如果你是一个使用mac系统的土豪，那么，访问这个网站 <a href="http://nssurge.com/" target="_blank" rel="external">http://nssurge.com/</a> 就够了。</p>
<h1 id="others"><a href="#others" class="headerlink" title="others"></a>others</h1><p>实际上，这才是本文的重点。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>我们需要先搭建一个ss（Shadowsocks）服务器，或者买个账号（<a href="https://shadowsocks.com/）。" target="_blank" rel="external">https://shadowsocks.com/）。</a></p>
<h3 id="搭建ss-server"><a href="#搭建ss-server" class="headerlink" title="搭建ss server"></a>搭建ss server</h3><ul>
<li>买个海外的云主机，各大云的香港或者海外节点，应该都能满足需求。</li>
<li>安装 ss server<br>在云主机的命令行下，执行如下命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install shadowsocks</div></pre></td></tr></table></figure>
</li>
</ul>
<p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/shadowsocks/shadowsocks.git</div><div class="line">cd shadowsocks</div><div class="line">python setup.py</div></pre></td></tr></table></figure></p>
<ul>
<li>配置<br>创建配置文件，如<code>/etc/shadowsocks.json</code>，示例内容如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;my_server_ip&quot;,</div><div class="line">    &quot;server_port&quot;:8388,</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;password&quot;:&quot;barfoo!&quot;,</div><div class="line">    &quot;timeout&quot;:600,</div><div class="line">    &quot;method&quot;:&quot;table&quot;,</div><div class="line">    &quot;auth&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>配置文件是json格式，注意最后一行没有<code>,</code></p>
</blockquote>
<ul>
<li>启动ss server<br><code>ssserver -c /etc/shadowsocks.json -d start</code></li>
<li>停止ss server<br><code>ssserver -c /etc/shadowsocks.json -d stop</code></li>
</ul>
<h3 id="安装ss-客户端"><a href="#安装ss-客户端" class="headerlink" title="安装ss 客户端"></a>安装ss 客户端</h3><p>推荐 <a href="https://github.com/shadowsocks/ShadowsocksX-NG" target="_blank" rel="external">ShadowsocksX-NG</a>，因为 <a href="https://github.com/shadowsocks/shadowsocks-iOS/releases" target="_blank" rel="external">ShadowsocksX</a>已无法正常更新pac文件。</p>
<p>至此，使用浏览器的话，就可以自由地在互联网上遨游了。当然，你会发现更好用的翻墙技术。</p>
<h2 id="终端-terminal-翻墙"><a href="#终端-terminal-翻墙" class="headerlink" title="终端(terminal)翻墙"></a>终端(terminal)翻墙</h2><h3 id="亲测可用的方案"><a href="#亲测可用的方案" class="headerlink" title="亲测可用的方案"></a>亲测可用的方案</h3><p>下载软件 <a href="https://www.proxifier.com/download.htm" target="_blank" rel="external">proxifier</a>，仅支持windows和mac，收费软件。</p>
<p>如果是学生的话，可以给我留言，我共享个注册码给你。其他人建立购买，在这物价横飞的时代，几百块，分分钟就花没了。</p>
<p>shadowsocks代理属于socks5代理，通俗的理解，socks5只是局部代理。使用Proxifier把shadowsocks代理转全局代理，类vpn。所以，该方案实际上不局限于终端翻墙。</p>
<h3 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h3><p><a href="https://eliyar.biz/proxy-for-mac-terminal/" target="_blank" rel="external">proxychains-ng</a><br><a href="https://mba811.gitbooks.io/web-study/content/fq/fq3.html" target="_blank" rel="external">tsocks</a></p>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p>[^1] <a href="https://shadowsocks.org/" target="_blank" rel="external">https://shadowsocks.org/</a><br>[^2] <a href="https://github.com/shadowsocks" target="_blank" rel="external">https://github.com/shadowsocks</a><br>[^3] <a href="https://shadowsocks.com/" target="_blank" rel="external">https://shadowsocks.com/</a><br>[^4] <a href="https://www.dou-bi.co/ss-jc7/" target="_blank" rel="external">https://www.dou-bi.co/ss-jc7/</a><br>[^5] <a href="http://www.voidcn.com/blog/shenshouer/article/p-6254512.html" target="_blank" rel="external">http://www.voidcn.com/blog/shenshouer/article/p-6254512.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个互联网从业人员，要想在天朝愉快地工作，生活，目前必须正视墙（gfw）的存在。&lt;br&gt;本文涉及的翻墙方法，主要针对mac系统。但大部分内容，同样适用于window和linux。也可以自行寻找相关替代品。&lt;br&gt;
    
    </summary>
    
      <category term="devops" scheme="http://debughacks.github.io/categories/devops/"/>
    
    
      <category term="devops" scheme="http://debughacks.github.io/tags/devops/"/>
    
      <category term="gfw" scheme="http://debughacks.github.io/tags/gfw/"/>
    
  </entry>
  
  <entry>
    <title>使用Charles在移动设备上捕获https数据包</title>
    <link href="http://debughacks.github.io/2016/06/30/charles-https/"/>
    <id>http://debughacks.github.io/2016/06/30/charles-https/</id>
    <published>2016-06-30T08:38:16.000Z</published>
    <updated>2016-06-30T10:07:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于互联网从业人员而言，掌握抓包，是必备技能。<br><a id="more"></a></p>
<p><code>Charles</code>是一个http代理，工作模式如下图：</p>
<img src="/images/mobile/http_proxy.png" title="抓包">
<p>但是默认只能抓http协议的数据包，要捕获https的数据包，需要进行相关配置。</p>
<p>下文以<code>IOS</code>移动设备为例，讲述配置步骤（<code>android</code>设备类似）：</p>
<ul>
<li>在移动设备安装ssl证书</li>
</ul>
<p>Charles ssl证书的下载地址如下：</p>
<p><a href="http://www.charlesproxy.com/getssl" target="_blank" rel="external">http://www.charlesproxy.com/getssl</a></p>
<p>在移动设备的浏览器中打开上述<code>Url</code>，即可进行安装。</p>
<ul>
<li>安装http代理<code>Charles</code></li>
</ul>
<p>软件下载地址如下：<br><a href="http://www.charlesproxy.com/latest-release/download.do" target="_blank" rel="external">http://www.charlesproxy.com/latest-release/download.do</a></p>
<ul>
<li>启用http代理</li>
</ul>
<p>打开<code>Charles</code>软件，默认会启动一个监听本地8888端口的http代理， 也可以在<code>Charles</code>的设置中修改相关端口。</p>
<ul>
<li>配置<code>Charles</code>支持https</li>
</ul>
<p>在<code>Charles</code>中打开：</p>
<pre><code>Proxy -&gt; SSL Proxying Settings
</code></pre><p>勾选</p>
<pre><code>Enable SSL Proxying
</code></pre><p>然后在下方的<code>Locations</code>中点击</p>
<pre><code>Add
</code></pre><p>添加需要抓https接口的域名。</p>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Host:www.baidu.com</div><div class="line">Port:443</div></pre></td></tr></table></figure>
<ul>
<li>在移动设备上修改代理</li>
</ul>
<img src="/images/mobile/ios_http_proxy.png" title="ios设置代理">
<p>其中，<code>服务器</code>是安装了<code>Charles</code>软件的电脑的<code>IP</code>，端口是<code>Charles</code> http代理开启的端口。</p>
]]></content>
    
    <summary type="html">
    
      通过使用charles设置代理，捕获移动设备上捕获的https数据包
    
    </summary>
    
      <category term="devops" scheme="http://debughacks.github.io/categories/devops/"/>
    
    
      <category term="devops" scheme="http://debughacks.github.io/tags/devops/"/>
    
      <category term="ios" scheme="http://debughacks.github.io/tags/ios/"/>
    
      <category term="charles" scheme="http://debughacks.github.io/tags/charles/"/>
    
      <category term="https" scheme="http://debughacks.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>那个套模版的，放开你的F5</title>
    <link href="http://debughacks.github.io/2015/02/28/release-f5-for-template-engineer/"/>
    <id>http://debughacks.github.io/2015/02/28/release-f5-for-template-engineer/</id>
    <published>2015-02-28T10:29:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>老江说过：“科学技术是第一生产力”。技术的魅力在于通过改善相关流程或者提供相关工具，对人们的生活进行改善，make live esaier。</p>
<a id="more"></a>
<p><em>对于自喻为模版工程师的同行们，套模版的流程大抵是：</em></p>
<pre><code>写代码，保存

打开浏览器，按F5刷新页面，检查相关前端效果
</code></pre><p>我记得<a href="http://weibo.com/yjf10" target="_blank" rel="external">轩脉刃</a>曾经写过一个统计鼠标按键的小工具。如果对模版工程师工作时键盘的按键进行统计，那么F5的使用率肯定不容忽视。</p>
<p>倘若能在代码保存后就自动刷新浏览器，那不仅能解放模版工程师的F5按键，也能提升他们的开发效率。突然感觉非常美妙。</p>
<p>我记得有人说过，这个世界上不缺乏原创的idea，缺的只是一双能发现它的眼睛。</p>
<p>正如<code>livereload</code>所说的－“The Web Developer Wonderland”。</p>
<p>使用<code>livereload</code>，<em>通过如下几个步骤</em>，就可以做到当我们保存代码后，自动刷新浏览器中相关页面内容。</p>
<blockquote>
<p>安装livereload浏览器扩展</p>
</blockquote>
<p>相关浏览器扩展的下载地址如下：</p>
<p><a href="http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions" target="_blank" rel="external">browser extensions</a></p>
<blockquote>
<p>安装livereload server端</p>
</blockquote>
<p>安装python环境，然后在终端执行</p>
<pre><code>pip install livereload
</code></pre><p>或者</p>
<pre><code>easy_install livereload
</code></pre><blockquote>
<p>启动livereload server端</p>
</blockquote>
<p>假设我的代码目录在<code>/home/galendy/code/demo</code>，在终端执行</p>
<pre><code>livereload /home/galendy/code/demo
</code></pre><blockquote>
<p>点击浏览器扩展</p>
</blockquote>
<p><code>livereload</code>的基本原理是：</p>
<pre><code>livereload server端会启动本地的socket服务（默认开放本地的35729端口），当监听的目录下的文件内容有变化时，向该socket写入数据

livereload浏览器扩展会连接本地的35729端口，当有新消息到来时，会在浏览器中插入一段js代码，刷新当前页面
</code></pre><p>实际上，前端工程师还会使用<code>livereload</code>完成css，js等文件的合并和压缩。想要了解更多，请参考：</p>
<p><a href="http://livereload.com/" target="_blank" rel="external">livereload</a></p>
<p><a href="http://livereload.readthedocs.org/en/latest/" target="_blank" rel="external">python livereload</a></p>
]]></content>
    
    <summary type="html">
    
      使用livereload浏览器扩展，提升web前端开发工程师的开发效率，减少修改代码后需要重新刷新页面的工序
    
    </summary>
    
      <category term="collect" scheme="http://debughacks.github.io/categories/collect/"/>
    
    
      <category term="php" scheme="http://debughacks.github.io/tags/php/"/>
    
      <category term="collect" scheme="http://debughacks.github.io/tags/collect/"/>
    
      <category term="python" scheme="http://debughacks.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>互联网信息分类方法</title>
    <link href="http://debughacks.github.io/2015/01/25/categorize-web-information/"/>
    <id>http://debughacks.github.io/2015/01/25/categorize-web-information/</id>
    <published>2015-01-25T11:12:00.000Z</published>
    <updated>2016-06-30T06:19:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前，虽然搜索已经代替分类目录（google颠覆yahoo模式）成为人们获取信息的主要途径，但是没有好的信息分类，再好的搜索也是白搭。只有信息足够格式化，标准化，搜索才有效。即分类提升展示逻辑，搜索输出内容结果。</p>
<a id="more"></a>
<h1 id="如何判定分类的好坏"><a href="#如何判定分类的好坏" class="headerlink" title="如何判定分类的好坏"></a>如何判定分类的好坏</h1><p>一个好的分类方法需要做到如下几点：</p>
<ul>
<li>能够涵盖集合中的所有元素</li>
<li>类和类之间不能重叠</li>
<li>能够比较容易地为每一个元素找到其对应的分类</li>
</ul>
<h1 id="常见的分类方法"><a href="#常见的分类方法" class="headerlink" title="常见的分类方法"></a>常见的分类方法</h1><h2 id="分类之前的准备工作"><a href="#分类之前的准备工作" class="headerlink" title="分类之前的准备工作"></a>分类之前的准备工作</h2><p>在对信息进行分类之前，可以先做如下几件事：</p>
<h5 id="1-明确如下问题"><a href="#1-明确如下问题" class="headerlink" title="1. 明确如下问题"></a>1. 明确如下问题</h5><p>信息如何产生？如何组织关联？通过什么渠道传播？</p>
<h5 id="2-观察别人"><a href="#2-观察别人" class="headerlink" title="2. 观察别人"></a>2. 观察别人</h5><p>可以去一家真正的商店看看，或者参观一座图书馆，还可以拜访竞争对手的商店。</p>
<h5 id="3-研究竞争对手"><a href="#3-研究竞争对手" class="headerlink" title="3. 研究竞争对手"></a>3. 研究竞争对手</h5><p>访问竞争对手的网站。他们是怎样组织信息的？要对多种组织方案加以比较。存在哪些相似之外？又有哪些区别？要尽量明确竞争对手为什么做出那样的选择。这是失误还是明智之举？你甚至可以对他们的网站做可用性测试，从而发现其组织方案中哪些方面奏效，哪些部分没有意义。</p>
<h2 id="常见的分类方法-1"><a href="#常见的分类方法-1" class="headerlink" title="常见的分类方法"></a>常见的分类方法</h2><h5 id="1-主题分类法"><a href="#1-主题分类法" class="headerlink" title="1. 主题分类法"></a>1. 主题分类法</h5><p>主题分类法的特征是选择某一个主题作为一阶类目，在一阶类目下又可分若干二阶类目，二阶类目下再分若干三阶类目，形成一个大的树形结构。同阶的类目按照字顺排序。</p>
<p>由于网络资源数不胜数，所以一般会选取14-24个热点事物作为一阶分类，分类的阶数为3到6级。</p>
<p>其优点是可以将事物相关的内容全部集中在一起。如汽车大类下可包含汽车制造，交易，保养，维修，赛车等等子类目。但是容量较小，对网络资源的覆盖率有限。</p>
<h5 id="2-分面分类法"><a href="#2-分面分类法" class="headerlink" title="2. 分面分类法"></a>2. 分面分类法</h5><p>分面分类法是根据实物都具有多维度的特征而建立的。可以将信息分成定义明确、互斥的区域。常见的是按字母顺序、按年表、按地理位置等分类。也可按照如下类型进行分类：</p>
<ul>
<li>按主题；设计时需要定义好内容的范围，注意涵盖面的广度</li>
<li>按任务；将内容和应用程序组织成流程、功能或工作的集合。最常见的是电商网站</li>
<li>按用户；如果用户群可以界定的比较清楚，可以提供很好的个性化服务，但模糊性依然存在，对系统“猜测”的要求很高</li>
<li>按隐喻；多用于游戏</li>
<li>混用以上类型</li>
</ul>
<h5 id="3-卡片分类法"><a href="#3-卡片分类法" class="headerlink" title="3. 卡片分类法"></a>3. 卡片分类法</h5><p>卡片分类就是把类似的东西放在一起。</p>
<ul>
<li>把你收集的各种信息整理出来写在卡片上。(如果没有，可以用一堆CD或者照片代替，可以是任何东西，只要数量足够多，可以零乱散落在地板上)</li>
<li>把所有卡片从盒子里倒在地板上。</li>
<li>把所有卡片从盒子里倒在地板上。</li>
<li>现在开始分组。如果你看到某些东西与另外一些东西相像，就把它们放在一起。</li>
<li>最后，当分组完毕时，再拿一些背面有胶的便条标出每一个堆的名称，分类完毕。</li>
</ul>
<h5 id="4-公众分类法"><a href="#4-公众分类法" class="headerlink" title="4. 公众分类法"></a>4. 公众分类法</h5><p>所谓”公众分类法”，就是由公众来为信息贴加标签（tagging），被使用最多的标签就最能说明这条信息的特点。</p>
<p>使用标签分类，非常的便捷，而且易于组合，但是也存在一些问题：</p>
<ul>
<li>不同的用户对相同的标签，往往有不同的理解，比如在”工具”标签下，可能会发现彼此完全没有关系的内容。</li>
<li>同义词问题。用户可能使用同义词作为标签，比如”tv/television”，”Holland/Netherlands/Dutch”，”超级女生/超女”。英语中，还存在复数问题。</li>
<li>词的多义性问题。比如”china”这个标签，到底指中国，还是指瓷器。</li>
<li>用户的标签五花八门，可能会产生大量”噪音”，加重系统负担，降低分类的准确性。</li>
</ul>
<p>所以，最好的解决方法应该是，自上而下的目录分类法与标签式的公众分类法相结合，然后对能够用作标签的词汇进行控制（controlled vocabulary），不能什么词都用来当标签。</p>
<h1 id="实施建议"><a href="#实施建议" class="headerlink" title="实施建议"></a>实施建议</h1><ul>
<li>尝试按照主题分类和分面分类发进行分类</li>
<li>试试卡片分类</li>
<li>使用2的标准去判定分类是否合理</li>
<li>如果单纯的分类无法解决问题，考虑下打标签（公众分类法）</li>
</ul>
<p>reference：</p>
<p>[^1] <a href="http://zhanglichuan.me/resolve-ia" target="_blank" rel="external">http://zhanglichuan.me/resolve-ia</a></p>
]]></content>
    
    <summary type="html">
    
      如何进行互联网信息分类，常见的信息分类方法
    
    </summary>
    
      <category term="collect" scheme="http://debughacks.github.io/categories/collect/"/>
    
    
      <category term="web 信息架构 IA" scheme="http://debughacks.github.io/tags/web-%E4%BF%A1%E6%81%AF%E6%9E%B6%E6%9E%84-IA/"/>
    
  </entry>
  
  <entry>
    <title>2014年总结－但行好事，莫问前程</title>
    <link href="http://debughacks.github.io/2014/12/31/user-nginx-proxy-cache-mirror-website/"/>
    <id>http://debughacks.github.io/2014/12/31/user-nginx-proxy-cache-mirror-website/</id>
    <published>2014-12-31T02:28:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>2014年，是特别的一年。对于码农而言，这一年的过去，可以当作是第二个千年的结束。当然，也将是新千年的开始，期待ing。</p>
<a id="more"></a>
<p>这一年，有个同学博士毕业，还有一个同学荣升副教授。最重要的是，乘着2014的小尾巴，我们迎接到了一个新生命的降临。hello world！</p>
<p>这本是一篇技术博文，但是相对于技术而言，有些东西会更重要一些。</p>
<p>科技改变生活，技术本来就是为了让生活更美好，让大家能活着更容易些，莫忘初心。</p>
<p>分享点技术之外的东西，希望能走地更远，不管是在技术的道路上，还是非技术的道路上。</p>
<p>虽然在有生之年，可以很难达到那种境界，但是尽力去向那个境界靠拢。</p>
<p>但行好事，莫问前程。</p>
<p>谋事在人，成事在天，尽力就好，人能做的，大抵只能如此。</p>
<blockquote>
<p>以下内容，摘自特兰修女箴言 － From Mother Theresa</p>
</blockquote>
<p>人们经常是不讲道理的、没有逻辑的和以自我为中心的<br>不管怎样，你要原谅他们</p>
<pre><code>People are often unreasonable, illogical and self-centered; Forgive them anyway.
</code></pre><p>即使你是友善的，人们可能还是会说你自私和动机不良<br>不管怎样，你还是要友善</p>
<pre><code>If you are kind, people may accuse you of selfish, ulterior motives; Be kind anyway.
</code></pre><p>当你功成名就，你会有一些虚假的朋友<br>和一些真实的敌人<br>不管怎样，你还是要取得成功</p>
<pre><code>If you are successful, you will win some false friends And some true enemies; Succeed anyway.
</code></pre><p>即使你是诚实的和率直的，人们可能还是会欺骗你<br>不管怎样，你还是要诚实和率直</p>
<pre><code>If you are honest and frank, people may cheat you; Be honest and frank anyway.
</code></pre><p>你多年来营造的东西<br>有人在一夜之间把它摧毁<br>不管怎样，你还是要去营造</p>
<pre><code>What you spend years building, Someone could destroy overnight; Build anyway.
</code></pre><p>如果你找到了平静和幸福，他们可能会嫉妒你<br>不管怎样，你还是要快乐</p>
<pre><code>If you find serenity and happiness, they may be jealous; Be happy anyway.
</code></pre><p>你今天做的善事，人们往往明天就会忘记<br>不管怎样，你还是要做善事</p>
<pre><code>The good you do today, people will often forget tomorrow; Be good anyway.
</code></pre><p>即使把你最好的东西给了这个世界<br>也许这些东西永远都不够<br>不管怎样，把你最好的东西给这个世界</p>
<pre><code>Give the world the best you have, And it may never be enough; Give the world the best you have anyway.
</code></pre><p>你看，说到底，它是你和上帝之间的事<br>而决不是你和他人之间的事</p>
<pre><code>You see, in the final analysis, it is between you and God; It is never between you and them anyway.
</code></pre>]]></content>
    
    <summary type="html">
    
      2014年总结，但行好事，莫问前程
    
    </summary>
    
      <category term="essay" scheme="http://debughacks.github.io/categories/essay/"/>
    
    
      <category term="essay" scheme="http://debughacks.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>一周打造支付系统</title>
    <link href="http://debughacks.github.io/2014/11/23/build-payment-system-in-one-week/"/>
    <id>http://debughacks.github.io/2014/11/23/build-payment-system-in-one-week/</id>
    <published>2014-11-23T06:34:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>获取食物的最佳方式就是处于食物链的顶端，以捕食该链条之下的所有动植物。不言而喻，搭建处于资金流顶端的支付系统，伴随资金的转移过程，也是积累财富的绝佳手段。<br><a id="more"></a></p>
<h1 id="一般网购流程"><a href="#一般网购流程" class="headerlink" title="一般网购流程"></a>一般网购流程</h1><img src="/images/payment/shopping_flow.png" title="shopping flow">
<p>一般的网购流程如上图：</p>
<ul>
<li>商品筛选</li>
<li>将选中的商品添加到购物车（顾名思义，推着车去购物。如果只卖一个商品的话，可以省略这步）</li>
<li>确认要购买物品，去结算</li>
<li>下订单，即提交要结算物品的清单</li>
<li>网上支付该订单</li>
</ul>
<h1 id="支付流程"><a href="#支付流程" class="headerlink" title="支付流程"></a>支付流程</h1><img src="/images/payment/flow.jpg" title="payment flow">
<p>一个典型的支付流程如上图。</p>
<p>用户下单时，订单系统需要和产品库交互，生成支付连接。支付系统对请求地址进行验签之后，调用第三方平台的支付接口进行支付，然后更新订单状态。在订单成功支付之后，更新产品库存信息。</p>
<p>属于支付系统的功能有：</p>
<ul>
<li>请求参数验签</li>
<li>第三方支付接口对接</li>
<li>订单系统对接</li>
</ul>
<blockquote>
<p>只要完成与第三方支付接口的对接，即可解决搭建支付系统中最难啃的一块硬骨头。</p>
</blockquote>
<h1 id="第三方支付平台"><a href="#第三方支付平台" class="headerlink" title="第三方支付平台"></a>第三方支付平台</h1><p>目前比较流行的第三方支付平台主要有：</p>
<ul>
<li>支付宝</li>
<li>财付通</li>
<li>快钱</li>
<li>网银在线</li>
<li>微信支付</li>
</ul>
<p>对于网银支付，可以调用银联的接口，或者直接对接银行（可以降低手续费，支持大额等个性化支付方法。但是实现成本较高）。</p>
<p>虽然支付宝的手续费不是最实惠的，但是支付宝本身对接了个大银行的网银支付，而我们的目标是一周打造支付系统，当然选择最省事的。</p>
<p>对接支付宝支付接口的流程如下：</p>
<img src="/images/payment/zhifubao.jpg" title="支付宝对接">
<p>完成<code>技术集成</code>之前的工作，理论上需要8-10个工作日，所以需要提前申请。</p>
<p>最好找商务部的同事出马，不要怕麻烦boss。有问题，及时向组织反馈。</p>
<h1 id="支付宝接口"><a href="#支付宝接口" class="headerlink" title="支付宝接口"></a>支付宝接口</h1><p>与支付宝接口的交互流程如下</p>
<img src="/images/payment/zhifubao_flow.jpg" title="支付宝接口交互流程">
<p>支付宝提供的sdk，主要包含如下文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">alipay_core.function.php -- 支付宝接口公用函数，是请求、通知返回两个文件所调用的公用函数核心处理文件</div><div class="line">alipay_md5.function.php  -- MD5加密</div><div class="line">alipay_notify.class.php  -- 支付宝通知处理类，处理支付宝各接口通知返回</div><div class="line">alipay_submit.class.php  -- 支付宝各接口请求提交类，构造支付宝各接口表单HTML文本，获取远程HTTP数据</div></pre></td></tr></table></figure>
<p><em>要调用的方法</em></p>
<ul>
<li>提交订单时，调用<code>alipay_submit.class.php</code>中的<code>buildRequestUrl</code>方法，同时，需要注册通知回调<code>return_url</code>和<code>notify_url</code>。</li>
</ul>
<p>其中：<br>    return_url是同步回调，一般用于在支付成功后，调转至支付成功页。<br>    notify_url是异步回调，一般用于更新订单状态等等（支付宝有相关队列服务运行异步回调，回调失败后，会以不定的间隔进行重试）。</p>
<ul>
<li>在通知回调时，都需要调用<code>alipay_notify.class.php</code>中的<code>verifyReturn</code>验证回调的合法性。</li>
</ul>
<h1 id="ssl证书"><a href="#ssl证书" class="headerlink" title="ssl证书"></a>ssl证书</h1><p>俗话说，没有买卖就没有杀戮。凡是涉及利益的地方，就不会很安全。使用采用http进行数据通讯，难免发生如下问题：<br><img src="/images/payment/http_flow.jpg" title="中间人攻击"></p>
<p>但是换成https，会有如下好处：</p>
<img src="/images/payment/https_2.jpg" title="http ssl">
<img src="/images/payment/https_3.jpg" title="https flow">
<p>申请ssl证书，推荐数字公司使用的<a href="http://www.wosign.com/price.htm" target="_blank" rel="external">WoSign超真 SSL</a>。</p>
<img src="/images/payment/ssl.jpg" title="ssl">
<h1 id="请求验签"><a href="#请求验签" class="headerlink" title="请求验签"></a>请求验签</h1><p>请求参数签名，需要使用可逆加密算法。其中又分为：</p>
<ul>
<li>对称加解密算法</li>
<li>非对称加解密算法</li>
</ul>
<p>对称加解密算法，在加密和解密时都使用一个密钥，加解密性能较好。但安全性较低（密钥只要被拿到，就gameover）。</p>
<p>非对称加解密算法，一般使用私钥加密，公钥解密。其安全性较好（只要保存好私钥就行），但是性能较差。</p>
<p>所以可以使用对称加解密算法加密请求参数。但加解密时，不使用同一个密钥。相关密钥，通过非对称加解密算法加密后，在请求参数中传递。</p>
<p>解密流程如下：</p>
<pre><code>1. 在请求参数中获取使用非对称加解密算法加密的密钥ekey
2. 使用非对称加解密算法解密密钥ekey为dkey
3. 使用对称加解密算法和dkey，解密请求参数
</code></pre><h1 id="订单"><a href="#订单" class="headerlink" title="订单"></a>订单</h1><p>我们用一周打造的支付系统，不能是一个远在云端的架构，而要是一个可运行的系统。那么，订单自然也少不了。</p>
<p>订单是按照如下对应关系产生的：</p>
<pre><code>用户 -&gt; 商品 -&gt; 订单
</code></pre><p>在整个支付过程中，一般要存在两个订单号：</p>
<ul>
<li>用于在内部系统（订单，支付，个人中心）中流通的订单号 <code>order_no</code>，在每一次下单时产生。</li>
<li>用于支付的订单号 <code>pay_order_no</code>，由 <code>order_no</code> ＋ 时间戳 ＋ salt等，在每一次支付时产生。</li>
</ul>
<h1 id="联调部署"><a href="#联调部署" class="headerlink" title="联调部署"></a>联调部署</h1><p>开发阶段涉及的模块可做如下划分：</p>
<ul>
<li>产品页</li>
<li>支付页</li>
<li>支付</li>
<li>订单</li>
<li>个人中心</li>
<li>测试，部署上线</li>
</ul>
<p>衡量一个互联网的标准有：功能，交互，ui。</p>
<p>因为我们的目标是一周内打造支付，那么，优先是完成支付和订单。至于是否要在产品页添加购物车，是否要在订单支付页面保存配送地址，是否要在个人中心对接物流，以及退款等等，都可以暂时砍掉。</p>
<p>互联网产品，唯快不破。快速上线，快速迭代。</p>
<h1 id="The-Hole"><a href="#The-Hole" class="headerlink" title="The Hole"></a>The Hole</h1><p>开发过程中，难免会遇到不少坑，特此纪录，希望帮助有缘人。</p>
<ul>
<li>产品金额存储</li>
</ul>
<p>为了避免因退款，对账时，和银行或者第三方支付平台产生因为数据精度而舍入等问题，可以将产品金额以<code>分</code>为单位存储，前台展示时除以100。</p>
<ul>
<li>需要两个订单号</li>
</ul>
<p>支付宝等第三方平台，对订单号有验证，一个订单号只能支付一次。所以系统中需要存在两个订单号，一个用于内部系统流通，一个用于支付，每次支付时都产品一个最新的（与内部系统流通的订单号有对应关系）。</p>
<ul>
<li>权限验证</li>
</ul>
<p>下单，或者支付完成后，在个人中心等位置，一般可以查看订单状态。此时需要注意，需要增加权限验证。否则会产生平行权限安全漏洞（可查看别人的订单等信息）</p>
<ul>
<li>系统安全性</li>
</ul>
<p>在支付和个人中心等页面，因为存在前后端交互。所以需要排查，是否存在sql注入或者xss等安全漏洞。推荐<code>XSScrapy</code>和<code>SqlMap</code>。</p>
<ul>
<li>日志</li>
</ul>
<p>在整个交易过程中，需要有完善详尽的日志记录。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;获取食物的最佳方式就是处于食物链的顶端，以捕食该链条之下的所有动植物。不言而喻，搭建处于资金流顶端的支付系统，伴随资金的转移过程，也是积累财富的绝佳手段。&lt;br&gt;
    
    </summary>
    
      <category term="php" scheme="http://debughacks.github.io/categories/php/"/>
    
    
      <category term="php" scheme="http://debughacks.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>使用Graphite和cabot搭建监控服务</title>
    <link href="http://debughacks.github.io/2014/10/01/use-graphite-and-alter-build-monitor-system/"/>
    <id>http://debughacks.github.io/2014/10/01/use-graphite-and-alter-build-monitor-system/</id>
    <published>2014-10-01T01:43:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>说起监控，我们一般会首先想到<code>zabbix</code>，<code>nagios</code>，<code>ganglia</code>等等。但是对于非<code>ops</code>开发人员而言，这些东西，多多少少让人感到陌生。所以本文将从一个<code>服务端开发人员</code>的视角，介绍如何通过<code>graphite</code>，<code>cabot</code>，加一个<code>shell</code>定时脚本，搭建监控报警服务。<br><a id="more"></a></p>
<h1 id="python环境安装"><a href="#python环境安装" class="headerlink" title="python环境安装"></a>python环境安装</h1><p>虽然linux系统上一般都有python环境，但是默认的python版本较低。而且<code>yum</code>等系统工具，都依赖于默认的python。所以推荐的做法是再安装一个python，并使用<code>virtualenv</code>等工具，分项目进行环境管理，并与系统默认的python环境进行隔离。</p>
<p>以python2.7.3为例，介绍python环境的安装。</p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">sudo yum install bzip2-devel.x86_64</div><div class="line">sudo yum install sqlite-devel.x86_64</div><div class="line">sudo yum install readline-devel.x86_64</div><div class="line">sudo yum install openssl-devel.x86_64</div><div class="line"></div><div class="line">wget http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2</div><div class="line">tar jxvf Python-2.7.3.tar.bz2</div><div class="line">cd Python-2.7.3</div><div class="line">./configure --prefix=/usr/local/python2.7.3</div><div class="line">make &amp;&amp; sudo make install</div><div class="line"></div><div class="line">cd ..</div><div class="line">wget https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz --no-check-certificate</div><div class="line">tar zxvf distribute-0.6.49.tar.gz</div><div class="line">cd distribute-0.6.49</div><div class="line">sudo /usr/local/python2.7.3/bin/python setup.py install</div><div class="line">sudo /usr/local/python2.7.3/bin/easy_install pbr</div><div class="line"></div><div class="line">cd ..</div><div class="line">wget https://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.10.1.tar.gz --no-check-certificate</div><div class="line">tar zxvf virtualenv-1.10.1.tar.gz</div><div class="line">cd virtualenv-1.10.1</div><div class="line">sudo /usr/local/python2.7.3/bin/python setup.py install</div><div class="line">sudo /usr/local/python2.7.3/bin/easy_install virtualenvwrapper</div></pre></td></tr></table></figure>
<blockquote>
<p>如果遇到 [FATAL] Failed to create text with cairo, this probably means cairo cant find any fonts. Install some system fonts and try again。可以尝试安装bitmap font。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo yum install bitmap.x86_64</div><div class="line">sudo yum install bitmap-fonts-compat.noarch</div></pre></td></tr></table></figure>
<h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><ul>
<li>创建管理python环境的用户</li>
</ul>
<p>为了便于环境的统一管理，创建一个普通用户进行新创建python环境的管理和相关python扩展的安装。同时，向数字公司的<code>addops</code>们致敬。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">useradd appops</div></pre></td></tr></table></figure></p>
<ul>
<li>创建python环境安装目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo mkdir -p /data/server/python-envs</div><div class="line">sudo chown -R appops.appops /data/server</div></pre></td></tr></table></figure>
<ul>
<li>配置新安装的python2.7.3环境</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo su appops -c &apos;vim ~/.bashrc&apos;</div></pre></td></tr></table></figure>
<p>添加如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export WORKON_HOME=/data/server/python-envs</div><div class="line">export VIRTUALENVWRAPPER_PYTHON=/usr/local/python2.7.3/bin/python</div><div class="line">export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/python2.7.3/bin/virtualenv</div><div class="line">source /usr/local/python2.7.3/bin/virtualenvwrapper.sh</div></pre></td></tr></table></figure></p>
<h1 id="搭建graphite监控服务"><a href="#搭建graphite监控服务" class="headerlink" title="搭建graphite监控服务"></a>搭建graphite监控服务</h1><h2 id="安装步骤-1"><a href="#安装步骤-1" class="headerlink" title="安装步骤"></a>安装步骤</h2><ul>
<li><p>创建安装目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /opt/graphite</div><div class="line">sudo chown -R appops.appops /opt/graphite</div></pre></td></tr></table></figure>
</li>
<li><p>创建python虚拟环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo su appops</div><div class="line">source ~/.bashrc</div><div class="line">mkvirtualenv graphite</div></pre></td></tr></table></figure>
</li>
<li><p>graphite安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">pip install whisper</div><div class="line">pip install carbon</div><div class="line">pip install graphite-web</div><div class="line">pip install django==1.5</div><div class="line">pip install django-tagging</div><div class="line">pip install uwsgi</div><div class="line">pip install MySQL-python</div><div class="line">pip install daemonize</div></pre></td></tr></table></figure>
</li>
</ul>
<p>graphite使用<code>cairo</code>进行绘图，由于系统自带的cairo版本较低（需要cairo1.10以上），使用pip安装cairo会出错，所以采用编译安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">wget http://cairographics.org/releases/pycairo-1.8.8.tar.gz</div><div class="line">tar zxvf pycairo-1.8.8.tar.gz</div><div class="line">python -c &quot;import sys; print sys.prefix&quot;</div><div class="line">cd pycairo-1.8.8</div><div class="line">./configure --prefix=/data/server/python-envs/graphite</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure></p>
<ul>
<li>目录说明<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">bin -- 数据收集相关工具</div><div class="line">conf -- 数据存储相关配置文件</div><div class="line">    carbon.conf -- 数据收集carbon进程涉及的配置</div><div class="line">    dashboard.conf -- Dashboard UI相关配置</div><div class="line">    graphite.wsgi -- wsgi相关配置</div><div class="line">    storage-schemas.conf -- Schema definitions for Whisper files</div><div class="line">    whitelist.conf -- 定义允许存储的metrics白名单</div><div class="line">    graphTemplates.conf -- 图形化展示数据时使用的模板</div><div class="line">examples -- 示例脚本</div><div class="line">lib -- carbon和twisted库</div><div class="line">storage -- 数据文件存储目录</div><div class="line">webapp -- 数据前端展示涉及程序</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="配置Graphite-web"><a href="#配置Graphite-web" class="headerlink" title="配置Graphite-web"></a>配置Graphite-web</h2><ul>
<li>初始化配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd /opt/graphite/webapp/graphite</div><div class="line">cp local_settings.py.example local_settings.py</div><div class="line">cp /opt/graphite/conf/graphite.wsgi.example /opt/graphite/conf/graphite.wsgi</div><div class="line">cp /opt/graphite/conf/graphTemplates.conf.example /opt/graphite/conf/graphTemplates.conf</div><div class="line">cp /opt/graphite/conf/dashboard.conf.example /opt/graphite/conf/dashboard.conf</div></pre></td></tr></table></figure>
</li>
</ul>
<p>修改或者增加如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">TIME_ZONE</div><div class="line">DEBUG</div><div class="line">SECRET_KEY</div><div class="line">DATABASES</div></pre></td></tr></table></figure></p>
<p>示例配置文件<a href="https://gist.github.com/jqlblue/88f8a9b14bbe4bae3666" target="_blank" rel="external">local_settings.py</a></p>
<ul>
<li><p>初始化数据库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py syncdb</div></pre></td></tr></table></figure>
</li>
<li><p>启动graphite-web</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uwsgi --http localhost:8085 --master --processes 1 --home /data/server/python-envs/graphite --pythonpath /opt/graphite/webapp/graphite --wsgi-file=/opt/graphite/conf/graphite.wsgi --enable-threads --thunder-lock</div></pre></td></tr></table></figure>
</li>
</ul>
<img src="/images/graphite/web.jpg" title="graphite web">
<h2 id="配置数据收集服务"><a href="#配置数据收集服务" class="headerlink" title="配置数据收集服务"></a>配置数据收集服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp /opt/graphite/conf/carbon.conf.example /opt/graphite/conf/carbon.conf</div><div class="line">cp /opt/graphite/conf/storage-schemas.conf.example /opt/graphite/conf/storage-schemas.conf</div><div class="line">cp /opt/graphite/conf/whitelist.conf.example /opt/graphite/conf/whitelist.conf</div></pre></td></tr></table></figure>
<p>编辑<code>/opt/graphite/lib/carbon/util.py</code>，将</p>
<pre><code>from twisted.scripts._twistd_unix import daemonize
</code></pre><p>替换成</p>
<pre><code>import daemonize
</code></pre><p>否则启动cabon时会遇到<code>ImportError: cannot import name daemonize</code>。</p>
<ul>
<li>配置存储白名单<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /opt/graphite/conf/whitelist.conf</div></pre></td></tr></table></figure>
</li>
</ul>
<p>添加</p>
<pre><code>^test\..*
^server\..*
</code></pre><p>即只存储以<code>test.</code>和<code>server.</code>开头的metrics。</p>
<ul>
<li>配置存储Schemas<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /opt/graphite/conf/storage-schemas.conf</div></pre></td></tr></table></figure>
</li>
</ul>
<p>添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[server]</div><div class="line">pattern = ^server\..*</div><div class="line">retentions = 60s:1d,5m:7d,15m:3y</div><div class="line"></div><div class="line">[default]</div><div class="line">pattern = ^test\..*</div><div class="line">retentions = 60s:1d,5m:7d</div></pre></td></tr></table></figure>
<p>上面的配置，会对于<code>test.</code>开头的metrics，以60秒为精度存储一天，以5分钟为精度存储7天。即查询一天内的数据时，可以精确到1分钟，查询7天内的数据时，只能精确到5分钟。</p>
<ul>
<li>启动cabon<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python /opt/graphite/bin/carbon-cache.py --config=/opt/graphite/conf/carbon.conf --debug start</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="收集监控数据"><a href="#收集监控数据" class="headerlink" title="收集监控数据"></a>收集监控数据</h1><p>etsy开源了一个叫<a href="https://github.com/etsy/statsd" target="_blank" rel="external">statsd</a>的daemon，可用于将监控数据收集到graphite，但那玩意是nodejs写的。</p>
<p>为了保持方案的简单，采用<code>crontab</code>的方式，利用<a href="https://gist.github.com/jqlblue/c7473473f8a7357167b8" target="_blank" rel="external">shell脚本</a>将要收集的数据通过udp协议直接发送至graphite。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">HOST=$(hostname | awk -F&apos;.&apos; &apos;&#123;print $1&#125;&apos;)</div><div class="line">IDC=&quot;local&quot;</div><div class="line"></div><div class="line">SYSTEM_LOAD=$(awk &apos;&#123;print $1&#125;&apos; /proc/loadavg)</div><div class="line">SYSTEM_MEMORY_FREE=$(free -m | grep &apos;buffers/cache&apos; | awk &apos;&#123;print $NF&#125;&apos;)</div><div class="line">SYSTEM_SWAP_USE=$(free -m | grep &apos;Swap&apos; | awk &apos;&#123;print $(NF-1)&#125;&apos;)</div><div class="line">SYSTEM_DISK_USED=$(df -h | grep &apos;/&apos; | awk &apos;BEGIN&#123;_max=0&#125;&#123;len=length($5);i=substr($5,0,len-1);if(_max&lt;i)&#123;_max=i&#125;&#125;END&#123;print _max&#125;&apos;)</div><div class="line"></div><div class="line">TIMESTAMP=$(date +%s)</div><div class="line"></div><div class="line">### send to garphite through udp port 2003 ########</div><div class="line">echo -n &quot;server.$IDC.$HOST.system.load $SYSTEM_LOAD $TIMESTAMP&quot; &gt; /dev/udp/127.0.0.1/2003</div><div class="line">echo -n &quot;server.$IDC.$HOST.system.memory_free $SYSTEM_MEMORY_FREE $TIMESTAMP&quot; &gt; /dev/udp/127.0.0.1/2003</div><div class="line">echo -n &quot;server.$IDC.$HOST.system.swap_used $SYSTEM_SWAP_USED $TIMESTAMP&quot; &gt; /dev/udp/127.0.0.1/2003</div><div class="line">echo -n &quot;server.$IDC.$HOST.system.disk_used $SYSTEM_DISK_USED $TIMESTAMP&quot; &gt; /dev/udp/127.0.0.1/2003</div></pre></td></tr></table></figure>
<img src="/images/graphite/data-view.jpg" title="graphite monitor data view">
<p><em>监控数据收集和展示流图</em></p>
<img src="/images/graphite/data-flow.jpg" title="graphite monitor data flow">
<h1 id="搭建cabot报警服务"><a href="#搭建cabot报警服务" class="headerlink" title="搭建cabot报警服务"></a>搭建cabot报警服务</h1><p><code>cabot</code>是一个轻量级的监控报警服务。其报警可以基于：</p>
<pre><code>graphite收集的监控数据
url的响应内容和状态码
jenkins编译任务的状态
</code></pre><ul>
<li>安装依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo gem sources --remove http://rubygems.org/</div><div class="line">sudo gem sources -a http://ruby.taobao.org/</div><div class="line">sudo gem install foreman</div></pre></td></tr></table></figure>
<blockquote>
<p>因为foreman要求ruby版本需要在1.9.3以上，如果系统自带ruby版本过低，可以通过rvm安装ruby，再安装foreman。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo yum install npm</div><div class="line">sudo npm install -g coffee-script less@1.3 --registry http://registry.npmjs.org/</div></pre></td></tr></table></figure>
<ul>
<li>初始化目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo su appops</div><div class="line">mkdir /data/server/alter</div><div class="line">cd /data/server/alter</div><div class="line">mkvirtualenv cabot</div></pre></td></tr></table></figure>
<ul>
<li>安装cabot</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/arachnys/cabot.git</div><div class="line">cd cabot</div><div class="line">cp conf/development.env.example conf/development.env</div></pre></td></tr></table></figure>
<p>修改<a href="https://gist.github.com/jqlblue/165d50a949cd4aae2191" target="_blank" rel="external">setup.py</a>，添加</p>
<pre><code>&apos;MySQL-python==1.2.5&apos;,
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python setup.py install</div><div class="line">/bin/sh ./setup_dev.sh</div></pre></td></tr></table></figure>
<ul>
<li>配置cabot</li>
</ul>
<p>使用foreman启动cabot时，会先读取<code>.foreman</code></p>
<pre><code># vi: set ft=yaml :

procfile: Procfile.dev
env: conf/development.env
</code></pre><p><code>Procfile.dev</code>内容如下：<br>    web:       python manage.py runserver 0.0.0.0:$PORT<br>    celery:    celery -A cabot worker –loglevel=DEBUG -B -c 8 -Ofair</p>
<p>其中定义了启动cabot-web和celery任务队列时使用的命令，针对不同的环境，可以酌情修改<code>.foreman</code>和对应的<code>procfile</code>及<code>env</code>。</p>
<p>对于邮件报警，需要修改<a href="https://gist.github.com/jqlblue/a6329a7649be16e92df4" target="_blank" rel="external">conf/development.env</a>中的如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">DATABASE_URL -- 数据库配置</div><div class="line">TIME_ZONE -- 时区</div><div class="line">ADMIN_EMAIL</div><div class="line">CABOT_FROM_EMAIL</div><div class="line">CELERY_BROKER_URL -- celery任务队列配置</div><div class="line">SES_HOST -- smtp host</div><div class="line">SES_USER -- 发送邮件的用户</div><div class="line">SES_PASS -- 发送邮件用户的密码</div><div class="line">SES_PORT -- smtp port</div></pre></td></tr></table></figure></p>
<ul>
<li>启动cabot<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup foreman start 2&gt;&amp;1 &gt; /dev/null &amp;</div></pre></td></tr></table></figure>
</li>
</ul>
<img src="/images/graphite/cabot_service.jpg" title="cabot service">
<img src="/images/graphite/cabot_service_check.jpg" title="cabot service check">
<img src="/images/graphite/cabot_service_check_detail.jpg" title="cabot service check detail">
<p>reference：</p>
<p>[^1] <a href="http://graphite.readthedocs.org/en/latest/overview.html" target="_blank" rel="external">http://graphite.readthedocs.org/en/latest/overview.html</a></p>
<p>[^2] <a href="http://cabotapp.com/qs/quickstart.html" target="_blank" rel="external">http://cabotapp.com/qs/quickstart.html</a></p>
<p>[^3] <a href="https://gist.github.com/jirutka/8636572" target="_blank" rel="external">https://gist.github.com/jirutka/8636572</a></p>
]]></content>
    
    <summary type="html">
    
      如何使用python实现的开源系统graphite搭建监控系统，并结合定时任务，收集服务器和webserver运行状态，配合cabot进行相关监控数值的报警
    
    </summary>
    
      <category term="devops" scheme="http://debughacks.github.io/categories/devops/"/>
    
    
      <category term="devops" scheme="http://debughacks.github.io/tags/devops/"/>
    
      <category term="monitor" scheme="http://debughacks.github.io/tags/monitor/"/>
    
  </entry>
  
  <entry>
    <title>在Linux服务器之间同步用户账号</title>
    <link href="http://debughacks.github.io/2014/08/02/synchronization-user-account-on-linux/"/>
    <id>http://debughacks.github.io/2014/08/02/synchronization-user-account-on-linux/</id>
    <published>2014-08-02T09:26:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近负责运帷的同事离职了，原先由运帷可以一手搞定的事情，分摊到了几个研发同事的身上。但是多人公用一个账号，实在感觉不爽。<br><a id="more"></a><br>由于公司没有几台服务器上，所以可以逐一登录服务器创建新账号。但是对于一个码农而言，这不科学，它违背了<code>DRY</code>原则。</p>
<p>当然，也可以配置一个ldap服务器，修改linux用户登录使用ldap验证。但这让我有一种从火窟跳到冰窖的感觉。先不说是否能搞定配置的事情，引入的这个ldap，又会变成另外一个坑。</p>
<p>昨天听一个同事时，我们来上班，要对得起自己的良心。所以我不能让上班时间在纠结中度过，用土方法解决问题先。</p>
<h2 id="同步步骤"><a href="#同步步骤" class="headerlink" title="同步步骤"></a>同步步骤</h2><p>因为目前有一台服务器是登录的跳板机，所以只需要在跳板机上创建好新账号，然后把用户账号同步到其他机器上就好。</p>
<blockquote>
<p>如果没有跳板机，也可以随便选一台服务器（A），在A服务器上创建账号，并同步到其他机器上。</p>
</blockquote>
<ul>
<li><p>在跳板机上创建用户账号</p>
</li>
<li><p>在要同步的服务器上创建账号，并将该用户在跳板机上如下文件中对于的条目追加到要同步到机器上</p>
</li>
</ul>
<p><code>/etc/passwd</code>， <code>/etc/group</code>, <code>/etc/shadow</code></p>
<p>以跳板机ip：<code>192.168.1.1</code>，要同步的服务器：<code>192.168.1.8</code>，新增用户名：<code>jqlblue</code>为例，登录跳板机执行：</p>
<pre><code>$ useradd jqlblue
$ ssh -l root -p 22 192.168.1.8 &quot;useradd jqlblue&quot;
$ grep jqlblue: /etc/group | xargs -I {} ssh -l root -p 22 192.168.1.8 &quot;echo {} &gt;&gt; /etc/group&quot;
$ grep jqlblue: /etc/passwd | xargs -I {} ssh -l root -p 22 192.168.1.8 &quot;echo {} &gt;&gt; /etc/passwd&quot;
$ grep jqlblue: /etc/shadow | xargs -I {} ssh -l root -p 22 192.168.1.8 &quot;echo {} &gt;&gt; /etc/shadow&quot;
</code></pre><p>上述操作，编写成脚本即可。当需要新增或者修改用户时，只需在跳板机上进行操作，同步问题，由脚本来完成。</p>
<p><em>上述脚本要在生产环境使用，需要注意如下问题：</em><br>    1 新增用户时，uid或者gid重复的问题<br>    2 修改用户密码或者组信息后，产生多条记录的问题</p>
]]></content>
    
    <summary type="html">
    
      如何在多台linux服务器之间同步用户账号，linux操作系统用户登录过程解析
    
    </summary>
    
      <category term="linux" scheme="http://debughacks.github.io/categories/linux/"/>
    
      <category term="devops" scheme="http://debughacks.github.io/categories/linux/devops/"/>
    
    
      <category term="linux" scheme="http://debughacks.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>0012</title>
    <link href="http://debughacks.github.io/2014/07/05/0012/"/>
    <id>http://debughacks.github.io/2014/07/05/0012/</id>
    <published>2014-07-05T05:59:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>从小到大，我最不喜欢的就是离别。但这却是我们每天都要经历的事情，只是或长，或短。<br><a id="more"></a></p>
<p>前些天整理屋子时翻出刚毕业时的照片，老婆打趣地说：“你的青葱都去哪儿了？”。</p>
<p>我自然只能说：“都给你了啊！”。</p>
<p>老婆呵呵一笑说道：“你一天才陪我多会儿啊，你的青葱，都给了你的电脑，你的代码。一天就知道敲敲敲，赶紧去喝点水。家里快没米了，一会去超市拎袋米回来。。。”</p>
<h2 id="十年"><a href="#十年" class="headerlink" title="十年"></a>十年</h2><p>在休假的期间，去山东找了一趟儿时的大哥。</p>
<p>在不太拥挤的人群中，第一眼就找出了那个熟悉的身影。当年60米短跑健将的风采已然不再，零零星星的白发，也小成气候。</p>
<p>见面后，吃饭是少不了的。在我的强烈要求下，找了一家兰州拉面馆。份量的确实在，但却是另一种滋味。吃着我从北京带过去的五香花生米，聊着各自的境况。</p>
<p>本来想一起看看世界杯，找找儿时的感觉，可是因为电视线路发生了故障，于是晃悠到了一家网吧。原以为可以畅快淋漓地玩几把路人局，结果屡屡被虐。</p>
<p>回来的车上，想起来这个城市已经十年。</p>
<h2 id="在路上"><a href="#在路上" class="headerlink" title="在路上"></a>在路上</h2><p>我是个胸无大志的人，所以每当别人问起我的梦想，问起我的三年，五年规划，只会让我更加茫然。</p>
<p>因为录取通知书中附带的地图显示，我们学校就在长城脚下，所以我就兴高采烈地来了帝都。我盼望着起早可以去长城跑步。</p>
<p>报到时，我就傻眼了：去长城不止得花钱，而且就算花一上午，我也不一定能跑地到。</p>
<p>做毕设时，无意被导师介绍到了她同学的公司，然后就顺利地留了下来，随之开启了我的码农之路。</p>
<p>期间不断遇到很好的上司，不错的同事，一直过地不好不坏。</p>
<h2 id="再见360"><a href="#再见360" class="headerlink" title="再见360"></a>再见360</h2><p>我也不是一个睿智的人。虽然我老婆经常说：你没吃过猪肉，你还没见过猪跑吗？</p>
<p>我这样的人，或许就像一颗树芽。</p>
<p>在某个微风和煦的清晨，悄悄地探出头，努力一番，长成一片叶子。又在某个萧瑟的秋夜里，落在了地上，随着一场雨水，和在了泥土中。</p>
<p>轻轻地来，轻轻地走，不被任何人察觉。</p>
<p>虽然我注定是一片叶子，但是我曾努力去绽放成为一朵绚丽的花，这就已经足够。</p>
<p>再见360，希望你们一切都好。</p>
<img src="/images/0012.jpg" title="card">
]]></content>
    
    <summary type="html">
    
      0012
    
    </summary>
    
      <category term="essay" scheme="http://debughacks.github.io/categories/essay/"/>
    
    
      <category term="essay" scheme="http://debughacks.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>手动刷入Android 4.4.3 OTA 更新包</title>
    <link href="http://debughacks.github.io/2014/06/08/manual-update-android-ota-update/"/>
    <id>http://debughacks.github.io/2014/06/08/manual-update-android-ota-update/</id>
    <published>2014-06-07T22:35:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天上午，nexus4终于收到了google android 4.4.3 的ota更新包，但是从上午到晚上，愣是没有下载下来。这就像因为长智齿而牙龈肿痛的你被人请吃麻辣香锅那样难受。<br><a id="more"></a><br>作为一个吃货，怎么能受得了这份煎熬？就算用半边牙齿，也不能虚此行。</p>
<p>当然，作为码农。就算被铜墙铁壁包围，也要想办法越过长城，对世界说出那句“hello world”。</p>
<h1 id="诊断"><a href="#诊断" class="headerlink" title="诊断"></a>诊断</h1><p>更新包为什么下不下来，这肯定是有原因的。对手机的网络请求进行抓包，应该可以查明原因。</p>
<p>如何对手机进行抓包，可以参见之前的博文“<a href="http://jqlblue.github.io/2013/08/04/guide-of-packet-mobile-capture/" target="_blank" rel="external">移动应用无线抓包指南</a>”。<br>如果手机使用的是家里的wifi网络，那对手机进行抓包会非常easy。两步即可：</p>
<pre><code>1. 在电脑上对fiddle进行设置
2. 修改手机上的网络设置，设置代理，其中代理服务器的ip就是电脑的ip
</code></pre><blockquote>
<p>如何设置可参见博文<a href="http://jqlblue.github.io/2013/08/04/guide-of-packet-mobile-capture/" target="_blank" rel="external">移动应用无线抓包指南</a>”</p>
</blockquote>
<p>设置完成后，再请求时发现更新包的无法下载。<br><img src="/images/mobile/android-4.4.3-update.png" title="android-4.4.3-update"></p>
<p>这时有两种方案：</p>
<pre><code>1. 通过代理等途径，获取更新包域名的对应的ip，绑定host。
2. 因为已经抓包获取到了更新包的下载地址，可以通过代理等途径，下载更新包并手动刷入。
</code></pre><blockquote>
<p>因为在手机上设置的代理服务器是电脑的ip，所以只要在电脑上绑定host，手机上也会生效。</p>
</blockquote>
<p>由于更新包下载地址的域名是动态的，所以没法绑定host。于是只有选择下载更新包，手动刷入。</p>
<h1 id="下载4-4-3-OTA-更新号"><a href="#下载4-4-3-OTA-更新号" class="headerlink" title="下载4.4.3 OTA 更新号"></a>下载4.4.3 OTA 更新号</h1><p>为了方便，已下载针对nexus4的android4.4.3的ota更新包。需要的，可直接通过如下地址下载<a href="http://pan.baidu.com/s/1mgjxxLA#dir/path=%2Fsoft%2Fandroid-4.4.3-update%2Fkitkat-4.4.3-update" target="_blank" rel="external">android-4.4.3-ota</a>。</p>
<h1 id="使用adb手动刷入OTA更新包"><a href="#使用adb手动刷入OTA更新包" class="headerlink" title="使用adb手动刷入OTA更新包"></a>使用adb手动刷入OTA更新包</h1><h2 id="手动刷入的准备工作"><a href="#手动刷入的准备工作" class="headerlink" title="手动刷入的准备工作"></a>手动刷入的准备工作</h2><p>在手动刷入更新包时，除了下载更新包，还需要做如下准备工作：</p>
<ul>
<li>在手机的<code>开发者选项</code>中，开启<code>USB调试</code>。</li>
</ul>
<blockquote>
<p>在<code>设置</code>，<code>关于手机</code>中，狂点<code>版本号</code>，可开启<code>开发者选项</code>。</p>
</blockquote>
<ul>
<li>在电脑上使用usb线连接手机</li>
</ul>
<p>手机上应该会出现如下画面。选择<code>允许</code></p>
<img src="/images/mobile/android-usb-debug.png" title="安卓usb调试">
<p>使用usb连接手机后，电脑上可能会自动安装相关驱动程序，请耐心等待完成。</p>
<ul>
<li>下载adb</li>
</ul>
<p><code>adb</code>包含在android的sdk中，但是我们只需要<code>adb.exe</code>, <code>AdbWinApi.dll</code>, <code>AdbWinUsbApi.dll</code>。</p>
<p>如果不想去下载android的sdk，可以通过如下地址下载<a href="http://pan.baidu.com/s/1mgjxxLA#dir/path=%2Fsoft%2Fandroid-4.4.3-update%2Fadb" target="_blank" rel="external">刷机adb</a>。</p>
<p>下载完成后，解压到某个目录，如<code>D:\soft\nexus4\Tools</code>，在命令行执行：<br>    cd D:\soft\nexus4\Tools<br>    d:<br>    adb.exe devices</p>
<p>如果看到下图，说明准备工作告一段落。如果没有，可能是相关驱动安装地有问题，可自行查阅解决。</p>
<img src="/images/mobile/android-adb-devices.png" title="安卓adb devices">
<h2 id="开刷"><a href="#开刷" class="headerlink" title="开刷"></a>开刷</h2><ul>
<li>关机，然后按住<code>音量下键</code>和<code>电源键</code>，进入fastboot模式：</li>
</ul>
<img src="/images/mobile/android-fastboot.png" title="安卓fastboot">
<ul>
<li>通过按<code>音量上下键</code>进行切换，切换到<code>Recovery Mode</code>模式，按<code>电源键</code>选择进入：</li>
</ul>
<img src="/images/mobile/android-recovery-mode.png" title="安卓recovery-mode">
<p>此时，你可以看到一个倒地的机器人：</p>
<img src="/images/mobile/android-recovery-mode-2.png" title="安卓recovery-mode">
<ul>
<li>按<code>电源键</code>，然后再迅速按<code>音量上键</code></li>
</ul>
<blockquote>
<p>这一步比较艰难，需要多尝试几次</p>
</blockquote>
<p>直到看到如下界面：</p>
<img src="/images/mobile/android-apply-update.png" title="安卓adb update">
<p>再按<code>音量上下键</code>进行切换，切换到<code>apply update from ADB</code>，按<code>电源键</code>选择进入：</p>
<img src="/images/mobile/android-sideload.png" title="安卓sideload">
<ul>
<li>通过USB再次连接电脑和手机</li>
</ul>
<p>在命令行执行：<br>    adb.exe sideload kitkat-4.4.3.zip</p>
<img src="/images/mobile/android-adb-sideload.png" title="安卓 adb sideload">
<p>手机上将会出现如下界面：</p>
<img src="/images/mobile/android-update-ota-1.png" title="安卓 ota update">
<p>耐心等待，等ota更新包安装完成时，会出现如下界面，按<code>电源键</code>选择重启即可。</p>
<img src="/images/mobile/android-update-ota-2.png" title="安卓 ota update">
<p>重启后，会对已安装的应用进行优化。通过<code>设置</code>，<code>关于手机</code>查看系统版本，发现已经是<code>4.4.3</code>。</p>
<img src="/images/mobile/android-4.4.3-update-end.jpg" title="安卓 ota 更新完成">
]]></content>
    
    <summary type="html">
    
      下载安卓4.4.3 ota更新包，通过adb手动更新到最新的安卓系统
    
    </summary>
    
      <category term="mobile" scheme="http://debughacks.github.io/categories/mobile/"/>
    
    
      <category term="mobile" scheme="http://debughacks.github.io/tags/mobile/"/>
    
  </entry>
  
  <entry>
    <title>再话Tcpcopy的胞弟gryphon</title>
    <link href="http://debughacks.github.io/2014/05/28/tcpcopy-gryphon-introduction/"/>
    <id>http://debughacks.github.io/2014/05/28/tcpcopy-gryphon-introduction/</id>
    <published>2014-05-28T07:57:00.000Z</published>
    <updated>2016-06-30T08:07:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>gryphon是由网易研发，能够模拟千万级别并发用户进行压力测试的一个软件，可用于网络消息推送服务方面的压力测试和传统web服务的压力测试。目前由网易的 <a href="http://weibo.com/tcpcopy" target="_blank" rel="external">王斌</a>进行维护。更多介绍可参见<a href="https://github.com/wangbin579/gryphon" target="_blank" rel="external">A powerful tool to simulate millions of concurrent users for loading testing</a><br><a id="more"></a><br>gryphon的安装和使用方法分为<code>传统架构方式</code>和<code>高级架构方式</code>。</p>
<h1 id="相关角色说明"><a href="#相关角色说明" class="headerlink" title="相关角色说明"></a>相关角色说明</h1><ul>
<li>gryphon客户端（/usr/local/bin/gryphon）</li>
<li>intercept拦截进程（/usr/local/bin/intercept）</li>
</ul>
<p>测试时，gryphon客户端读取录制的pcap文件（可以通过tcpdump产生），通过<code>Raw Socket</code>修改请求并发送到测试机。因为这些请求的来源ip可能是模拟的，为了连接的正常关闭，需要拦截测试机的响应包。</p>
<pre><code>在传统架构下：
1 netfilter-iptables在协议栈将数据包交给内核中的ip_queue模块
2 intercept在用户态通过netlink socket接收内核传来的数据报文
3 将处理后的报文以及对报文的处理意见（ACCEPT，DROP等）传递给内核协议栈
</code></pre><figure class="highlight c"><figcaption><span>communication/tc_socket.c</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">tc_raw_socket_out_init()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fd, n;</div><div class="line"></div><div class="line">    n = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * On Linux when setting the protocol as IPPROTO_RAW,</div><div class="line">     * then by default the kernel sets the IP_HDRINCL option and</div><div class="line">     * thus does not prepend its own IP header.</div><div class="line">     */</div><div class="line">    fd = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);</div></pre></td></tr></table></figure>
<figure class="highlight c"><figcaption><span>communication/tc_interception.c</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">tc_nl_event_process(<span class="keyword">tc_event_t</span> *rev)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span>            buffer[<span class="number">65536</span>];</div><div class="line">    <span class="keyword">register</span> <span class="keyword">int</span>    i, pass_through_flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>   packet_id;</div><div class="line">    <span class="keyword">tc_ip_header_t</span> *ip_hdr;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (tc_nl_socket_recv(rev-&gt;fd, buffer, <span class="number">65536</span>) == TC_ERROR)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> TC_ERROR;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ip_hdr = tc_nl_ip_header(buffer);</div><div class="line">    packet_id = tc_nl_packet_id(buffer);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ip_hdr != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="comment">/* check if it is the valid user to pass through firewall */</span></div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; srv_settings.passed_ips.num; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (srv_settings.passed_ips.ips[i] == ip_hdr-&gt;daddr) &#123;</div><div class="line">                pass_through_flag = <span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        tot_resp_packs++;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (pass_through_flag) &#123;</div><div class="line"></div><div class="line">            <span class="comment">/* pass through the firewall */</span></div><div class="line">            dispose_netlink_packet(rev-&gt;fd, NF_ACCEPT, packet_id);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">            tot_copy_resp_packs++;</div><div class="line">            router_update(srv_settings.old, ip_hdr);</div><div class="line">            <span class="comment">/* drop the packet */</span></div><div class="line">            dispose_netlink_packet(rev-&gt;fd, NF_DROP, packet_id);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> TC_OK;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<pre><code>在高级架构下，是通过在测试机上配置静态路由规则，将响应路由到辅助服务器进行处理。
</code></pre><img src="/images/gryphon/raw_socket.jpg" title="raw socket">
<h1 id="传统架构下安装并使用"><a href="#传统架构下安装并使用" class="headerlink" title="传统架构下安装并使用"></a>传统架构下安装并使用</h1><p>在传统架构下，<code>intercept拦截进程</code>需要运行在测试机上，用于拦截测试机的响应包。</p>
<h2 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h2><h3 id="在测试机安装intercept拦截进程"><a href="#在测试机安装intercept拦截进程" class="headerlink" title="在测试机安装intercept拦截进程"></a>在测试机安装intercept拦截进程</h3><pre><code>git clone git://github.com/wangbin579/tcpcopy.git
cd tcpcopy
sh autogen.sh
./configure --prefix=/usr/local/tcocopy --enable-single
make
sudo make install
</code></pre><h3 id="安装gryphon客户端"><a href="#安装gryphon客户端" class="headerlink" title="安装gryphon客户端"></a>安装gryphon客户端</h3><pre><code>git clone git://github.com/wangbin579/gryphon.git
cd gryphon
sh autogen.sh
./configure --prefix=/usr/local/gryphon --enable-single
make
sudo make install
</code></pre><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>以<code>intercept拦截进程</code>安装在测试机<strong>10.16.15.118</strong>，应用端口是<strong>80</strong>，<code>gryphon客户端</code>安装在<strong>10.16.15.117</strong>为例，说明gryphon在传统架构下的基本使用方法。</p>
<ul>
<li>tcpdump抓包录制pcap文件</li>
</ul>
<p>可以在线上服务器抓包录制，并拷贝到<code>gryphon客户端</code>所在的服务器<strong>10.16.15.117</strong></p>
<pre><code>tcpdump -i eth0 port 80 -s 0 -w xxx.pcap
</code></pre><ul>
<li>拦截响应包</li>
</ul>
<p>在测试机<strong>10.16.15.118</strong>上操作<br>    modprobe ip_queue<br>    iptables -I OUTPUT -p tcp –sport 80 -j QUEUE<br>    /usr/local/tcpcopy/bin/intercept</p>
<blockquote>
<p>如果内核版本3.5，可以使用nfqueue</p>
</blockquote>
<ul>
<li>发送测试请求</li>
</ul>
<p>在<code>gryphon客户端</code>所在服务器<strong>10.16.15.117</strong>上操作<br>    /usr/local/gryphon/bin/gryphon -x 80-10.16.15.118:80 -f ./xxx.pcap -s 10.16.15.118 -u 1000 -a 2 -c 10.17.15.*</p>
<p>上述命令，从xxx.pcap抓包文件中提取出访问80端口的用户会话过程，模拟1000个用户，将请求复制到测试机<strong>10.16.15.118</strong>的<strong>80</strong>端口中去。其中用户ip地址的范围是10.17.15.*。</p>
<blockquote>
<p>-a参数用于加快数据包的发送速度。-a 2代表将数据包之间的发送间隔缩短一半，相当于加速2倍。也可和－i配合，如 －a 10 －i 2048</p>
</blockquote>
<p>gryphon拦截进程中各个基本参数的释义如下：<br>    gryphon -x historyServerPort-targetServerIP:targetServerPort -f <pcapfile,> -s <intercept address=""> -u <user num=""> -c <ip range,=""></ip></user></intercept></pcapfile,></p>
<h2 id="调试步骤"><a href="#调试步骤" class="headerlink" title="调试步骤"></a>调试步骤</h2><p><code>gryphon客户端</code>和<code>intercept拦截进程</code>运行时，会在当前工作目录生成<code>error_gryphon.log</code>，<code>error_intercept.log</code>日志文件，里面有相关运行信息。当测试过程不能正常工作时，可优先查看相关日志。</p>
<p>其次就是在测试机或者<code>gryphon客户端</code>所在的服务器上进行抓包。确保<code>gryphon客户端</code>发出请求，并且没有收到测试机的响应包，如：<br><img src="/images/gryphon/gryphon_tcpdump.png" title="gryphon tcpdump"></p>
<h1 id="高级架构下安装并使用"><a href="#高级架构下安装并使用" class="headerlink" title="高级架构下安装并使用"></a>高级架构下安装并使用</h1><p>在高级架构下，<code>intercept拦截进程</code>需要运行在辅助服务上，用于拦截测试机的响应包。</p>
<h2 id="安装与使用-1"><a href="#安装与使用-1" class="headerlink" title="安装与使用"></a>安装与使用</h2><h3 id="在测试机安装intercept拦截进程-1"><a href="#在测试机安装intercept拦截进程-1" class="headerlink" title="在测试机安装intercept拦截进程"></a>在测试机安装intercept拦截进程</h3><pre><code>git clone git://github.com/wangbin579/tcpcopy.git
cd tcpcopy
sh autogen.sh
./configure --prefix=/usr/local/adv-tcpcopy --enable-single  --enable-pcap --enable-advanced
make
sudo make install
</code></pre><h3 id="安装gryphon客户端-1"><a href="#安装gryphon客户端-1" class="headerlink" title="安装gryphon客户端"></a>安装gryphon客户端</h3><pre><code>git clone git://github.com/wangbin579/gryphon.git
cd gryphon
sh autogen.sh
./configure --prefix=/usr/local/adv-gryphon --enable-single --enable-advanced
make
sudo make install
</code></pre><h3 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h3><p>以<code>intercept拦截进程</code>安装在辅助服务器<strong>10.16.15.116</strong>，<code>gryphon客户端</code>安装在<strong>10.16.15.117</strong>，测试机<strong>10.16.15.118</strong>的应用端口是<strong>80</strong>为例，说明gryphon在高级架构下的使用方法。</p>
<ul>
<li>tcpdump抓包录制pcap文件</li>
</ul>
<p>可以在线上服务器抓包录制，并拷贝到<code>gryphon客户端</code>所在的服务器<strong>10.16.15.117</strong></p>
<pre><code>tcpdump -i eth0 port 80 -s 0 -w xxx.pcap
</code></pre><ul>
<li>拦截响应包</li>
</ul>
<p>在测试机<strong>10.16.15.118</strong>上设置静态路由，将响应包路由到辅助服务器<strong>10.16.15.116</strong><br>    route add -net 10.17.15.0 netmask 255.255.255.0 gw 10.16.15.116</p>
<p>查看是否设置成功<br>    $ route<br>    Kernel IP routing table<br>    Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>    10.17.15.0      10.16.15.116    255.255.255.0   UG    0      0        0 eth0<br>    10.16.14.0      <em>               255.255.254.0   U     0      0        0 eth0<br>    169.254.0.0     </em>               255.255.0.0     U     0      0        0 eth0<br>    default         10.16.14.1      0.0.0.0         UG    0      0        0 eth0</p>
<p>如果设置错了，可以删除并重新添加<br>    route del -net 10.17.15.0 netmask 255.255.255.0</p>
<p>在辅助服务器<strong>10.16.15.116</strong>上启动intercept拦截进程<br>    /usr/local/adv-tcpcopy/bin/intercept -F ‘tcp and src port 80’</p>
<ul>
<li>发送测试请求</li>
</ul>
<p>在<code>gryphon客户端</code>所在服务器<strong>10.16.15.117</strong>上操作<br>    /usr/local/adv-gryphon/bin/gryphon -x 80-10.16.15.118:80 -f ./xxx.pcap -s 10.16.15.116 -u 1000 -c 10.17.15.*</p>
<p><strong> Reference </strong></p>
<p>[^1] <a href="http://www.ibm.com/developerworks/cn/linux/l-ntflt/index.html" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/linux/l-ntflt/index.html</a></p>
<p>[^2] <a href="http://www.ibm.com/developerworks/cn/linux/l-netlink/index.html" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/linux/l-netlink/index.html</a></p>
<p>[^3] <a href="http://www.tenouk.com/Module42a.html" target="_blank" rel="external">http://www.tenouk.com/Module42a.html</a></p>
]]></content>
    
    <summary type="html">
    
      tcpcopy的胞弟gryphon的介绍，安装，测试和使用
    
    </summary>
    
      <category term="devops" scheme="http://debughacks.github.io/categories/devops/"/>
    
    
      <category term="devops, linux" scheme="http://debughacks.github.io/tags/devops-linux/"/>
    
  </entry>
  
  <entry>
    <title>一个使用Curl请求https资源的问题排查</title>
    <link href="http://debughacks.github.io/2014/05/14/a-trouble-in-request-https-in-curl/"/>
    <id>http://debughacks.github.io/2014/05/14/a-trouble-in-request-https-in-curl/</id>
    <published>2014-05-14T06:50:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天临下班前，应客户端大牛的要求，开发了一个返回下载服务器ip列表的接口，用于在客户端指定host以解决用户下载时遭遇运营商dns劫持的问题。</p>
<p>开发时略微有少许忐忑，但测试时一切顺利，于是就轻松地回家了。<br><a id="more"></a></p>
<p>早上一上线代码，就收到了通过<code>sentry</code>发出的报警邮件。原以为是缓存没有及时更新的问题，立马手动进行更新。但还是没有通过接口获取到相关ip。随即回滚代码，重新上线。</p>
<h1 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h1><p>后来下线一台服务器进行调试时发现，在调用ops提供的接口获取ip列表时没有获取到返回数据，而相关接口是<code>https</code>的。</p>
<p>再跟踪请求资源的函数发现，相关函数没有对<code>https</code>请求做特殊处理。相关函数实现如下：</p>
<pre><code>public static function get($url, array $headers = array(), $timeout = 5)
{
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, $url);

    if ($headers) {
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    }

    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    $content = curl_exec($ch);
    $response = curl_getinfo($ch);

    curl_close($ch);

    if ($response[&apos;http_code&apos;] == 200) {
        return $content;
    }

    return null;
}
</code></pre><p>这或许就是昨天那少许忐忑的缘由。于是增加如下代码，测试通过后重新上线。</p>
<pre><code>if (substr($url, 0, 5) == &apos;https&apos;) {
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
}
</code></pre><h1 id="进一步排查"><a href="#进一步排查" class="headerlink" title="进一步排查"></a>进一步排查</h1><p>线上的问题虽然暂时解决了，但是在问题解决之前，测试机上是正常的，这是为什么呢？</p>
<h2 id="在命令行运行curl排查问题"><a href="#在命令行运行curl排查问题" class="headerlink" title="在命令行运行curl排查问题"></a>在命令行运行curl排查问题</h2><p>在命令行使用curl请求ops的接口，其中线上服务器的运行结果如下：</p>
<pre><code>$ curl &apos;https://x.x.x.x/get_ips&apos;

curl: (60) SSL certificate problem, verify that the CA cert is OK. Details:
error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed
More details here: http://curl.haxx.se/docs/sslcerts.html
</code></pre><p>测试机上可以正常获取到结果。</p>
<p>然后分别查看curl的版本和curl使用的动态连接库，都没有发现差异<br>    $ /usr/bin/curl -V<br>    $ type curl</p>
<pre><code>/usr/bin/curl
$ ldd /usr/bin/curl
</code></pre><p>再查看上面的错误，发现可能是<code>https</code>证书的问题。于是添加<code>--verbose</code>参数，再次使用curl进行请求，以获取更多交互信息。</p>
<p>截取部分输出如下</p>
<pre><code>$ curl &apos;https://x.x.x.x/get_ips&apos; --verbose

* About to connect() to x.x.x.x port 80
*   Trying x.x.x.x... connected
* Connected to x.x.x.x (x.x.x.x) port 80
* successfully set certificate verify locations:
*   CAfile: /etc/pki/tls/certs/ca-bundle.crt
CApath: none
* SSLv2, Client hello (1):
SSLv3, TLS handshake, Server hello (2):
SSLv3, TLS handshake, CERT (11):
SSLv3, TLS alert, Server hello (2):
SSL certificate problem, verify that the CA cert is OK. Details:
error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed
* Closing connection #0
curl: (60) SSL certificate problem, verify that the CA cert is OK. Details:
error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed
More details here: http://curl.haxx.se/docs/sslcerts.html
</code></pre><p>可见使用的证书的是<code>/etc/pki/tls/certs/ca-bundle.crt</code>。</p>
<p>使用测试机上的证书替换线上服务器的证书后，问题解决。</p>
<blockquote>
<p>如果没有可用的证书，可以使用如下方法：</p>
</blockquote>
<pre><code>$ curl http://curl.haxx.se/ca/cacert.pem -o /etc/pki/tls/certs/ca-bundle.crt
</code></pre><h1 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h1><p>在请求https的资源时，遇到证书不匹配的问题，一般的工具都有不进行https证书验证的选项，比如：</p>
<pre><code>$ wget &apos;https://x.x.x.x/get_ips&apos; --no-check-certificate
$ curl &apos;https://x.x.x.x/get_ips&apos; -k
</code></pre><p>当然，也可以在请求时指定证书，或者对使用的https ca证书进行更新。</p>
<p>reference:<br>[^1] <a href="http://curl.haxx.se/docs/sslcerts.html" target="_blank" rel="external">http://curl.haxx.se/docs/sslcerts.html</a></p>
]]></content>
    
    <summary type="html">
    
      排查在linux环境下，在某些服务器上，使用curl请求https资源发生证书验证失败的问题
    
    </summary>
    
      <category term="php" scheme="http://debughacks.github.io/categories/php/"/>
    
    
      <category term="linux" scheme="http://debughacks.github.io/tags/linux/"/>
    
      <category term="php" scheme="http://debughacks.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Php中的单例模式面面观</title>
    <link href="http://debughacks.github.io/2014/04/26/singleton-pattern-in-php/"/>
    <id>http://debughacks.github.io/2014/04/26/singleton-pattern-in-php/</id>
    <published>2014-04-26T12:47:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在面试时发现好多人都喜欢在简历中添加“熟悉各种设计模式”那一项。但也不乏对于最为简单的单例，也仅限于书本上的一点认知，所以扯一扯php中单例模式的几种使用场景。<br><a id="more"></a></p>
<h1 id="何为单例模式"><a href="#何为单例模式" class="headerlink" title="何为单例模式"></a>何为单例模式</h1><p>单例模式属于创建型的应用模式，可以确保某一个类只有一个实例。这在获取数据库，缓存服务器的连接句柄，以及获取配置信息方面非常方便。</p>
<p>使用单例模式，可以减少在一次web请求中多次连接数据库或者解析配置文件等操作对系统资源的消耗，也可以避免大量的new操作。</p>
<p>其UML结构图如下：</p>
<img src="/images/pattern/singleton-uml.png" title="singleton-uml">
<p>在php中实现单例模式需要注意：</p>
<ul>
<li>需要一个静态变量保存实例</li>
<li>需要提供一个公共的静态方法，用于返回需要获取的实例</li>
<li>需要防止外部程序通过new和clone等操作产生相关实例，从而失去单例模式的意义</li>
</ul>
<h1 id="代码实现解析"><a href="#代码实现解析" class="headerlink" title="代码实现解析"></a>代码实现解析</h1><p>一个单例模式的php实现大致如下:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $_instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        trigger_error(<span class="string">"clone method is not allowed."</span>, E_USER_ERROR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>::$_instance === <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">self</span>::$_instance = <span class="keyword">new</span> <span class="keyword">self</span>();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$_instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>上述代码通过<code>静态成员变量</code>保存创建的实例，通过将构造函数设置为私有的，并使用魔术方法<code>__clone</code>“重载”clone方法以避免通过外部程序获取相关实例。</p>
<p>由于php中的静态变量包括：<code>静态全局变量</code>，<code>静态局部变量</code>，<code>静态成员变量</code>，所以也可以通过<code>静态局部变量</code>来保存创建的实例。但是在子类中获取创建的实例时，会遇到一些问题。示例如下：</p>
<h2 id="使用静态局部变量"><a href="#使用静态局部变量" class="headerlink" title="使用静态局部变量"></a>使用静态局部变量</h2><figure class="highlight php"><figcaption><span>singleton-static.php</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_handle = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_handle = <span class="keyword">new</span> StdClass();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        trigger_error(<span class="string">"clone method is not allowed."</span>, E_USER_ERROR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">static</span> $_instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ($_instance === <span class="keyword">null</span>) &#123;</div><div class="line">            $_instance = <span class="keyword">new</span> <span class="keyword">self</span>();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> $_instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObj</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_handle;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="keyword">extends</span> <span class="title">Singleton</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        var_dump(<span class="keyword">self</span>::getInstance()-&gt;getObj());</div><div class="line">        <span class="comment">//logic no care</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupModel</span> <span class="keyword">extends</span> <span class="title">Singleton</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getGroup</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        var_dump(<span class="keyword">self</span>::getInstance()-&gt;getObj());</div><div class="line">        <span class="comment">//logic no care</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">UserModel::getUser();</div><div class="line">GroupModel::getGroup();</div></pre></td></tr></table></figure>
<pre><code>$ php /.singleton-static.php
object(Singleton)#2 (0) {
}
object(Singleton)#4 (0) {
}
</code></pre><blockquote>
<p>此例没有获取到唯一实例，因为局部静态变量，也就是在函数中定义的静态变量。其信息是存储在zend vm为每个函数分配的一个私有符号表中。</p>
</blockquote>
<p>php中当继承发生时，会进行函数的合并。UserModel中调用的，实际上是合并在UserModel中的getInstance，GroupModel中调用的，也是合并在GroupModel中的getInstance方法。</p>
<p>因为是在两个不同方法的私有符号表中获取数据，所以取到的不是同一个实例。</p>
<blockquote>
<p>可以将self换成parent试试</p>
</blockquote>
<h2 id="使用静态成员变量"><a href="#使用静态成员变量" class="headerlink" title="使用静态成员变量"></a>使用静态成员变量</h2><figure class="highlight php"><figcaption><span>singleton-static-member.php</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_handle = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $_instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_handle = <span class="keyword">new</span> StdClass();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        trigger_error(<span class="string">"clone method is not allowed."</span>, E_USER_ERROR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>::$_instance === <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">self</span>::$_instance = <span class="keyword">new</span> <span class="keyword">self</span>();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$_instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObj</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_handle;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="keyword">extends</span> <span class="title">Singleton</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        var_dump(<span class="keyword">self</span>::getInstance()-&gt;getObj());</div><div class="line">        <span class="comment">//logic no care</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupModel</span> <span class="keyword">extends</span> <span class="title">Singleton</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getGroup</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        var_dump(<span class="keyword">self</span>::getInstance()-&gt;getObj());</div><div class="line">        <span class="comment">//logic no care</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">UserModel::getUser();</div><div class="line">GroupModel::getGroup();</div></pre></td></tr></table></figure>
<pre><code>$ php /.singleton-static-member.php
object(Singleton)#2 (0) {
}
object(Singleton)#2 (0) {
}
</code></pre><blockquote>
<p>此时获取到了唯一实例，因为静态成员变量的信息是存储在类结构的 default_static_members 字段，为所有实例所共用。</p>
</blockquote>
<h1 id="编写一个单例的基类"><a href="#编写一个单例的基类" class="headerlink" title="编写一个单例的基类"></a>编写一个单例的基类</h1><p>有时我们的项目中有个缓存类，还有数据库类，还有个文件操作类。想让这三个类都是单例的话，我们需要实现三个单例，这有点繁琐。于是我们可以创建一个单例的基类，要实现单例的类继承这个基类即可。直接上代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $_instances = <span class="keyword">array</span>();</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        trigger_error(<span class="string">"clone method is not allowed."</span>, E_USER_ERROR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $c = get_called_class();</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="keyword">self</span>::$_instances[$c])) &#123;</div><div class="line">            <span class="keyword">self</span>::$_instances[$c] = <span class="keyword">new</span> $c;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$_instances[$c];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cache</span> <span class="keyword">Extends</span> <span class="title">Singleton</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_handle = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_connect();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_connect</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_handle = <span class="keyword">new</span> StdClass();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHandle</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_handle;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Db</span> <span class="keyword">Extends</span> <span class="title">Singleton</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_handle = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_connect();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_connect</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_handle = <span class="keyword">new</span> StdClass();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHandle</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_handle;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>reference：</p>
<p>[^1] <a href="http://www.php-internals.com/book/?p=chapt05/05-04-class-inherit-abstract" target="_blank" rel="external">http://www.php-internals.com/book/?p=chapt05/05-04-class-inherit-abstract</a></p>
<p>[^2] <a href="http://zh.wikipedia.org/zh/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F" target="_blank" rel="external">http://zh.wikipedia.org/zh/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F</a></p>
<p>[^3] <a href="http://www.phptherightway.com/pages/Design-Patterns.html" target="_blank" rel="external">http://www.phptherightway.com/pages/Design-Patterns.html</a></p>
<p>[^4] <a href="http://rancoud.com/read-phps-opcode/" target="_blank" rel="external">http://rancoud.com/read-phps-opcode/</a></p>
]]></content>
    
    <summary type="html">
    
      php语言中单例设计模式的几种使用场景，静态局部变量，静态成员变量
    
    </summary>
    
      <category term="php" scheme="http://debughacks.github.io/categories/php/"/>
    
    
      <category term="php" scheme="http://debughacks.github.io/tags/php/"/>
    
      <category term="pattren" scheme="http://debughacks.github.io/tags/pattren/"/>
    
  </entry>
  
  <entry>
    <title>如何静态编译Php</title>
    <link href="http://debughacks.github.io/2014/04/09/statically-compile-php/"/>
    <id>http://debughacks.github.io/2014/04/09/statically-compile-php/</id>
    <published>2014-04-09T10:13:00.000Z</published>
    <updated>2016-07-19T09:48:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>有些时候，我们写了一个php脚本，但是对方的服务器上没有php环境。</p>
<p>这时，我们可以通过静态方式编译php，并将相关扩展一起打包进php可执行文件，然后在运行脚本时指定php binary。<br><a id="more"></a><br>安装步骤如下：</p>
<h1 id="准备源文件"><a href="#准备源文件" class="headerlink" title="准备源文件"></a>准备源文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget -c http://www.php.net/get/php-5.5.11.tar.gz/from/this/mirror</div><div class="line">tar zxvf php-5.5.11.tar.gz</div><div class="line">wget http://pecl.php.net/get/redis-2.2.5.tgz</div><div class="line">tar xvf redis-2.2.5.tgz</div><div class="line">mv redis-2.2.5 php-5.5.11/ext/redis</div></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="重新生成configure"><a href="#重新生成configure" class="headerlink" title="重新生成configure"></a>重新生成configure</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd php-5.5.11</div><div class="line">rm -f ./configure</div><div class="line">./buildconf --force</div></pre></td></tr></table></figure>
<h2 id="configure"><a href="#configure" class="headerlink" title="configure"></a>configure</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">./configure LDFLAGS=-static \</div><div class="line">--prefix=/usr/local/php5-static \</div><div class="line">--disable-all \</div><div class="line">--enable-shared=no \</div><div class="line">--enable-static=yes \</div><div class="line">--enable-inline-optimization \</div><div class="line">--enable-hash \</div><div class="line">--enable-mbstring \</div><div class="line">--with-layout=GNU \</div><div class="line">--enable-filter \</div><div class="line">--with-pcre-regex \</div><div class="line">--with-zlib \</div><div class="line">--enable-json \</div><div class="line">--enable-ctype \</div><div class="line">--disable-redis-session \</div><div class="line">--enable-redis</div></pre></td></tr></table></figure>
<h2 id="修改Makefile"><a href="#修改Makefile" class="headerlink" title="修改Makefile"></a>修改Makefile</h2><p>将<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BUILD_CLI = $(LIBTOOL) --mode=link $(CC) -export-dynamic $(CFLAGS_CLEAN) $(EXTRA_CFLAGS) $(EXTRA_LDFLAGS_PROGRAM) $(LDFLAGS) $(PHP_RPATHS) $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_CLI_OBJS) $(EXTRA_LIBS) $(ZEND_EXTRA_LIBS) -o $(SAPI_CLI_PATH)</div><div class="line">BUILD_CGI = $(LIBTOOL) --mode=link $(CC) -export-dynamic $(CFLAGS_CLEAN) $(EXTRA_CFLAGS) $(EXTRA_LDFLAGS_PROGRAM) $(LDFLAGS) $(PHP_RPATHS) $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_CGI_OBJS) $(EXTRA_LIBS) $(ZEND_EXTRA_LIBS) -o $(SAPI_CGI_PATH)</div></pre></td></tr></table></figure></p>
<p>替换成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BUILD_CLI = $(LIBTOOL) --mode=link $(CC) $(CFLAGS_CLEAN) $(EXTRA_CFLAGS) $(EXTRA_LDFLAGS_PROGRAM) $(LDFLAGS) $(PHP_RPATHS) $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_CLI_OBJS) $(EXTRA_LIBS) $(ZEND_EXTRA_LIBS) -all-static -o $(SAPI_CLI_PATH)</div><div class="line">BUILD_CGI = $(LIBTOOL) --mode=link $(CC) $(CFLAGS_CLEAN) $(EXTRA_CFLAGS) $(EXTRA_LDFLAGS_PROGRAM) $(LDFLAGS) $(PHP_RPATHS) $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_CGI_OBJS) $(EXTRA_LIBS) $(ZEND_EXTRA_LIBS) -all-static -o $(SAPI_CGI_PATH)</div></pre></td></tr></table></figure></p>
<p>即：</p>
<p>在<code>BUILD_CLI</code>和<code>BUILD_CGI</code>对应的行中移除<code>-export-dynamic</code>，在<code>-o $(SAPI_CGI_PATH)</code>和<code>-o $(SAPI_CLI_PATH)</code>之前，添加<code>-all-static</code></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">make LDFLAGS=-ldl</div><div class="line">sudo make install</div></pre></td></tr></table></figure>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><blockquote>
<blockquote>
<blockquote>
<p>configure: error: C compiler cannot create executables</p>
</blockquote>
</blockquote>
</blockquote>
<p>需要安装<code>glibc-static</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install glibc-static</div></pre></td></tr></table></figure></p>
<blockquote>
<blockquote>
<blockquote>
<p>undefined reference to `zm_startup_password’</p>
</blockquote>
</blockquote>
</blockquote>
<p>需要修改<code>ext/standard/basic_functions.c</code>，具体内容参见 <a href="https://github.com/thekid/php-src/commit/4c2b86ef006c71523ca2a8a613cc779773a2bcc6" target="_blank" rel="external">https://github.com/thekid/php-src/commit/4c2b86ef006c71523ca2a8a613cc779773a2bcc6</a></p>
<h1 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h1><p>在命令行执行</p>
<pre><code>$ file /usr/local/php5-static/bin/php
/usr/local/php5-static/bin/php: ELF 64-bit LSB executable, AMD x86-64, version 1 (SYSV), for GNU/Linux 2.6.9, statically linked, for GNU/Linux 2.6.9, not stripped

$ /usr/local/php5-static/bin/php -m
[PHP Modules]
Core
ctype
date
ereg
filter
hash
json
mbstring
pcre
redis
Reflection
SPL
standard
zlib

[Zend Modules]
</code></pre><p>因为可执行文件中包含了调试信息，所以体积较大</p>
<pre><code>$ ll -h /usr/local/php5-static/bin/php
-rwxr-xr-x 1 root root 18M 04-09 18:11 /usr/local/php5-static/bin/php
</code></pre><p>可以通过<code>strip</code>命令移除调试信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo strip /usr/local/php5-static/bin/php</div><div class="line">$ ll -h /usr/local/php5-static/bin/php</div><div class="line">-rwxr-xr-x 1 root root 6.1M 04-09 18:11</div><div class="line">/usr/local/php5-static/bin/php</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th style="text-align:center"><code>原始文件大小</code></th>
<th style="text-align:center"><code>去除符号表后大小</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>18M</code></td>
<td style="text-align:center"><code>6.1M</code></td>
</tr>
</tbody>
</table>
<p><strong> reference :</strong></p>
<p>[^1] <a href="http://www.php.net/manual/zh/install.pecl.static.php" target="_blank" rel="external">http://www.php.net/manual/zh/install.pecl.static.php</a></p>
<p>[^2] <a href="http://d.hatena.ne.jp/shimooka/comment/20110216/1297827454" target="_blank" rel="external">http://d.hatena.ne.jp/shimooka/comment/20110216/1297827454</a></p>
<p>[^3] <a href="http://www.gnu.org/software/libtool/manual/html_node/Link-mode.html" target="_blank" rel="external">http://www.gnu.org/software/libtool/manual/html_node/Link-mode.html</a></p>
<p>[^4] <a href="http://markmail.org/message/cpoenglavs4vwv32" target="_blank" rel="external">http://markmail.org/message/cpoenglavs4vwv32</a></p>
<p>[^5] <a href="https://github.com/thekid/php-src/commit/4c2b86ef006c71523ca2a8a613cc779773a2bcc6" target="_blank" rel="external">https://github.com/thekid/php-src/commit/4c2b86ef006c71523ca2a8a613cc779773a2bcc6</a><br>[^6] <a href="http://www.serveridol.com/2014/06/23/configure-error-c-compiler-cannot-create-executables/" target="_blank" rel="external">http://www.serveridol.com/2014/06/23/configure-error-c-compiler-cannot-create-executables/</a></p>
]]></content>
    
    <summary type="html">
    
      php静态编译，如何在linix操作系统上，通过静态编译的方式，编译一个可以随意拷贝的php可执行文件。
    
    </summary>
    
      <category term="php" scheme="http://debughacks.github.io/categories/php/"/>
    
    
      <category term="linux" scheme="http://debughacks.github.io/tags/linux/"/>
    
      <category term="devops" scheme="http://debughacks.github.io/tags/devops/"/>
    
      <category term="php" scheme="http://debughacks.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件系统如何进行文件存取</title>
    <link href="http://debughacks.github.io/2014/03/29/read-wirite-on-linux-file-system/"/>
    <id>http://debughacks.github.io/2014/03/29/read-wirite-on-linux-file-system/</id>
    <published>2014-03-29T05:32:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>乍一看，这个题目好像有点小儿科。</p>
<p>写文件嘛<br>    echo hello &gt; /tmp/foo</p>
<p>读文件嘛<br>    cat /tmp/foo</p>
<p>对于普通文件的存取，的确可以使用上面的方法。但是在linux操作系统上，一<br>切都是文件。除了<code>普通文件</code>，还包括：<code>目录</code>，<code>符号链接</code>，<code>IPC Endpoints</code>（如pipe，unix socket）和<code>设备文件</code>(块设备，字符设备)。</p>
<p>当然，本文的重点不在于介绍相关操作技巧，而是希望可以探寻操作背后的机制。<br><a id="more"></a><br>我们要存取的文件，一般都是保存在普通的磁盘上，通过电磁变换来实现文件的读取和写入。所以我们先从磁盘说起。</p>
<h3 id="磁盘物理结构"><a href="#磁盘物理结构" class="headerlink" title="磁盘物理结构"></a>磁盘物理结构</h3><p><em>磁盘的机械结构如下图</em>：</p>
<img src="/images/os/disk-structure.png" title="disk strucrure %}
<p>如上图，一块磁盘中有好几块<code>盘片</code>（platter），一个盘片上的盘面被划分成若干个同心圆（即<code>磁道</code>（track））。<br>将磁盘上<code>机械臂</code>的<code>磁头</code>径向移动到盘面的相关位置（磁道）后，通过盘片在磁头下方的高速旋转，就可以读取并写入所在<code>柱面</code>（cylinder）上的数据。</p>
<p><em>盘面的示意图如下</em>：</p>
{% img /images/os/disk-structure-2.gif disk strucrure">
<p>磁盘是个块设备，它的最小存储单位是<code>扇区</code>（sector），每个扇区存取512字节。</p>
<p>为了提升文件的读取效率，文件系统会以<code>块</code>（block）为单位进行文件读取。块是linux系统上文件存取的最小单位，一个块一般为连续的8个扇区，即4K。</p>
<p>直接对磁盘等硬件进行操作，是很困难的。不过操作系统的主要任务就是隐藏硬件，呈现良好，清晰，优雅，一致的抽象。linux文件系统对文件的处理进行了良好的抽象。</p>
<h3 id="VFS虚拟文件系统"><a href="#VFS虚拟文件系统" class="headerlink" title="VFS虚拟文件系统"></a>VFS虚拟文件系统</h3><p>linux文件系统的体系结构图如下：</p>
<img src="/images/os/fs-structure.gif" title="linux file system strucrure %}
<p>用户态的程序要进行文件读写时，只要通过系统调用，调用VFS提供的接口就好。</p>
<p>虽然VFS需要调用ext2，ext3，NFS等具体的文件系统实现进行磁盘上文件的操作。但是它屏蔽了下层的各种异构文件系统的特点，为上层提供了统一的接口。</p>
<p>以ext2文件系统为例，其文件系统结构图示意如下：</p>
{% img /images/os/ext2-fs-structure.gif ext2 file system strucrure">
<ul>
<li>一块硬盘会被划分成多个分区</li>
<li>每个分区挂载着相应的文件系统具体实现，如ext2</li>
<li>为了减少需要管理的block的数量，在ext2文件系统产生了块组的概念。每个块组包含多个block，并且有独立的superblock和inode。</li>
</ul>
<p><em>相关名词说明</em></p>
<p><code>Boot Sector</code></p>
<pre><code>即引导扇区。包括：本分区的操作系统类型，数据区大小，根目录区允许的最大目录项
</code></pre><p><code>Super Block</code><br>    超级块。定义了文件系统的静态结构，包括：分区中每个block的大小，分区中block group的数目，以及每个block group中有inode等。每个block group不一定都有超级块，其他block group中的超级块仅仅是block group 0中超级块的一个拷贝，以备当block group 0中的超级块损坏时可以对其进行恢复。Linux启动时，block group 0中的超级块的内容会被读入到内存中。</p>
<p><code>GDT</code><br>    组描述符表。记录了块位图（Block Bitmap）所在块的块号，inode位图（inode Bitmap）所在块的块号，inode表（inode Table）所在块的起始块号，本组空闲块的个数等组内信息。文件系统根据这些信息来查找数据块位图，索引结点位图，索引结点表的位置</p>
<p><code>Block Bitmap</code><br>    Ext2文件系统的数据块位图。其中每一位对应了一个数据块，某一位上位0时表示该位所对应的数据块空闲，反之表示该位所对应的数据块已经被分配。Data Block Bitmap占了1个块的空间，因此，一个组中的数据块的个数就已经决定了。如果每个块为b-byte，那么该Group Block就有8<em>b个块，可以存放（8</em>b）*b字节的数据</p>
<p><code>Inode Bitamp</code><br>    inode节点位图。其工作方式跟Block Bitmap相同，只不过代表的是Inode的使用情况，每个位代表一个inode，如果是1则表示被使用，为1表示空闲</p>
<p><code>Inode Table</code><br>    存储inode number对应文件的元信息，包括：文件类型，权限位，链接数（有多少文件名指向这个inode），文件数据块的位置。</p>
<p><code>Data Blocks</code><br>    数据块存放文件的实际内容。需要特别指出的是，在Linux下目录也是一种文件。目录中的文件及子目录都以目录项（directory entry）的形式存放在该目录的数据块中。目录项中主要记录了文件的inode号，文件名以及文件类型等内容</p>
<p>Linux开机启动时，会首先载入MBR（主引导记录），MBR会告诉电脑从该设备的某一个分区来装载boot loader（boot loader储存有操作系统的相关信息，比如操作系统名称，操作系统内核 (kernel)所在位置等），通过boot loader会加载kernel，kernel通过initrd加载硬件驱动，在主分区表中搜索活动分区，加载引导分区，挂载文件系统，进行操作系统的启动。</p>
<h3 id="文件查找示例"><a href="#文件查找示例" class="headerlink" title="文件查找示例"></a>文件查找示例</h3><p>以查找文件/home/alex/foobar为例进行说明。</p>
<p>假设根目录（ROOT directory），在磁盘空间上的inode number是2，其对应数据块的结构如下<br>        +—-+—–+—————————————–+</p>
<pre><code>#2  |. 2 |.. 2 | home 5 | usr 9 | tmp 11 | etc 23 | ...  |
    +----+-----+-----------------------------------------+
</code></pre><p>通过跟目录下home目录的名字home，可以获取其inode number是5，其对应数据块的结构如下<br>        +—-+—–+—————————————————+</p>
<pre><code>#5  |. 5 |.. 2 | alex 31 | leslie 36 | pat 39 | abcd0001 21 | ...  |
    +----+-----+---------------------------------------------------+
</code></pre><p>通过home目录下alex目录的名字alex，可以获取其inode number是31，其数据块的结构如下<br>        +—-+—–+—————————————————+</p>
<pre><code>#31 |. 31|.. 5 | foobar 12 | temp 15 | literature 7 | demo 6 | ... |
    +----+-----+---------------------------------------------------+
</code></pre><p>继续查看inode number是12（foobar文件）的inode所对应的数据块结构，就可以获取路径为/home/alex/foobar的文件的数据内容。</p>
<pre><code>    *-----------*
#12 | file data |
    *-----------*
</code></pre><p>从上面也可以看出</p>
<ul>
<li>目录也是一种文件，其中包含了该目录下子目录的名字和文件名，以及其对应的inode number。</li>
<li>文件名和inode number，是多对一的关系。多个文件名可以对应同一个inode number（硬链接）</li>
</ul>
<p>为了访问路径为/home/alex/foobar的文件的数据，需要有合适的权限在根目录的inode，home目录的inode，alex目录的inode，foobar数据文件的inode。</p>
<ul>
<li>目录的inode权限，决定了是否有权限修改，移动，删除该目录，以及目录下的文件。</li>
<li>文件的inode权限，决定了是否有权限读取或者修改该文件的内容。</li>
</ul>
<h3 id="文件存取流程"><a href="#文件存取流程" class="headerlink" title="文件存取流程"></a>文件存取流程</h3><p>在进行文件存取时，实际上就是解析文件路径，加载相应分区上的inode table，获取对应的inode number，对inode number对于的数据块进行存取。</p>
<p>对于访问过的文件路径，会被缓存在dentry目录项中。</p>
<p>为了提升磁盘设备的IO性能，操作系统会使用内存作为磁盘设备的cache，并使用memory map方式在访问时建立与文件系统的缓存映射。文件系统的缓存，是以Page Cache为单位，一个Page Cache包含多个Buffer Cache。</p>
<ul>
<li><p>向文件中写入数据时，数据会先缓存在Page Cache中，内存中的这部分数据被标注为Dirty Page，linux系统上的pdflush守护进程会跟进系统设置将将这部分Dirty Page刷到磁盘上，也可以通过fsync系统调用在数据写入后强制刷到磁盘上。将写入的数据刷入磁盘时，是以Buffer Cache为单位，每次回写若干个Buffer Cache。</p>
</li>
<li><p>读取文件内容时，系统会一次性连续读取包括所请求页面在内的多个页面（如预读页面个数为n）。如果请求的页面在page cache中命中的话，会从缓存中返回页面内容，增加读取的页面数量，异步读取2n个页面;如果请求的页面没有在page cache中命中，也会增加读取页面数量，同步读取2n个页面。</p>
</li>
</ul>
<p>预读机制示意图</p>
<img src="/images/os/fs-pre-read.gif">]]></content>
    
    <summary type="html">
    
      深入linux文件系统中文件存取的机制
    
    </summary>
    
      <category term="linux" scheme="http://debughacks.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://debughacks.github.io/tags/linux/"/>
    
      <category term="fs" scheme="http://debughacks.github.io/tags/fs/"/>
    
  </entry>
  
  <entry>
    <title>在Mac系统上使用emacs24打造web开发环境</title>
    <link href="http://debughacks.github.io/2014/02/28/emacs24-on-mac-and-linux/"/>
    <id>http://debughacks.github.io/2014/02/28/emacs24-on-mac-and-linux/</id>
    <published>2014-02-28T06:16:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>Emacs 是一个强大的、可扩展的文本编辑器。不同于vim，它是一个流行的无模式文本编辑器。尤其是当emacs24内置包管理elpa后，使用通过<code>prelude</code>，<code>goblin</code>等，轻松使用emacs打造一个顺手的diy的web开发环境。<br><a id="more"></a></p>
<h3 id="安装Emacs24-3"><a href="#安装Emacs24-3" class="headerlink" title="安装Emacs24.3"></a>安装Emacs24.3</h3><h5 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h5><p><code>Homebrew</code>是mac系统上的包管理软件，是用<code>Ruby</code>语言编写的。我们可以使用它在终端安装系统没有自带的<code>Unix</code>相关工具。</p>
<p><em>安装步骤</em></p>
<pre><code>ruby -e &quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&quot;
cd /usr/local/Library &amp;&amp; git stash &amp;&amp; git clean -d -f
</code></pre><h5 id="通过编译源代码安装Emacs"><a href="#通过编译源代码安装Emacs" class="headerlink" title="通过编译源代码安装Emacs"></a>通过编译源代码安装Emacs</h5><p>在安装<code>Homebrew</code>时，会同时安装<code>gcc</code>和<code>autoconf</code>，所以我们可以直接下载源代码进行编译安装。通过如下地址可以下载到最新的emacs安装文件。<br>    <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">http://www.gnu.org/software/emacs/</a></p>
<p>如果没有<code>wget</code>等工具，可以通过<code>brew</code>进行安装，如：<br>    brew install wget</p>
<p><em>安装步骤</em><br>    cd /somepath/<br>    wget <a href="http://mirror.bjtu.edu.cn/gnu/emacs/emacs-24.3.tar.gz" target="_blank" rel="external">http://mirror.bjtu.edu.cn/gnu/emacs/emacs-24.3.tar.gz</a><br>    tar zxvf emacs-24.3.tar.gz<br>    cd emacs-24.3<br>    ./autogen.sh<br>    ./configure –with-ns<br>    make install<br>    sudo ln -s /somepath/emacs-24.3/nextstep/Emacs.app /Applications/Emacs24.3.app</p>
<h5 id="通过Homebrew安装Emacs"><a href="#通过Homebrew安装Emacs" class="headerlink" title="通过Homebrew安装Emacs"></a>通过Homebrew安装Emacs</h5><p><code>Homebrew</code>本身也是下载源代码进行编译安装，但是它可以帮我们简化这一过程。这就是技术的魅力 – make live easier。</p>
<p><em>安装步骤</em><br>    brew install emacs –cocoa<br>    brew linkapps</p>
<p>顺利的话，最新版的emacs就安装在mac了。如果中途遇到问题，按照提示解决下就好。</p>
<p>有可能下载地址被墙，这时通过通过修改源代码的下载地址解决，方法如下：</p>
<pre><code>1. brew edit softname，如 brew edit emacs
2. 修改其中的url，保存退出
</code></pre><p>如：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'formula'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emacs</span> &lt; Formula</span></div><div class="line">    homepage <span class="string">'http://www.gnu.org/software/emacs/'</span></div><div class="line">    <span class="comment">#url 'http://ftpmirror.gnu.org/emacs/emacs-24.3.tar.gz'</span></div><div class="line">    url <span class="string">'http://mirror.bjtu.edu.cn/gnu/emacs/emacs-24.3.tar.gz'</span></div></pre></td></tr></table></figure>
<p>安装完成后可以在<code>应用程序</code>，或者<code>Launchpad</code>中启动emacs，它默认长这样：</p>
<img src="/images/emacs/startup.png" title="emacs start up %}
<h3 id=" alt="配置Emacs">
<p>完成<code>jedi</code>，python自动完成的配置<br>    cd ~/.emacs.d/elpa/jedi*<br>    sudo pip install -r requirements.txt</p>
<p>或者指定pypi源<br>    sudo pip install -i <a href="http://pypi.douban.com/simple" target="_blank" rel="external">http://pypi.douban.com/simple</a> -r requirements.txt</p>
<h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><ul>
<li>Goblin-emacs简介</li>
</ul>
<p>goblin-emacs在prelude的基础上，对<code>PHP</code>，<code>Python</code>等<code>mode</code>进行了增强，并尽量保持原生的快捷键。相关功能介绍：</p>
<pre><code>flymake语法检测
php-mode
php基于字典的自动完成
python基于jedi的自动完成
org-mode
doxymacs 生成文档注释
slime－mode
版本控制工具的集成
</code></pre><p>当使用emacs编辑<code>ruby</code>或者<code>lua</code>源码时，会自动下载并安装相关<code>mode</code>，相关映射在<code>core/goblin-packages.el</code>中进行配置。</p>
<ul>
<li>交换<code>Control</code>键和<code>Caps-Lock</code>键</li>
</ul>
<p>因为emacs上的很多快捷键默认都是以<code>Control</code>开始。操作久了小拇指会比较难受，将<code>Control</code>和<code>Caps-Lock</code>进行交换，可以解放要经常蜷缩的小拇指。<br><img src="/images/emacs/swap-control-capslock.png"></p>]]></content>
    
    <summary type="html">
    
      如何在mac系统上使用emacs 24 配置php，python的web开发环境
    
    </summary>
    
      <category term="emacs" scheme="http://debughacks.github.io/categories/emacs/"/>
    
    
      <category term="linux" scheme="http://debughacks.github.io/tags/linux/"/>
    
      <category term="mac" scheme="http://debughacks.github.io/tags/mac/"/>
    
      <category term="emacs" scheme="http://debughacks.github.io/tags/emacs/"/>
    
  </entry>
  
  <entry>
    <title>使用Tcpcopy导入线上流量进行功能和压力测试</title>
    <link href="http://debughacks.github.io/2014/01/08/use-tcpcopy-test-online/"/>
    <id>http://debughacks.github.io/2014/01/08/use-tcpcopy-test-online/</id>
    <published>2014-01-08T09:29:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>假设我们要上线一个两年内不会宕机的先进架构。在上线前，免不了单元测试，功能测试，还有使用ab，webbench等等进行压力测试。</p>
<p>但这些步骤非生产环境下正式用户的行为。或许你会想到灰度上线，但毕竟可能会影响到部分用户，这怎么对得起我们两年内不宕机的承诺呢？</p>
<p>好在网易的 <a href="http://weibo.com/tcpcopy" target="_blank" rel="external">王斌</a> 开发了<a href="https://github.com/wangbin579/tcpcopy" target="_blank" rel="external">tcpcopy</a>， 可以导入线上流量进行功能和压力测试。<br><a id="more"></a></p>
<h3 id="tcpcopy介绍"><a href="#tcpcopy介绍" class="headerlink" title="tcpcopy介绍"></a>tcpcopy介绍</h3><p><code>tcpcopy</code>是一种请求复制工具。可以将线上流量拷贝到测试机器，实时的模拟线上环境。在不影响线上用户的情况下，使用线上流量进行测试，以尽早发现bug。也可以通过放大流量，进行压力测试，评估系统承载能力。</p>
<p><code>tcpcopy</code>可以从线上服务器的<code>IP</code>层抓取在线请求的数据包，修改相关属性，利用<code>raw socket output</code>技术（<code>packet injection</code> 技术之一）将其发送给测试服务器进行测试。</p>
<p>发送到测试服务器的数据包会在<code>TCP/IP</code>协议栈被识别，其中带有<code>payload</code>（tcp data）的数据包最终进入到测试服务器的上层应用（如nginx），上层应用在处理完请求之后，将响应传递给测试服务器的<code>TCP/IP</code>协议栈。</p>
<p>在测试服务器上启用<code>ip_queue</code>模块，并使用<code>iptables</code>在<code>IP</code>层将响应结果数据包发往QUEUE（<code>ip_queue</code>）。</p>
<p>测试服务器上运行在<code>用户空间</code>的拦截程序（intercept进程），通过打开<code>netlink</code>的socket接受内核通过<code>ip_queue</code>所传递来的网络数据包（即上层应用的响应内容）进行裁定，将结果返回内核，进行出队列的操作。intercept进程默认会丢弃上层应用的响应内容，返回ip header，以释放tcp连接。</p>
<p>intercept进程也可以通过<code>-x</code>（passlist）参数，不drop指定ip lists发出请求的响应内容。默认drop是为了：<br>    1 减少出口带宽占用，节约成本<br>    2 不影响客户端（线上服务）的<code>TCP/IP</code>协议栈<br>    3 不会在互联网上产生ghost数据包</p>
<h3 id="tcpcopy工作流程"><a href="#tcpcopy工作流程" class="headerlink" title="tcpcopy工作流程"></a>tcpcopy工作流程</h3><img src="/images/tcpcopy_flow.png" title="tcpcopy flow">
<p>如上图，tcpcopy拷贝一次流量访问的步骤如下：</p>
<pre><code>①　一个访问到达线上前端机；
②　socket数据包在ip层被拷贝了一份传给tcpcopy进程；
③　tcpcopy修改包的目的及源地址，发给目标测试机；
④　拷贝的包到达目标测试机；
⑤　目标测试机的nginx处理访问，并返回结果；
⑥　返回结果在ip层被截获、丢弃，由intercpet进程拷贝返回结果的ip header并返回；
⑦　ip header被发送给线上前端机的tcpcopy进程。
</code></pre><h3 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h3><p>tcpcopy有两种工作模式：</p>
<pre><code>1 实时拷贝数据包
2 通过使用tcpdump等抓包生成的文件进行离线（offline）请求重放
</code></pre><p>如果采用实时拷贝线上流程进行导入的方式，需要分别在线上服务器和测试服务器安装<code>tcpcopy</code>，对于离线模式，只需要在测试服务器上安装<code>tcpcopy</code>，编译时指定 <code>--enable-offline</code>。</p>
<h5 id="安装步骤如下："><a href="#安装步骤如下：" class="headerlink" title="安装步骤如下："></a>安装步骤如下：</h5><pre><code>wget https://github.com/wangbin579/tcpcopy/archive/0.9.0.tar.gz -O tcpcopy-0.9.0.tar.gz --no-check-certificate
tar zxvf tcpcopy-0.9.0.tar.gz
cd tcpcopy-0.9.0
./autogen.sh
./configure --prefix=/usr/local/tcpcopy
make
sudo make install
</code></pre><h5 id="目标测试机配置"><a href="#目标测试机配置" class="headerlink" title="目标测试机配置"></a>目标测试机配置</h5><p>线上服务器拷贝的数据包发送至测试服务器进行处理之后，测试服务器需要通过<code>iptables</code>将响应结果发送至QUEUE（<code>ip_queue</code>），这样测试服务器上运行的<code>intercept</code>拦截进程才能通过打开的<code>netlink</code>socket获取传递过来的数据包并进行裁定。所以测试服务器上需要开启<code>iptables</code>防火墙，并启用内核模块<code>ip_queue</code></p>
<pre><code>modprobe ip_queue
/etc/init.d/iptables start
</code></pre><p>因为线上服务器需要和目标测试服务器通信，传递请求数据包和控制信息（封装的ip packet header），所以需要在测试服务器上添加相关<code>iptables</code>防火墙规则。编辑<code>/etc/sysconfig/iptables</code>，添加：</p>
<pre><code>-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 36524 -j ACCEPT
</code></pre><p>然后重启<code>iptables</code></p>
<pre><code>/etc/init.d/iptables restart
</code></pre><p>接着执行：<br>    iptables -I OUTPUT -p tcp –sport 80 -j QUEUE</p>
<p>将响应结果发送至QUEUE（<code>ip_queue</code>），从而实现运行在用户态的进程对相关数据包进行裁定。</p>
<h3 id="相关使用"><a href="#相关使用" class="headerlink" title="相关使用"></a>相关使用</h3><p>本文以线上和测试机的web服务都使用80端口，传递控制信息使用默认的36524端口为例。如果使用别的端口，记得修改相关<code>iptables</code>防火墙规则。</p>
<h5 id="离线-offline"><a href="#离线-offline" class="headerlink" title="离线 offline"></a>离线 offline</h5><p>1） 在线上服务器抓包</p>
<pre><code>tcpdump -i eth0 tcp and port 80 -s 0 -w online.pcap
</code></pre><p>2） 将抓包生成的文件拷贝到测试服务器</p>
<p>3） 在测试服务器上进行执行如下命令进行重放</p>
<pre><code>cd /usr/local/tcpcopy/bin
sudo ./intercept
sudo ./tcpcopy -i /path/online.pcap -x 80-10.16.12.11:80

tcpcopy -i &lt;抓包文件地址&gt; -x &lt;port&gt;-&lt;本地ip&gt;:&lt;port&gt;
</code></pre><h5 id="在线实时复制-online"><a href="#在线实时复制-online" class="headerlink" title="在线实时复制 online"></a>在线实时复制 online</h5><p>1） 在测试服务器上启动<code>intercept</code>拦截进程</p>
<pre><code>cd /usr/local/tcpcopy/bin
sudo ./intercept
</code></pre><p>2） 在线上服务器复制流量到测试服务器</p>
<pre><code>cd /usr/local/tcpcopy/bin
sudo ./tcpcopy -x 80-10.16.12.11:80 -c 10.16.12.12

tcpcopy -x 服务器应用端口号-测试服务器ip地址:测试服务器应用端口 -c 本地服务器ip
</code></pre><p>reference：</p>
<p>[^1] <a href="https://github.com/wangbin579/tcpcopy" target="_blank" rel="external">https://github.com/wangbin579/tcpcopy</a></p>
<p>[^2] <a href="http://www.searchtb.com/2012/05/using-tcpcopy-to-simulate-traffic.html" target="_blank" rel="external">http://www.searchtb.com/2012/05/using-tcpcopy-to-simulate-traffic.html</a></p>
<p>[^3] <a href="http://hi.baidu.com/yacker/item/e6bd5b287fe5a3f150fd8731" target="_blank" rel="external">http://hi.baidu.com/yacker/item/e6bd5b287fe5a3f150fd8731</a></p>
<p>[^4] <a href="http://blog.yam.com/hn12303158/article/35207136" target="_blank" rel="external">http://blog.yam.com/hn12303158/article/35207136</a></p>
]]></content>
    
    <summary type="html">
    
      介绍tcpcopy的相关组件，工作流程，以及安装与配置。如何使tcpcopy的online和离线方式进行测试
    
    </summary>
    
      <category term="devops" scheme="http://debughacks.github.io/categories/devops/"/>
    
    
      <category term="devops" scheme="http://debughacks.github.io/tags/devops/"/>
    
      <category term="tcpcopy" scheme="http://debughacks.github.io/tags/tcpcopy/"/>
    
  </entry>
  
  <entry>
    <title>在生产环境部署Sentry进行错误收集和提醒</title>
    <link href="http://debughacks.github.io/2013/12/18/deploy-sentry-in-product/"/>
    <id>http://debughacks.github.io/2013/12/18/deploy-sentry-in-product/</id>
    <published>2013-12-18T03:10:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sentry正如其名，是一个实时的日志聚合平台，可以通过捕获程序事件（<code>Error</code>，<code>Exception</code>），或者主动上报的方式将错误信息等进行收集汇总和提醒，以帮助我们及时发现项目中的问题。<br><a id="more"></a><br>Sentry Server端是使用python语言开发的，目前有如下平台的客户端sdk：</p>
<p><code>Python</code>，<code>PHP</code>，<code>Ruby</code>，<code>Javascript</code>，<code>Java</code>，<code>Nodejs</code>，<code>IOS</code></p>
<p>项目地址：<a href="https://github.com/getsentry/sentry" target="_blank" rel="external">https://github.com/getsentry/sentry</a></p>
<p>本文以收集<code>PHP</code>错误为例。</p>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>Sentry的文档清晰且完善，包括<code>安装</code>，<code>配置</code>，<code>调优</code>以及<code>客户端调用</code>，正式使用之前，建议看看，以加深理解。地址：<a href="http://sentry.readthedocs.org/en/latest/" target="_blank" rel="external">http://sentry.readthedocs.org/en/latest/</a></p>
<h4 id="python环境安装"><a href="#python环境安装" class="headerlink" title="python环境安装"></a>python环境安装</h4><p>Sentry需要python2.5以上，本文以<code>python2.7.3</code>为例，使用<code>virtualenv</code>进行环境隔离，使用<code>pip</code>安装需要的包<br><figure class="highlight bash"><figcaption><span>python2.7.3-install.sh</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~</div><div class="line">yum install -y bzip2-devel.x86_64</div><div class="line">yum install -y sqlite-devel.x86_64</div><div class="line">yum install -y readline-devel.x86_64</div><div class="line">wget http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2</div><div class="line">tar jxvf Python-2.7.3.tar.bz2</div><div class="line"><span class="built_in">cd</span> Python-2.7.3</div><div class="line">./configure --prefix=/usr/<span class="built_in">local</span>/python2.7.3</div><div class="line">make</div><div class="line">sudo make install</div><div class="line"></div><div class="line">wget https://pypi.python.org/packages/<span class="built_in">source</span>/d/distribute/distribute-0.6.49.tar.gz --no-check-certificate</div><div class="line">tar zxvf distribute-0.6.49.tar.gz</div><div class="line"><span class="built_in">cd</span> distribute-0.6.49</div><div class="line">sudo /usr/<span class="built_in">local</span>/python2.7.3/bin/python setup.py install</div><div class="line">sudo /usr/<span class="built_in">local</span>/python2.7.3/bin/easy_install virtualenv</div><div class="line">sudo /usr/<span class="built_in">local</span>/python2.7.3/bin/easy_install -i http://e.pypi.python.org/simple virtualenvwrapper</div></pre></td></tr></table></figure><br>至此，就完成了python2.7.3和pip，以及virtualenv的安装，使用如下命令进行测试</p>
<pre><code>/usr/local/python2.7.3/bin/python
</code></pre><h4 id="安装Sentry-server"><a href="#安装Sentry-server" class="headerlink" title="安装Sentry server"></a>安装Sentry server</h4><p>初始化安装目录</p>
<pre><code>mkdir -p /data/server/python-envs
</code></pre><p>添加相关环境变量</p>
<pre><code>vim ~/.bashrc
</code></pre><p>添加：</p>
<pre><code>export WORKON_HOME=/data/server/python-envs
export VIRTUALENVWRAPPER_PYTHON=/usr/local/python2.7.3/bin/python
export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/python2.7.3/bin/virtualenv
source /usr/local/python2.7.3/bin/virtualenvwrapper.sh
</code></pre><p>使环境变量生效</p>
<pre><code>source ~/.bashrc
</code></pre><p>安装Sentry server</p>
<pre><code>mkvirtualenv sentry
pip install sentry
pip install sentry[mysql]
pip install sentry[mysql] --upgrade
</code></pre><p>修改<code>~/.bashrc</code>，添加如下代码，以便登录后自动切换到相关python环境</p>
<pre><code>source /data/server/python-envs/sentry/bin/activate
</code></pre><h3 id="快速配置"><a href="#快速配置" class="headerlink" title="快速配置"></a>快速配置</h3><p>或许你还没有做好决定，只是想尽快体验下Sentry，在完成上面的安装之后，通过下面三个步骤即可满足你的愿望：</p>
<p>1 初始化配置</p>
<pre><code>sentry init ~/sentry.conf.py
</code></pre><p>2 修改配置</p>
<p>修改初始配置中的如下两项就行</p>
<p><code>SENTRY_WEB_HOST</code>，<code>SENTRY_URL_PREFIX</code>，如：</p>
<pre><code>SENTRY_URL_PREFIX = &apos;http://10.16.15.1:9000&apos;
SENTRY_WEB_HOST = &apos;10.16.15.1&apos;
</code></pre><p>3 创建超级管理员帐号，启动server</p>
<pre><code>sentry --config=~/sentry.conf.py upgrade
sentry --config=~/sentry.conf.py createsuperuser
sentry --config=~/sentry.conf.py start
</code></pre><p>然后就可以通过url <a href="http://server_host:port" target="_blank" rel="external">http://server_host:port</a> ，使用创建的帐号登录系统后台，进行项目，帐号等管理，和已收集日志的查看等等</p>
<h3 id="配置在生产环境中使用"><a href="#配置在生产环境中使用" class="headerlink" title="配置在生产环境中使用"></a>配置在生产环境中使用</h3><h4 id="Sentry-server"><a href="#Sentry-server" class="headerlink" title="Sentry server"></a>Sentry server</h4><p><em>我们在生产环境下的使用状况：</em></p>
<ul>
<li><p>使用<code>mysql</code>作为后端数据存储</p>
</li>
<li><p>使用<code>celery</code>任务队列（<code>broker</code>使用<code>redis</code>），处理数据入库，发送邮件提醒等工作</p>
</li>
<li><p>同时，使用<code>redis</code>作为<code>Update Buffers</code>，用于将频繁出现的相同事件合并，这在高并发时会相当有用</p>
</li>
<li><p>使用<code>memcache</code>作为前端<code>Cache</code>，管理后台通过轮询的访问获取是否有新的事件提醒，使用<code>memcache</code>，可以减轻直接查询数据库的压力</p>
</li>
<li><p>使用<code>Udp</code>协议发送并接收相关事件</p>
</li>
<li><p>使用<code>Nginx</code>反向代理前端http请求，并使用<code>HttpLimitReqModule</code>限制请求的发送速率</p>
</li>
<li><p>使用<code>supervisor</code>管理<code>celery</code>和<code>sentry</code>server</p>
</li>
</ul>
<p><em>相关安装步骤：</em></p>
<pre><code>pip install redis hiredis nydus
pip install redis hiredis nydus --upgrade
pip install python-memcached
pip install gevent
pip install eventlet
pip install supervisor
</code></pre><p><em>初始化配置</em></p>
<pre><code>mkdir -p /data/server/sentry/etc
sentry init /data/server/sentry/etc/sentry.conf.py
</code></pre><p><em>创建超级管理员帐号</em></p>
<pre><code>sentry --config=/data/server/sentry/etc/sentry.conf.py upgrade
sentry --config=/data/server/sentry/etc/sentry.conf.py createsuperuser
</code></pre><p><em>初始化supervisor配置</em></p>
<pre><code>echo_supervisord_conf &gt; /data/server/sentry/etc/supervisord.conf
</code></pre><p><em>配置Sentry</em></p>
<p>示例配置请参见 <a href="https://gist.github.com/jqlblue/8018185" target="_blank" rel="external">https://gist.github.com/jqlblue/8018185</a></p>
<p>修改<code>/data/server/sentry/etc/supervisord.conf</code>，添加：</p>
<pre><code>[program:web]
command=/data/server/python-envs/sentry/bin/sentry --config=/data/server/sentry/etc/sentry.conf.py start
process_name=%(program_name)s_%(process_num)02d
numprocs=3
numprocs_start=0
startsecs=5
startretries=3
stopsignal=QUIT
stopwaitsecs=10
stopasgroup=true
killasgroup=true
environment=SENTRY_CONF=&quot;/data/server/sentry/etc/sentry.conf.py&quot;
directory=/data/server/python-envs/sentry/

[program:sentry_udp]
command=/data/server/python-envs/sentry/bin/sentry --config=/data/server/sentry/etc/sentry.conf.py start udp
process_name=sentry_udp_server
numprocs=1
numprocs_start=0
startsecs=5
startretries=3
stopsignal=QUIT
stopwaitsecs=10
stopasgroup=true
killasgroup=true
environment=SENTRY_CONF=&quot;/data/server/sentry/etc/sentry.conf.py&quot;
directory=/data/server/python-envs/sentry/

[program:celeryd]
command=/data/server/python-envs/sentry/bin/sentry celery worker -c 6 -P processes -l WARNING -n worker-%(process_num)02d.worker
process_name=%(program_name)s_%(process_num)02d
numprocs=1
numprocs_start=0
startsecs=1
startretries=3
stopsignal=TERM
stopwaitsecs=10
stopasgroup=false
killasgroup=true
environment=SENTRY_CONF=&quot;/data/server/sentry/etc/sentry.conf.py&quot;
directory=/data/server/python-envs/sentry/
</code></pre><p><em>管理Sentry server</em></p>
<ul>
<li>启动superviord</li>
</ul>
<p>执行如下命令，同时，<code>celery</code>，<code>sentry web</code>，<code>sentry udp server</code>也将随之启动</p>
<pre><code>supervisord -c /data/server/sentry/etc/supervisord.conf
</code></pre><ul>
<li>停止sentry相关server</li>
</ul>
<p>执行如下命令</p>
<pre><code>supervisorctl -c /data/server/sentry/etc/supervisord.conf stop all
</code></pre><ul>
<li>停止superviord</li>
</ul>
<p>执行如下命令，同时，已启动的<code>centry</code>相关server也将停止</p>
<pre><code>supervisorctl -c /data/server/sentry/etc/supervisord.conf stop all
</code></pre><p><code>supervisor</code>更多使用方法请参见 <a href="http://supervisord.org/" target="_blank" rel="external">http://supervisord.org/</a></p>
<p><code>nginx</code>配置请参见 <a href="https://gist.github.com/jqlblue/8019629" target="_blank" rel="external">https://gist.github.com/jqlblue/8019629</a></p>
<h4 id="Sentry-client"><a href="#Sentry-client" class="headerlink" title="Sentry client"></a>Sentry client</h4><p>可以通过在程序中<code>registerExceptionHandler</code>和<code>registerErrorHandler</code>将相关信息即时发送至server端。</p>
<p>相关sdk项目地址 <a href="https://github.com/getsentry/raven-php" target="_blank" rel="external">https://github.com/getsentry/raven-php</a></p>
<p>实例化<code>Raven_Client</code>时使用的<code>DSN</code>中的<code>public:secret</code>可以在使用管理员登录后台后，在<code>项目</code>-<code>设置</code>下面查看到。示例地址：<a href="http://sentry_host/team_name/project_name/docs/php/" target="_blank" rel="external">http://sentry_host/team_name/project_name/docs/php/</a></p>
<p>我们采用通过增量读取php error log，使用crontab将错误信息上报。</p>
<p>基于sentry php sdk修改之后的代码地址：<a href="https://gist.github.com/jqlblue/8019312" target="_blank" rel="external">https://gist.github.com/jqlblue/8019312</a></p>
<p>安装依赖</p>
<pre><code>yum install -y logcheck.noarch
</code></pre><p><code>logcheck</code>中的<code>logtail2</code>用于增量读取日志，<code>flock</code>用于防止定时任务堆积。</p>
<blockquote>
<p>另外，需要安装php的sockets扩展</p>
</blockquote>
<p>添加定时任务</p>
<pre><code>* * * * * /usr/bin/flock -xn /tmp/sentry_client.lock /opt/php-5.5.4/bin/php /path/client.php --project=project_name 2&gt;&amp;1 &gt; /dev/null
</code></pre>]]></content>
    
    <summary type="html">
    
      如何在线上生产环境部署sentry哨兵，对运行时错误进行收集，并通过邮件提醒等方式，及时帮助我们发现线上问题。改善服务质量
    
    </summary>
    
      <category term="devops" scheme="http://debughacks.github.io/categories/devops/"/>
    
    
      <category term="devops" scheme="http://debughacks.github.io/tags/devops/"/>
    
      <category term="sentry" scheme="http://debughacks.github.io/tags/sentry/"/>
    
      <category term="monitor" scheme="http://debughacks.github.io/tags/monitor/"/>
    
  </entry>
  
  <entry>
    <title>初探Android应用性能分析</title>
    <link href="http://debughacks.github.io/2013/11/22/android-app-profile-tools/"/>
    <id>http://debughacks.github.io/2013/11/22/android-app-profile-tools/</id>
    <published>2013-11-22T10:03:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果一个android应用打开时比较慢，或者使用起来比较卡。这个可能是客户端代码有待优化，也可能是服务端性能比较挫。对一个客户端开发者而言，在客户端代码中增加相关debug日志，即可比较准确地定位问题。但这活要落到一个服务端开发人员手里，要怎么办？</p>
<p>本文将在没有apk源码的情况下，以服务端开发人员的视角进行客户端app性能的分析。<br><a id="more"></a><br>在分析之前，我们先补充点android基础知识。</p>
<h3 id="android基础知识"><a href="#android基础知识" class="headerlink" title="android基础知识"></a>android基础知识</h3><p>我们所说的android应用，一般都是通过将一个以apk结尾的文件安装在手机等移动设备上才能运行起来的。所以我们先从apk说起。</p>
<h5 id="什么是apk"><a href="#什么是apk" class="headerlink" title="什么是apk"></a>什么是apk</h5><p>我们先从网上下载一个apk<br>    $ wget <a href="http://shouji.360tpcdn.com/131106/0124832c4cf8c35a762cfece3bac52b1/com.sina.weibo_650.apk" target="_blank" rel="external">http://shouji.360tpcdn.com/131106/0124832c4cf8c35a762cfece3bac52b1/com.sina.weibo_650.apk</a></p>
<p>然后查看这个文件的类型<br>    $ file com.sina.weibo_650.apk<br>    com.sina.weibo_650.apk: Zip archive data, at least v2.0 to extract</p>
<p>会发现<code>com.sina.weibo_650.apk</code>是一个zip压缩文件。解压缩后的文件，主要包括<em>一些资源文件</em>，<em>一些配置文件</em>，<em>一些类库</em>，还有<em>一个class.dex</em>。目录结构如下<br>    AndroidManifest.xml<br>    assets<br>    classes.dex<br>    lib<br>    META-INF<br>    org<br>    res<br>    resources.arsc</p>
<p>粗略一看，发现 <code>class.dex</code> 这个文件有5.9M，这应该就是主角。继续执行如下命令<br>    $ file classes.dex<br>    classes.dex: Dalvik dex file version 035</p>
<p>因为没有开发过android应用，不明白用java开发的app和这个Dalvik dex file之间有什么关系？所以我们先跳出apk的视角。</p>
<h5 id="android平台架构"><a href="#android平台架构" class="headerlink" title="android平台架构"></a>android平台架构</h5><img src="/images/mobile/android_architecture.png" title="android architecture images">
<p>如上图，android基于linux操作系统，使用linux内核与设备的硬件进行交互。在内核之上，又抽象出了一层，包括Dalvik虚拟机等。</p>
<p>因为<code>dex</code>是<code>Dalvik VM</code> Executes的全称，即android <code>Dalvik</code>虚拟机执行程序。</p>
<p>那一个apk的生产和执行过程将是：<br><code>*.java -&gt; *.class -&gt; classes.dex（classes.dex将由Dalvik VM转换成机器码，由linux内核交给cpu去执行）</code></p>
<p>这样的话，在linux系统上使用profile软件的经验，也将派上用场。</p>
<p>android相关基础知识先介绍到此，感兴趣的请进一步查阅本文后面的参看资料。</p>
<h3 id="android应用性能分析"><a href="#android应用性能分析" class="headerlink" title="android应用性能分析"></a>android应用性能分析</h3><h5 id="apk启动速度"><a href="#apk启动速度" class="headerlink" title="apk启动速度"></a>apk启动速度</h5><p>在分析之前，我们先看看android程序的执行流程<br><img src="/images/mobile/android_application_execute_flow.png" title="android application execute flow images"></p>
<p>如上图，只要获取到启动ActivityManager所需要的时间，即是apk的启动时间。</p>
<pre><code>adb logcat | grep ActivityManager
</code></pre><p>其中”Displayed”对应的时间，即是launch Activity对应的时间，也就是apk启动时间，也可以使用如下命令：</p>
<pre><code>adb logcat -c &amp;&amp; adb logcat -s ActivityManager | grep  &quot;Displayed&quot;
</code></pre><ul>
<li>要使用 <code>adb</code>，需要先用usb线连接电脑和手机，并在手机的<code>设置</code>-&gt;<code>开发者选项</code>中开启<code>USB调试</code></li>
<li><code>adb</code>这个工具，可以通过在android sdk的platform-tools目录中找到。后面介绍的<code>systrace</code>也在这个目录。</li>
</ul>
<h5 id="页面渲染性能"><a href="#页面渲染性能" class="headerlink" title="页面渲染性能"></a>页面渲染性能</h5><p>android应用中的页面，是由android系统一帧，一帧地绘制的，其中每一帧的处理如下图：<br><img src="/images/mobile/android_view_execute_flow.png" title="android view execute flow images"></p>
<p>即：<br><code>计算视图大小（measure） -&gt; 安置视图的位置（layout） -&gt; 绘制（draw）视图</code></p>
<p>通过收集每帧的处理时间，即可以了解页面的渲染性能。</p>
<blockquote>
<p>当fps（每秒处理帧数，页面刷新率）为60时，页面的渲染看起来会比较平滑，这就需要每帧的处理时间不能大于16ms（1000/60）</p>
</blockquote>
<p>要检测一个应用在渲染页面时的每帧处理时间，通过如下命令，即可获得每帧的处理时间<br>    adb shell dumpsys gfxinfo com.sina.weibo</p>
<p>在输出日志的<code>Profile</code>数据段，包含了三列<code>Draw</code>，<code>Process</code>，<code>Execute</code>分别对应的处理时间，单位是ms。这三列的总和，就是渲染每帧时的处理时间。如<br>    Draw    Process    Execute<br>    0.95    0.93    0.72<br>    0.84    1.16    0.56<br>    0.83    0.89    0.69<br>    1.32    2.15    1.14<br>    1.29    1.37    1.01</p>
<blockquote>
<p>在进行分析之前，需要在<code>设置</code>-&gt;<code>开发者选项</code>中点击<code>GPU呈现模式分析</code>，选择<code>在adb shell dumpsys gfxinfo中</code>。</p>
</blockquote>
<p>收集步骤：<br>    1.重新启动app<br>    2.在界面完全加载完之后，在界面上慢慢上下滑动几个像素<br>    3.在终端执行adb shell dumpsys gfxinfo com.sina.weibo<br>这时将在终端输出页面渲染时的最后128帧中每帧所花费的时间，将相关数据贴到excel表格中，点击其中的<code>insert</code>-&gt;<code>chart</code>，即可生成相关图表<br><img src="/images/mobile/frame_render_time.png" title="frame render time images"></p>
<blockquote>
<p>其中<code>com.sina.weibo</code>就是app的包名</p>
</blockquote>
<p>获取包名的方法:<br>    adb shell pm list packages</p>
<h5 id="使用systrace进一步分析"><a href="#使用systrace进一步分析" class="headerlink" title="使用systrace进一步分析"></a>使用systrace进一步分析</h5><p>通过收集该apk的启动速度和每帧的渲染时间，并与竟品进行对比发现。该app启动时间的确比较慢，也偶尔有丢帧的现象发生。如何近一步分析呢？这时就需要<code>systrace</code>了。</p>
<p>示例使用方法如下：<br>    cd android-sdk-linux/platform-tools/systrace<br>    python systrace.py –app=com.qihoo.appstore gfx view</p>
<p>上面这条命令将会在<code>android-sdk-linux/platform-tools/systrace</code>目录下生成<code>trace.html</code>。其中收集了包名为<code>com.qihoo.appstore</code>的应用在android系统上针对<code>gfx</code>和<code>view</code> category的执行数据。</p>
<p><code>trace.html</code>在浏览器中打开如下图：<br><img src="/images/mobile/android_systrace_output.png" title="android systrace output images"></p>
<p>可以使用如下方法，对<code>trace.html</code>进行进一步分析：</p>
<ul>
<li>通过鼠标点击左侧的<code>+</code>，<code>-</code>可以展开或者收缩相关显示数据</li>
<li>通过键盘上的<code>a</code>，<code>d</code>可以使显示的内容沿着顶部的时间轴向左或者向右移动</li>
<li>通过键盘上的<code>w</code>，<code>s</code>可以对显示的内容进行放大或者缩小</li>
<li>使用鼠标点击内容页面的某一个块，在下方会显示详情</li>
<li>使用鼠标选择一块内容页面，在下方会显示汇总信息</li>
</ul>
<p>将光标定位到最后一行，使用<code>w</code>进行放大，使用<code>d</code>向左移动到2260ms左右，如下图：<br><img src="/images/mobile/android_systrace_output_zoom.png" title="android systrace output detail images"></p>
<p>发现对于那些<code>performTraversals</code>处理超过16ms的帧，其中<code>eglSwapBuffers</code>处理的时间都比较长，这应该就是问题所在。</p>
<p>使用usb线连接上手机，在命令行下运行：<br>    python systrace.py -h</p>
<p>可以查看相关使用方法。</p>
<blockquote>
<p>systrace是在在android4.1上新增的工具，在4.1,4.2和4.3上使用的方法不同</p>
</blockquote>
<p>reference：</p>
<p>[^1] <a href="http://www.curious-creature.org/docs/android-performance-case-study-1.html" target="_blank" rel="external">http://www.curious-creature.org/docs/android-performance-case-study-1.html</a></p>
<p>[^2] <a href="http://www.curious-creature.org/docs/android-performance-case-study-1.html" target="_blank" rel="external">http://www.curious-creature.org/docs/android-performance-case-study-1.html</a></p>
<p>[^3] <a href="http://www.vogella.com/articles/AndroidTools/article.html" target="_blank" rel="external">http://www.vogella.com/articles/AndroidTools/article.html</a></p>
<p>[^4] <a href="http://blog.csdn.net/aaa2832/article/details/7849400" target="_blank" rel="external">http://blog.csdn.net/aaa2832/article/details/7849400</a></p>
<p>[^5] <a href="http://www.cnblogs.com/taobox/articles/3405931.html" target="_blank" rel="external">http://www.cnblogs.com/taobox/articles/3405931.html</a></p>
<p>[^6] <a href="http://bigflake.com/systrace/" target="_blank" rel="external">http://bigflake.com/systrace/</a></p>
<p>[^7] <a href="http://developer.android.com/tools/debugging/systrace.html" target="_blank" rel="external">http://developer.android.com/tools/debugging/systrace.html</a></p>
<p>[^8] <a href="http://kitoslab-eng.blogspot.com/2013/01/aprof-android-profiler-profiling-tool.html" target="_blank" rel="external">http://kitoslab-eng.blogspot.com/2013/01/aprof-android-profiler-profiling-tool.html</a></p>
<p>[^9] <a href="http://udinic.wordpress.com/tag/rendering/" target="_blank" rel="external">http://udinic.wordpress.com/tag/rendering/</a></p>
]]></content>
    
    <summary type="html">
    
      通过通过服务端开发人员的视角，对安卓(android)手机上应用(app)的渲染性能进行分析，找到性能瓶颈
    
    </summary>
    
      <category term="mobile" scheme="http://debughacks.github.io/categories/mobile/"/>
    
    
      <category term="mobile" scheme="http://debughacks.github.io/tags/mobile/"/>
    
      <category term="android" scheme="http://debughacks.github.io/tags/android/"/>
    
      <category term="profile" scheme="http://debughacks.github.io/tags/profile/"/>
    
  </entry>
  
  <entry>
    <title>在php5.5中使用pdo和mysql_escape_string的一个坑</title>
    <link href="http://debughacks.github.io/2013/11/16/pdo-mysql-escape-string/"/>
    <id>http://debughacks.github.io/2013/11/16/pdo-mysql-escape-string/</id>
    <published>2013-11-16T10:04:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在项目中使用了鸟哥的yar扩展，但是在php5.2.10环境中没有安装成功，所以将php升级到了5.5。<br><a id="more"></a></p>
<h3 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h3><ul>
<li>安装php5.5.0</li>
<li>检测代码兼容性</li>
<li>从线上服务器日志中收集最热的一百条访问日志</li>
<li>下线一台服务器，启动php5.5环境，根据日志中最热的请求进行重放</li>
<li>检测服务器日志进行改进</li>
</ul>
<p>升级过程很顺利，但是上线后在日志中发现如下信息：<br>    mysql_escape_string(): This function is deprecated; use mysql_real_escape_string() instead<br>于是顺手修复上线。鉴于最近没怎么写代码，手有点生，先发布到了测试环境测试没问题才上线。</p>
<p>就在去茶水间接了一杯水的当儿，运营反馈说线上页面显示异常。于是马上回滚代码。</p>
<p>问题代码如下：<br>    $db = getDb();<br>    $a = mysql_real_escape_string($keyword);<br>    $sql = ‘select info from table where keyword = ‘ . $a;<br>    $res = $db-&gt;getRow($sql);</p>
<p>通过调试，发现：<br>    $keyword在mysql_real_escape_string处理之后，变成了false，所以在进行后面的查询时获取不到相应结果，页面就异常了。</p>
<p>再进一步调试发现：<br>    getDb使用的是pdo。<br>    $dbh = new PDO(‘mysql:host=xxx;port=xxx;dbname=xxx’, ‘xxx’, ‘xxx’);</p>
<p>于是原因浮出水面<br>    1 在使用string mysql_real_escape_string时没有指定link_identifier<br>    2 所以会去找使用mysql_connect()打开的最后一个连接<br>    3 使用的是pdo，没有找到相关连接。于是尝试使用不带任何参数的mysql_connect()去建立一个连接来使用<br>    4 本机没有mysql server，自然建立连接失败。于是发生错误，并产生警告信息（E_WARNING）<br>    5 服务器上设置的错误报告等级已经屏蔽了E_WARNING，所以也没有监控到相关错误</p>
]]></content>
    
    <summary type="html">
    
      php 5.5 环境下，在pdo扩展下使用在mysql_escape_string函数时遇到的一个坑
    
    </summary>
    
      <category term="php" scheme="http://debughacks.github.io/categories/php/"/>
    
    
      <category term="php5.5" scheme="http://debughacks.github.io/tags/php5-5/"/>
    
      <category term="mysql" scheme="http://debughacks.github.io/tags/mysql/"/>
    
  </entry>
  
</feed>
