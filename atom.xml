<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Debug Hacks</title>
  <subtitle>谦虚其心，宏大其量.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://debughacks.github.io/"/>
  <updated>2016-06-30T10:07:27.000Z</updated>
  <id>http://debughacks.github.io/</id>
  
  <author>
    <name>GaoYuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Charles在移动设备上捕获https数据包</title>
    <link href="http://debughacks.github.io/2016/06/30/charles-https/"/>
    <id>http://debughacks.github.io/2016/06/30/charles-https/</id>
    <published>2016-06-30T08:38:16.000Z</published>
    <updated>2016-06-30T10:07:27.000Z</updated>
    
    <content type="html">&lt;p&gt;对于互联网从业人员而言，掌握抓包，是必备技能。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Charles&lt;/code&gt;是一个http代理，工作模式如下图：&lt;/p&gt;
&lt;img src=&quot;/images/mobile/http_proxy.png&quot; title=&quot;抓包&quot;&gt;
&lt;p&gt;但是默认只能抓http协议的数据包，要捕获https的数据包，需要进行相关配置。&lt;/p&gt;
&lt;p&gt;下文以&lt;code&gt;IOS&lt;/code&gt;移动设备为例，讲述配置步骤（&lt;code&gt;android&lt;/code&gt;设备类似）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在移动设备安装ssl证书&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Charles ssl证书的下载地址如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.charlesproxy.com/getssl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.charlesproxy.com/getssl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在移动设备的浏览器中打开上述&lt;code&gt;Url&lt;/code&gt;，即可进行安装。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装http代理&lt;code&gt;Charles&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件下载地址如下：&lt;br&gt;&lt;a href=&quot;http://www.charlesproxy.com/latest-release/download.do&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.charlesproxy.com/latest-release/download.do&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启用http代理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打开&lt;code&gt;Charles&lt;/code&gt;软件，默认会启动一个监听本地8888端口的http代理， 也可以在&lt;code&gt;Charles&lt;/code&gt;的设置中修改相关端口。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置&lt;code&gt;Charles&lt;/code&gt;支持https&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;code&gt;Charles&lt;/code&gt;中打开：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Proxy -&amp;gt; SSL Proxying Settings
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;勾选&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Enable SSL Proxying
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后在下方的&lt;code&gt;Locations&lt;/code&gt;中点击&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Add
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;添加需要抓https接口的域名。&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Host:www.baidu.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Port:443&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在移动设备上修改代理&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/images/mobile/ios_http_proxy.png&quot; title=&quot;ios设置代理&quot;&gt;
&lt;p&gt;其中，&lt;code&gt;服务器&lt;/code&gt;是安装了&lt;code&gt;Charles&lt;/code&gt;软件的电脑的&lt;code&gt;IP&lt;/code&gt;，端口是&lt;code&gt;Charles&lt;/code&gt; http代理开启的端口。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      通过使用charles设置代理，捕获移动设备上捕获的https数据包
    
    </summary>
    
      <category term="devops" scheme="http://debughacks.github.io/categories/devops/"/>
    
    
      <category term="devops" scheme="http://debughacks.github.io/tags/devops/"/>
    
      <category term="ios" scheme="http://debughacks.github.io/tags/ios/"/>
    
      <category term="charles" scheme="http://debughacks.github.io/tags/charles/"/>
    
      <category term="https" scheme="http://debughacks.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>那个套模版的，放开你的F5</title>
    <link href="http://debughacks.github.io/2015/02/28/release-f5-for-template-engineer/"/>
    <id>http://debughacks.github.io/2015/02/28/release-f5-for-template-engineer/</id>
    <published>2015-02-28T10:29:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html">&lt;p&gt;老江说过：“科学技术是第一生产力”。技术的魅力在于通过改善相关流程或者提供相关工具，对人们的生活进行改善，make live esaier。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;em&gt;对于自喻为模版工程师的同行们，套模版的流程大抵是：&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;写代码，保存

打开浏览器，按F5刷新页面，检查相关前端效果
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我记得&lt;a href=&quot;http://weibo.com/yjf10&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;轩脉刃&lt;/a&gt;曾经写过一个统计鼠标按键的小工具。如果对模版工程师工作时键盘的按键进行统计，那么F5的使用率肯定不容忽视。&lt;/p&gt;
&lt;p&gt;倘若能在代码保存后就自动刷新浏览器，那不仅能解放模版工程师的F5按键，也能提升他们的开发效率。突然感觉非常美妙。&lt;/p&gt;
&lt;p&gt;我记得有人说过，这个世界上不缺乏原创的idea，缺的只是一双能发现它的眼睛。&lt;/p&gt;
&lt;p&gt;正如&lt;code&gt;livereload&lt;/code&gt;所说的－“The Web Developer Wonderland”。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;livereload&lt;/code&gt;，&lt;em&gt;通过如下几个步骤&lt;/em&gt;，就可以做到当我们保存代码后，自动刷新浏览器中相关页面内容。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;安装livereload浏览器扩展&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相关浏览器扩展的下载地址如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;browser extensions&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;安装livereload server端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装python环境，然后在终端执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install livereload
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;easy_install livereload
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;启动livereload server端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设我的代码目录在&lt;code&gt;/home/galendy/code/demo&lt;/code&gt;，在终端执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;livereload /home/galendy/code/demo
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;点击浏览器扩展&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;livereload&lt;/code&gt;的基本原理是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;livereload server端会启动本地的socket服务（默认开放本地的35729端口），当监听的目录下的文件内容有变化时，向该socket写入数据

livereload浏览器扩展会连接本地的35729端口，当有新消息到来时，会在浏览器中插入一段js代码，刷新当前页面
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实际上，前端工程师还会使用&lt;code&gt;livereload&lt;/code&gt;完成css，js等文件的合并和压缩。想要了解更多，请参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://livereload.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;livereload&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://livereload.readthedocs.org/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;python livereload&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      使用livereload浏览器扩展，提升web前端开发工程师的开发效率，减少修改代码后需要重新刷新页面的工序
    
    </summary>
    
      <category term="collect" scheme="http://debughacks.github.io/categories/collect/"/>
    
    
      <category term="php" scheme="http://debughacks.github.io/tags/php/"/>
    
      <category term="collect" scheme="http://debughacks.github.io/tags/collect/"/>
    
      <category term="python" scheme="http://debughacks.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>互联网信息分类方法</title>
    <link href="http://debughacks.github.io/2015/01/25/categorize-web-information/"/>
    <id>http://debughacks.github.io/2015/01/25/categorize-web-information/</id>
    <published>2015-01-25T11:12:00.000Z</published>
    <updated>2016-06-30T06:19:33.000Z</updated>
    
    <content type="html">&lt;p&gt;目前，虽然搜索已经代替分类目录（google颠覆yahoo模式）成为人们获取信息的主要途径，但是没有好的信息分类，再好的搜索也是白搭。只有信息足够格式化，标准化，搜索才有效。即分类提升展示逻辑，搜索输出内容结果。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;如何判定分类的好坏&quot;&gt;&lt;a href=&quot;#如何判定分类的好坏&quot; class=&quot;headerlink&quot; title=&quot;如何判定分类的好坏&quot;&gt;&lt;/a&gt;如何判定分类的好坏&lt;/h1&gt;&lt;p&gt;一个好的分类方法需要做到如下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能够涵盖集合中的所有元素&lt;/li&gt;
&lt;li&gt;类和类之间不能重叠&lt;/li&gt;
&lt;li&gt;能够比较容易地为每一个元素找到其对应的分类&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;常见的分类方法&quot;&gt;&lt;a href=&quot;#常见的分类方法&quot; class=&quot;headerlink&quot; title=&quot;常见的分类方法&quot;&gt;&lt;/a&gt;常见的分类方法&lt;/h1&gt;&lt;h2 id=&quot;分类之前的准备工作&quot;&gt;&lt;a href=&quot;#分类之前的准备工作&quot; class=&quot;headerlink&quot; title=&quot;分类之前的准备工作&quot;&gt;&lt;/a&gt;分类之前的准备工作&lt;/h2&gt;&lt;p&gt;在对信息进行分类之前，可以先做如下几件事：&lt;/p&gt;
&lt;h5 id=&quot;1-明确如下问题&quot;&gt;&lt;a href=&quot;#1-明确如下问题&quot; class=&quot;headerlink&quot; title=&quot;1. 明确如下问题&quot;&gt;&lt;/a&gt;1. 明确如下问题&lt;/h5&gt;&lt;p&gt;信息如何产生？如何组织关联？通过什么渠道传播？&lt;/p&gt;
&lt;h5 id=&quot;2-观察别人&quot;&gt;&lt;a href=&quot;#2-观察别人&quot; class=&quot;headerlink&quot; title=&quot;2. 观察别人&quot;&gt;&lt;/a&gt;2. 观察别人&lt;/h5&gt;&lt;p&gt;可以去一家真正的商店看看，或者参观一座图书馆，还可以拜访竞争对手的商店。&lt;/p&gt;
&lt;h5 id=&quot;3-研究竞争对手&quot;&gt;&lt;a href=&quot;#3-研究竞争对手&quot; class=&quot;headerlink&quot; title=&quot;3. 研究竞争对手&quot;&gt;&lt;/a&gt;3. 研究竞争对手&lt;/h5&gt;&lt;p&gt;访问竞争对手的网站。他们是怎样组织信息的？要对多种组织方案加以比较。存在哪些相似之外？又有哪些区别？要尽量明确竞争对手为什么做出那样的选择。这是失误还是明智之举？你甚至可以对他们的网站做可用性测试，从而发现其组织方案中哪些方面奏效，哪些部分没有意义。&lt;/p&gt;
&lt;h2 id=&quot;常见的分类方法-1&quot;&gt;&lt;a href=&quot;#常见的分类方法-1&quot; class=&quot;headerlink&quot; title=&quot;常见的分类方法&quot;&gt;&lt;/a&gt;常见的分类方法&lt;/h2&gt;&lt;h5 id=&quot;1-主题分类法&quot;&gt;&lt;a href=&quot;#1-主题分类法&quot; class=&quot;headerlink&quot; title=&quot;1. 主题分类法&quot;&gt;&lt;/a&gt;1. 主题分类法&lt;/h5&gt;&lt;p&gt;主题分类法的特征是选择某一个主题作为一阶类目，在一阶类目下又可分若干二阶类目，二阶类目下再分若干三阶类目，形成一个大的树形结构。同阶的类目按照字顺排序。&lt;/p&gt;
&lt;p&gt;由于网络资源数不胜数，所以一般会选取14-24个热点事物作为一阶分类，分类的阶数为3到6级。&lt;/p&gt;
&lt;p&gt;其优点是可以将事物相关的内容全部集中在一起。如汽车大类下可包含汽车制造，交易，保养，维修，赛车等等子类目。但是容量较小，对网络资源的覆盖率有限。&lt;/p&gt;
&lt;h5 id=&quot;2-分面分类法&quot;&gt;&lt;a href=&quot;#2-分面分类法&quot; class=&quot;headerlink&quot; title=&quot;2. 分面分类法&quot;&gt;&lt;/a&gt;2. 分面分类法&lt;/h5&gt;&lt;p&gt;分面分类法是根据实物都具有多维度的特征而建立的。可以将信息分成定义明确、互斥的区域。常见的是按字母顺序、按年表、按地理位置等分类。也可按照如下类型进行分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按主题；设计时需要定义好内容的范围，注意涵盖面的广度&lt;/li&gt;
&lt;li&gt;按任务；将内容和应用程序组织成流程、功能或工作的集合。最常见的是电商网站&lt;/li&gt;
&lt;li&gt;按用户；如果用户群可以界定的比较清楚，可以提供很好的个性化服务，但模糊性依然存在，对系统“猜测”的要求很高&lt;/li&gt;
&lt;li&gt;按隐喻；多用于游戏&lt;/li&gt;
&lt;li&gt;混用以上类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;3-卡片分类法&quot;&gt;&lt;a href=&quot;#3-卡片分类法&quot; class=&quot;headerlink&quot; title=&quot;3. 卡片分类法&quot;&gt;&lt;/a&gt;3. 卡片分类法&lt;/h5&gt;&lt;p&gt;卡片分类就是把类似的东西放在一起。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把你收集的各种信息整理出来写在卡片上。(如果没有，可以用一堆CD或者照片代替，可以是任何东西，只要数量足够多，可以零乱散落在地板上)&lt;/li&gt;
&lt;li&gt;把所有卡片从盒子里倒在地板上。&lt;/li&gt;
&lt;li&gt;把所有卡片从盒子里倒在地板上。&lt;/li&gt;
&lt;li&gt;现在开始分组。如果你看到某些东西与另外一些东西相像，就把它们放在一起。&lt;/li&gt;
&lt;li&gt;最后，当分组完毕时，再拿一些背面有胶的便条标出每一个堆的名称，分类完毕。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;4-公众分类法&quot;&gt;&lt;a href=&quot;#4-公众分类法&quot; class=&quot;headerlink&quot; title=&quot;4. 公众分类法&quot;&gt;&lt;/a&gt;4. 公众分类法&lt;/h5&gt;&lt;p&gt;所谓”公众分类法”，就是由公众来为信息贴加标签（tagging），被使用最多的标签就最能说明这条信息的特点。&lt;/p&gt;
&lt;p&gt;使用标签分类，非常的便捷，而且易于组合，但是也存在一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同的用户对相同的标签，往往有不同的理解，比如在”工具”标签下，可能会发现彼此完全没有关系的内容。&lt;/li&gt;
&lt;li&gt;同义词问题。用户可能使用同义词作为标签，比如”tv/television”，”Holland/Netherlands/Dutch”，”超级女生/超女”。英语中，还存在复数问题。&lt;/li&gt;
&lt;li&gt;词的多义性问题。比如”china”这个标签，到底指中国，还是指瓷器。&lt;/li&gt;
&lt;li&gt;用户的标签五花八门，可能会产生大量”噪音”，加重系统负担，降低分类的准确性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，最好的解决方法应该是，自上而下的目录分类法与标签式的公众分类法相结合，然后对能够用作标签的词汇进行控制（controlled vocabulary），不能什么词都用来当标签。&lt;/p&gt;
&lt;h1 id=&quot;实施建议&quot;&gt;&lt;a href=&quot;#实施建议&quot; class=&quot;headerlink&quot; title=&quot;实施建议&quot;&gt;&lt;/a&gt;实施建议&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;尝试按照主题分类和分面分类发进行分类&lt;/li&gt;
&lt;li&gt;试试卡片分类&lt;/li&gt;
&lt;li&gt;使用2的标准去判定分类是否合理&lt;/li&gt;
&lt;li&gt;如果单纯的分类无法解决问题，考虑下打标签（公众分类法）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;reference：&lt;/p&gt;
&lt;p&gt;[^1] &lt;a href=&quot;http://zhanglichuan.me/resolve-ia&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zhanglichuan.me/resolve-ia&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      如何进行互联网信息分类，常见的信息分类方法
    
    </summary>
    
      <category term="collect" scheme="http://debughacks.github.io/categories/collect/"/>
    
    
      <category term="web 信息架构 IA" scheme="http://debughacks.github.io/tags/web-%E4%BF%A1%E6%81%AF%E6%9E%B6%E6%9E%84-IA/"/>
    
  </entry>
  
  <entry>
    <title>2014年总结－但行好事，莫问前程</title>
    <link href="http://debughacks.github.io/2014/12/31/user-nginx-proxy-cache-mirror-website/"/>
    <id>http://debughacks.github.io/2014/12/31/user-nginx-proxy-cache-mirror-website/</id>
    <published>2014-12-31T02:28:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html">&lt;p&gt;2014年，是特别的一年。对于码农而言，这一年的过去，可以当作是第二个千年的结束。当然，也将是新千年的开始，期待ing。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这一年，有个同学博士毕业，还有一个同学荣升副教授。最重要的是，乘着2014的小尾巴，我们迎接到了一个新生命的降临。hello world！&lt;/p&gt;
&lt;p&gt;这本是一篇技术博文，但是相对于技术而言，有些东西会更重要一些。&lt;/p&gt;
&lt;p&gt;科技改变生活，技术本来就是为了让生活更美好，让大家能活着更容易些，莫忘初心。&lt;/p&gt;
&lt;p&gt;分享点技术之外的东西，希望能走地更远，不管是在技术的道路上，还是非技术的道路上。&lt;/p&gt;
&lt;p&gt;虽然在有生之年，可以很难达到那种境界，但是尽力去向那个境界靠拢。&lt;/p&gt;
&lt;p&gt;但行好事，莫问前程。&lt;/p&gt;
&lt;p&gt;谋事在人，成事在天，尽力就好，人能做的，大抵只能如此。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下内容，摘自特兰修女箴言 － From Mother Theresa&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人们经常是不讲道理的、没有逻辑的和以自我为中心的&lt;br&gt;不管怎样，你要原谅他们&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;People are often unreasonable, illogical and self-centered; Forgive them anyway.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即使你是友善的，人们可能还是会说你自私和动机不良&lt;br&gt;不管怎样，你还是要友善&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;If you are kind, people may accuse you of selfish, ulterior motives; Be kind anyway.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当你功成名就，你会有一些虚假的朋友&lt;br&gt;和一些真实的敌人&lt;br&gt;不管怎样，你还是要取得成功&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;If you are successful, you will win some false friends And some true enemies; Succeed anyway.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即使你是诚实的和率直的，人们可能还是会欺骗你&lt;br&gt;不管怎样，你还是要诚实和率直&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;If you are honest and frank, people may cheat you; Be honest and frank anyway.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你多年来营造的东西&lt;br&gt;有人在一夜之间把它摧毁&lt;br&gt;不管怎样，你还是要去营造&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;What you spend years building, Someone could destroy overnight; Build anyway.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你找到了平静和幸福，他们可能会嫉妒你&lt;br&gt;不管怎样，你还是要快乐&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;If you find serenity and happiness, they may be jealous; Be happy anyway.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你今天做的善事，人们往往明天就会忘记&lt;br&gt;不管怎样，你还是要做善事&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The good you do today, people will often forget tomorrow; Be good anyway.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即使把你最好的东西给了这个世界&lt;br&gt;也许这些东西永远都不够&lt;br&gt;不管怎样，把你最好的东西给这个世界&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Give the world the best you have, And it may never be enough; Give the world the best you have anyway.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你看，说到底，它是你和上帝之间的事&lt;br&gt;而决不是你和他人之间的事&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;You see, in the final analysis, it is between you and God; It is never between you and them anyway.
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      2014年总结，但行好事，莫问前程
    
    </summary>
    
      <category term="essay" scheme="http://debughacks.github.io/categories/essay/"/>
    
    
      <category term="essay" scheme="http://debughacks.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>一周打造支付系统</title>
    <link href="http://debughacks.github.io/2014/11/23/build-payment-system-in-one-week/"/>
    <id>http://debughacks.github.io/2014/11/23/build-payment-system-in-one-week/</id>
    <published>2014-11-23T06:34:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html">&lt;p&gt;获取食物的最佳方式就是处于食物链的顶端，以捕食该链条之下的所有动植物。不言而喻，搭建处于资金流顶端的支付系统，伴随资金的转移过程，也是积累财富的绝佳手段。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;一般网购流程&quot;&gt;&lt;a href=&quot;#一般网购流程&quot; class=&quot;headerlink&quot; title=&quot;一般网购流程&quot;&gt;&lt;/a&gt;一般网购流程&lt;/h1&gt;&lt;img src=&quot;/images/payment/shopping_flow.png&quot; title=&quot;shopping flow&quot;&gt;
&lt;p&gt;一般的网购流程如上图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;商品筛选&lt;/li&gt;
&lt;li&gt;将选中的商品添加到购物车（顾名思义，推着车去购物。如果只卖一个商品的话，可以省略这步）&lt;/li&gt;
&lt;li&gt;确认要购买物品，去结算&lt;/li&gt;
&lt;li&gt;下订单，即提交要结算物品的清单&lt;/li&gt;
&lt;li&gt;网上支付该订单&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;支付流程&quot;&gt;&lt;a href=&quot;#支付流程&quot; class=&quot;headerlink&quot; title=&quot;支付流程&quot;&gt;&lt;/a&gt;支付流程&lt;/h1&gt;&lt;img src=&quot;/images/payment/flow.jpg&quot; title=&quot;payment flow&quot;&gt;
&lt;p&gt;一个典型的支付流程如上图。&lt;/p&gt;
&lt;p&gt;用户下单时，订单系统需要和产品库交互，生成支付连接。支付系统对请求地址进行验签之后，调用第三方平台的支付接口进行支付，然后更新订单状态。在订单成功支付之后，更新产品库存信息。&lt;/p&gt;
&lt;p&gt;属于支付系统的功能有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求参数验签&lt;/li&gt;
&lt;li&gt;第三方支付接口对接&lt;/li&gt;
&lt;li&gt;订单系统对接&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;只要完成与第三方支付接口的对接，即可解决搭建支付系统中最难啃的一块硬骨头。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;第三方支付平台&quot;&gt;&lt;a href=&quot;#第三方支付平台&quot; class=&quot;headerlink&quot; title=&quot;第三方支付平台&quot;&gt;&lt;/a&gt;第三方支付平台&lt;/h1&gt;&lt;p&gt;目前比较流行的第三方支付平台主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支付宝&lt;/li&gt;
&lt;li&gt;财付通&lt;/li&gt;
&lt;li&gt;快钱&lt;/li&gt;
&lt;li&gt;网银在线&lt;/li&gt;
&lt;li&gt;微信支付&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于网银支付，可以调用银联的接口，或者直接对接银行（可以降低手续费，支持大额等个性化支付方法。但是实现成本较高）。&lt;/p&gt;
&lt;p&gt;虽然支付宝的手续费不是最实惠的，但是支付宝本身对接了个大银行的网银支付，而我们的目标是一周打造支付系统，当然选择最省事的。&lt;/p&gt;
&lt;p&gt;对接支付宝支付接口的流程如下：&lt;/p&gt;
&lt;img src=&quot;/images/payment/zhifubao.jpg&quot; title=&quot;支付宝对接&quot;&gt;
&lt;p&gt;完成&lt;code&gt;技术集成&lt;/code&gt;之前的工作，理论上需要8-10个工作日，所以需要提前申请。&lt;/p&gt;
&lt;p&gt;最好找商务部的同事出马，不要怕麻烦boss。有问题，及时向组织反馈。&lt;/p&gt;
&lt;h1 id=&quot;支付宝接口&quot;&gt;&lt;a href=&quot;#支付宝接口&quot; class=&quot;headerlink&quot; title=&quot;支付宝接口&quot;&gt;&lt;/a&gt;支付宝接口&lt;/h1&gt;&lt;p&gt;与支付宝接口的交互流程如下&lt;/p&gt;
&lt;img src=&quot;/images/payment/zhifubao_flow.jpg&quot; title=&quot;支付宝接口交互流程&quot;&gt;
&lt;p&gt;支付宝提供的sdk，主要包含如下文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;alipay_core.function.php -- 支付宝接口公用函数，是请求、通知返回两个文件所调用的公用函数核心处理文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alipay_md5.function.php  -- MD5加密&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alipay_notify.class.php  -- 支付宝通知处理类，处理支付宝各接口通知返回&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alipay_submit.class.php  -- 支付宝各接口请求提交类，构造支付宝各接口表单HTML文本，获取远程HTTP数据&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;要调用的方法&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提交订单时，调用&lt;code&gt;alipay_submit.class.php&lt;/code&gt;中的&lt;code&gt;buildRequestUrl&lt;/code&gt;方法，同时，需要注册通知回调&lt;code&gt;return_url&lt;/code&gt;和&lt;code&gt;notify_url&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中：&lt;br&gt;    return_url是同步回调，一般用于在支付成功后，调转至支付成功页。&lt;br&gt;    notify_url是异步回调，一般用于更新订单状态等等（支付宝有相关队列服务运行异步回调，回调失败后，会以不定的间隔进行重试）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在通知回调时，都需要调用&lt;code&gt;alipay_notify.class.php&lt;/code&gt;中的&lt;code&gt;verifyReturn&lt;/code&gt;验证回调的合法性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;ssl证书&quot;&gt;&lt;a href=&quot;#ssl证书&quot; class=&quot;headerlink&quot; title=&quot;ssl证书&quot;&gt;&lt;/a&gt;ssl证书&lt;/h1&gt;&lt;p&gt;俗话说，没有买卖就没有杀戮。凡是涉及利益的地方，就不会很安全。使用采用http进行数据通讯，难免发生如下问题：&lt;br&gt;&lt;img src=&quot;/images/payment/http_flow.jpg&quot; title=&quot;中间人攻击&quot;&gt;&lt;/p&gt;
&lt;p&gt;但是换成https，会有如下好处：&lt;/p&gt;
&lt;img src=&quot;/images/payment/https_2.jpg&quot; title=&quot;http ssl&quot;&gt;
&lt;img src=&quot;/images/payment/https_3.jpg&quot; title=&quot;https flow&quot;&gt;
&lt;p&gt;申请ssl证书，推荐数字公司使用的&lt;a href=&quot;http://www.wosign.com/price.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WoSign超真 SSL&lt;/a&gt;。&lt;/p&gt;
&lt;img src=&quot;/images/payment/ssl.jpg&quot; title=&quot;ssl&quot;&gt;
&lt;h1 id=&quot;请求验签&quot;&gt;&lt;a href=&quot;#请求验签&quot; class=&quot;headerlink&quot; title=&quot;请求验签&quot;&gt;&lt;/a&gt;请求验签&lt;/h1&gt;&lt;p&gt;请求参数签名，需要使用可逆加密算法。其中又分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对称加解密算法&lt;/li&gt;
&lt;li&gt;非对称加解密算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对称加解密算法，在加密和解密时都使用一个密钥，加解密性能较好。但安全性较低（密钥只要被拿到，就gameover）。&lt;/p&gt;
&lt;p&gt;非对称加解密算法，一般使用私钥加密，公钥解密。其安全性较好（只要保存好私钥就行），但是性能较差。&lt;/p&gt;
&lt;p&gt;所以可以使用对称加解密算法加密请求参数。但加解密时，不使用同一个密钥。相关密钥，通过非对称加解密算法加密后，在请求参数中传递。&lt;/p&gt;
&lt;p&gt;解密流程如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 在请求参数中获取使用非对称加解密算法加密的密钥ekey
2. 使用非对称加解密算法解密密钥ekey为dkey
3. 使用对称加解密算法和dkey，解密请求参数
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;订单&quot;&gt;&lt;a href=&quot;#订单&quot; class=&quot;headerlink&quot; title=&quot;订单&quot;&gt;&lt;/a&gt;订单&lt;/h1&gt;&lt;p&gt;我们用一周打造的支付系统，不能是一个远在云端的架构，而要是一个可运行的系统。那么，订单自然也少不了。&lt;/p&gt;
&lt;p&gt;订单是按照如下对应关系产生的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;用户 -&amp;gt; 商品 -&amp;gt; 订单
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在整个支付过程中，一般要存在两个订单号：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于在内部系统（订单，支付，个人中心）中流通的订单号 &lt;code&gt;order_no&lt;/code&gt;，在每一次下单时产生。&lt;/li&gt;
&lt;li&gt;用于支付的订单号 &lt;code&gt;pay_order_no&lt;/code&gt;，由 &lt;code&gt;order_no&lt;/code&gt; ＋ 时间戳 ＋ salt等，在每一次支付时产生。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;联调部署&quot;&gt;&lt;a href=&quot;#联调部署&quot; class=&quot;headerlink&quot; title=&quot;联调部署&quot;&gt;&lt;/a&gt;联调部署&lt;/h1&gt;&lt;p&gt;开发阶段涉及的模块可做如下划分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;产品页&lt;/li&gt;
&lt;li&gt;支付页&lt;/li&gt;
&lt;li&gt;支付&lt;/li&gt;
&lt;li&gt;订单&lt;/li&gt;
&lt;li&gt;个人中心&lt;/li&gt;
&lt;li&gt;测试，部署上线&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;衡量一个互联网的标准有：功能，交互，ui。&lt;/p&gt;
&lt;p&gt;因为我们的目标是一周内打造支付，那么，优先是完成支付和订单。至于是否要在产品页添加购物车，是否要在订单支付页面保存配送地址，是否要在个人中心对接物流，以及退款等等，都可以暂时砍掉。&lt;/p&gt;
&lt;p&gt;互联网产品，唯快不破。快速上线，快速迭代。&lt;/p&gt;
&lt;h1 id=&quot;The-Hole&quot;&gt;&lt;a href=&quot;#The-Hole&quot; class=&quot;headerlink&quot; title=&quot;The Hole&quot;&gt;&lt;/a&gt;The Hole&lt;/h1&gt;&lt;p&gt;开发过程中，难免会遇到不少坑，特此纪录，希望帮助有缘人。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;产品金额存储&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了避免因退款，对账时，和银行或者第三方支付平台产生因为数据精度而舍入等问题，可以将产品金额以&lt;code&gt;分&lt;/code&gt;为单位存储，前台展示时除以100。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要两个订单号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;支付宝等第三方平台，对订单号有验证，一个订单号只能支付一次。所以系统中需要存在两个订单号，一个用于内部系统流通，一个用于支付，每次支付时都产品一个最新的（与内部系统流通的订单号有对应关系）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;权限验证&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下单，或者支付完成后，在个人中心等位置，一般可以查看订单状态。此时需要注意，需要增加权限验证。否则会产生平行权限安全漏洞（可查看别人的订单等信息）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统安全性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在支付和个人中心等页面，因为存在前后端交互。所以需要排查，是否存在sql注入或者xss等安全漏洞。推荐&lt;code&gt;XSScrapy&lt;/code&gt;和&lt;code&gt;SqlMap&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在整个交易过程中，需要有完善详尽的日志记录。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;获取食物的最佳方式就是处于食物链的顶端，以捕食该链条之下的所有动植物。不言而喻，搭建处于资金流顶端的支付系统，伴随资金的转移过程，也是积累财富的绝佳手段。&lt;br&gt;
    
    </summary>
    
      <category term="php" scheme="http://debughacks.github.io/categories/php/"/>
    
    
      <category term="php" scheme="http://debughacks.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>使用Graphite和cabot搭建监控服务</title>
    <link href="http://debughacks.github.io/2014/10/01/use-graphite-and-alter-build-monitor-system/"/>
    <id>http://debughacks.github.io/2014/10/01/use-graphite-and-alter-build-monitor-system/</id>
    <published>2014-10-01T01:43:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html">&lt;p&gt;说起监控，我们一般会首先想到&lt;code&gt;zabbix&lt;/code&gt;，&lt;code&gt;nagios&lt;/code&gt;，&lt;code&gt;ganglia&lt;/code&gt;等等。但是对于非&lt;code&gt;ops&lt;/code&gt;开发人员而言，这些东西，多多少少让人感到陌生。所以本文将从一个&lt;code&gt;服务端开发人员&lt;/code&gt;的视角，介绍如何通过&lt;code&gt;graphite&lt;/code&gt;，&lt;code&gt;cabot&lt;/code&gt;，加一个&lt;code&gt;shell&lt;/code&gt;定时脚本，搭建监控报警服务。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;python环境安装&quot;&gt;&lt;a href=&quot;#python环境安装&quot; class=&quot;headerlink&quot; title=&quot;python环境安装&quot;&gt;&lt;/a&gt;python环境安装&lt;/h1&gt;&lt;p&gt;虽然linux系统上一般都有python环境，但是默认的python版本较低。而且&lt;code&gt;yum&lt;/code&gt;等系统工具，都依赖于默认的python。所以推荐的做法是再安装一个python，并使用&lt;code&gt;virtualenv&lt;/code&gt;等工具，分项目进行环境管理，并与系统默认的python环境进行隔离。&lt;/p&gt;
&lt;p&gt;以python2.7.3为例，介绍python环境的安装。&lt;/p&gt;
&lt;h2 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo yum install bzip2-devel.x86_64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo yum install sqlite-devel.x86_64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo yum install readline-devel.x86_64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo yum install openssl-devel.x86_64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;wget http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tar jxvf Python-2.7.3.tar.bz2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd Python-2.7.3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;./configure --prefix=/usr/local/python2.7.3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;make &amp;amp;&amp;amp; sudo make install&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd ..&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;wget https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz --no-check-certificate&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tar zxvf distribute-0.6.49.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd distribute-0.6.49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo /usr/local/python2.7.3/bin/python setup.py install&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo /usr/local/python2.7.3/bin/easy_install pbr&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd ..&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;wget https://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.10.1.tar.gz --no-check-certificate&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tar zxvf virtualenv-1.10.1.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd virtualenv-1.10.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo /usr/local/python2.7.3/bin/python setup.py install&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo /usr/local/python2.7.3/bin/easy_install virtualenvwrapper&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;如果遇到 [FATAL] Failed to create text with cairo, this probably means cairo cant find any fonts. Install some system fonts and try again。可以尝试安装bitmap font。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo yum install bitmap.x86_64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo yum install bitmap-fonts-compat.noarch&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;相关配置&quot;&gt;&lt;a href=&quot;#相关配置&quot; class=&quot;headerlink&quot; title=&quot;相关配置&quot;&gt;&lt;/a&gt;相关配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;创建管理python环境的用户&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了便于环境的统一管理，创建一个普通用户进行新创建python环境的管理和相关python扩展的安装。同时，向数字公司的&lt;code&gt;addops&lt;/code&gt;们致敬。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;useradd appops&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建python环境安装目录&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo mkdir -p /data/server/python-envs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo chown -R appops.appops /data/server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;配置新安装的python2.7.3环境&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo su appops -c &amp;apos;vim ~/.bashrc&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;添加如下内容&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;export WORKON_HOME=/data/server/python-envs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export VIRTUALENVWRAPPER_PYTHON=/usr/local/python2.7.3/bin/python&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/python2.7.3/bin/virtualenv&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;source /usr/local/python2.7.3/bin/virtualenvwrapper.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;搭建graphite监控服务&quot;&gt;&lt;a href=&quot;#搭建graphite监控服务&quot; class=&quot;headerlink&quot; title=&quot;搭建graphite监控服务&quot;&gt;&lt;/a&gt;搭建graphite监控服务&lt;/h1&gt;&lt;h2 id=&quot;安装步骤-1&quot;&gt;&lt;a href=&quot;#安装步骤-1&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建安装目录&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo mkdir /opt/graphite&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo chown -R appops.appops /opt/graphite&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建python虚拟环境&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo su appops&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;source ~/.bashrc&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mkvirtualenv graphite&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;graphite安装&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pip install whisper&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip install carbon&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip install graphite-web&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip install django==1.5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip install django-tagging&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip install uwsgi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip install MySQL-python&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip install daemonize&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;graphite使用&lt;code&gt;cairo&lt;/code&gt;进行绘图，由于系统自带的cairo版本较低（需要cairo1.10以上），使用pip安装cairo会出错，所以采用编译安装。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wget http://cairographics.org/releases/pycairo-1.8.8.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tar zxvf pycairo-1.8.8.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;python -c &amp;quot;import sys; print sys.prefix&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd pycairo-1.8.8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;./configure --prefix=/data/server/python-envs/graphite&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;make&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;make install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目录说明&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;bin -- 数据收集相关工具&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;conf -- 数据存储相关配置文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    carbon.conf -- 数据收集carbon进程涉及的配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dashboard.conf -- Dashboard UI相关配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    graphite.wsgi -- wsgi相关配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    storage-schemas.conf -- Schema definitions for Whisper files&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    whitelist.conf -- 定义允许存储的metrics白名单&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    graphTemplates.conf -- 图形化展示数据时使用的模板&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;examples -- 示例脚本&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;lib -- carbon和twisted库&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;storage -- 数据文件存储目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;webapp -- 数据前端展示涉及程序&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;配置Graphite-web&quot;&gt;&lt;a href=&quot;#配置Graphite-web&quot; class=&quot;headerlink&quot; title=&quot;配置Graphite-web&quot;&gt;&lt;/a&gt;配置Graphite-web&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;初始化配置文件&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cd /opt/graphite/webapp/graphite&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cp local_settings.py.example local_settings.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cp /opt/graphite/conf/graphite.wsgi.example /opt/graphite/conf/graphite.wsgi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cp /opt/graphite/conf/graphTemplates.conf.example /opt/graphite/conf/graphTemplates.conf&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cp /opt/graphite/conf/dashboard.conf.example /opt/graphite/conf/dashboard.conf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改或者增加如下配置：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;TIME_ZONE&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;DEBUG&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SECRET_KEY&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;DATABASES&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;示例配置文件&lt;a href=&quot;https://gist.github.com/jqlblue/88f8a9b14bbe4bae3666&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;local_settings.py&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;初始化数据库&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;python manage.py syncdb&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动graphite-web&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;uwsgi --http localhost:8085 --master --processes 1 --home /data/server/python-envs/graphite --pythonpath /opt/graphite/webapp/graphite --wsgi-file=/opt/graphite/conf/graphite.wsgi --enable-threads --thunder-lock&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/images/graphite/web.jpg&quot; title=&quot;graphite web&quot;&gt;
&lt;h2 id=&quot;配置数据收集服务&quot;&gt;&lt;a href=&quot;#配置数据收集服务&quot; class=&quot;headerlink&quot; title=&quot;配置数据收集服务&quot;&gt;&lt;/a&gt;配置数据收集服务&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cp /opt/graphite/conf/carbon.conf.example /opt/graphite/conf/carbon.conf&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cp /opt/graphite/conf/storage-schemas.conf.example /opt/graphite/conf/storage-schemas.conf&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cp /opt/graphite/conf/whitelist.conf.example /opt/graphite/conf/whitelist.conf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编辑&lt;code&gt;/opt/graphite/lib/carbon/util.py&lt;/code&gt;，将&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from twisted.scripts._twistd_unix import daemonize
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;替换成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import daemonize
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;否则启动cabon时会遇到&lt;code&gt;ImportError: cannot import name daemonize&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置存储白名单&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;vim /opt/graphite/conf/whitelist.conf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;^test\..*
^server\..*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即只存储以&lt;code&gt;test.&lt;/code&gt;和&lt;code&gt;server.&lt;/code&gt;开头的metrics。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置存储Schemas&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;vim /opt/graphite/conf/storage-schemas.conf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[server]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pattern = ^server\..*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;retentions = 60s:1d,5m:7d,15m:3y&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[default]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pattern = ^test\..*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;retentions = 60s:1d,5m:7d&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的配置，会对于&lt;code&gt;test.&lt;/code&gt;开头的metrics，以60秒为精度存储一天，以5分钟为精度存储7天。即查询一天内的数据时，可以精确到1分钟，查询7天内的数据时，只能精确到5分钟。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动cabon&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;python /opt/graphite/bin/carbon-cache.py --config=/opt/graphite/conf/carbon.conf --debug start&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;收集监控数据&quot;&gt;&lt;a href=&quot;#收集监控数据&quot; class=&quot;headerlink&quot; title=&quot;收集监控数据&quot;&gt;&lt;/a&gt;收集监控数据&lt;/h1&gt;&lt;p&gt;etsy开源了一个叫&lt;a href=&quot;https://github.com/etsy/statsd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;statsd&lt;/a&gt;的daemon，可用于将监控数据收集到graphite，但那玩意是nodejs写的。&lt;/p&gt;
&lt;p&gt;为了保持方案的简单，采用&lt;code&gt;crontab&lt;/code&gt;的方式，利用&lt;a href=&quot;https://gist.github.com/jqlblue/c7473473f8a7357167b8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shell脚本&lt;/a&gt;将要收集的数据通过udp协议直接发送至graphite。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#!/bin/sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;HOST=$(hostname | awk -F&amp;apos;.&amp;apos; &amp;apos;&amp;#123;print $1&amp;#125;&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;IDC=&amp;quot;local&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SYSTEM_LOAD=$(awk &amp;apos;&amp;#123;print $1&amp;#125;&amp;apos; /proc/loadavg)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SYSTEM_MEMORY_FREE=$(free -m | grep &amp;apos;buffers/cache&amp;apos; | awk &amp;apos;&amp;#123;print $NF&amp;#125;&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SYSTEM_SWAP_USE=$(free -m | grep &amp;apos;Swap&amp;apos; | awk &amp;apos;&amp;#123;print $(NF-1)&amp;#125;&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SYSTEM_DISK_USED=$(df -h | grep &amp;apos;/&amp;apos; | awk &amp;apos;BEGIN&amp;#123;_max=0&amp;#125;&amp;#123;len=length($5);i=substr($5,0,len-1);if(_max&amp;lt;i)&amp;#123;_max=i&amp;#125;&amp;#125;END&amp;#123;print _max&amp;#125;&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TIMESTAMP=$(date +%s)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;### send to garphite through udp port 2003 ########&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo -n &amp;quot;server.$IDC.$HOST.system.load $SYSTEM_LOAD $TIMESTAMP&amp;quot; &amp;gt; /dev/udp/127.0.0.1/2003&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo -n &amp;quot;server.$IDC.$HOST.system.memory_free $SYSTEM_MEMORY_FREE $TIMESTAMP&amp;quot; &amp;gt; /dev/udp/127.0.0.1/2003&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo -n &amp;quot;server.$IDC.$HOST.system.swap_used $SYSTEM_SWAP_USED $TIMESTAMP&amp;quot; &amp;gt; /dev/udp/127.0.0.1/2003&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo -n &amp;quot;server.$IDC.$HOST.system.disk_used $SYSTEM_DISK_USED $TIMESTAMP&amp;quot; &amp;gt; /dev/udp/127.0.0.1/2003&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;/images/graphite/data-view.jpg&quot; title=&quot;graphite monitor data view&quot;&gt;
&lt;p&gt;&lt;em&gt;监控数据收集和展示流图&lt;/em&gt;&lt;/p&gt;
&lt;img src=&quot;/images/graphite/data-flow.jpg&quot; title=&quot;graphite monitor data flow&quot;&gt;
&lt;h1 id=&quot;搭建cabot报警服务&quot;&gt;&lt;a href=&quot;#搭建cabot报警服务&quot; class=&quot;headerlink&quot; title=&quot;搭建cabot报警服务&quot;&gt;&lt;/a&gt;搭建cabot报警服务&lt;/h1&gt;&lt;p&gt;&lt;code&gt;cabot&lt;/code&gt;是一个轻量级的监控报警服务。其报警可以基于：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;graphite收集的监控数据
url的响应内容和状态码
jenkins编译任务的状态
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;安装依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo gem sources --remove http://rubygems.org/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo gem sources -a http://ruby.taobao.org/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo gem install foreman&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;因为foreman要求ruby版本需要在1.9.3以上，如果系统自带ruby版本过低，可以通过rvm安装ruby，再安装foreman。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo yum install npm&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo npm install -g coffee-script less@1.3 --registry http://registry.npmjs.org/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;初始化目录&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo su appops&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mkdir /data/server/alter&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd /data/server/alter&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mkvirtualenv cabot&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;安装cabot&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git clone https://github.com/arachnys/cabot.git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd cabot&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cp conf/development.env.example conf/development.env&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改&lt;a href=&quot;https://gist.github.com/jqlblue/165d50a949cd4aae2191&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;setup.py&lt;/a&gt;，添加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;apos;MySQL-python==1.2.5&amp;apos;,
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;python setup.py install&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/bin/sh ./setup_dev.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;配置cabot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用foreman启动cabot时，会先读取&lt;code&gt;.foreman&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vi: set ft=yaml :

procfile: Procfile.dev
env: conf/development.env
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Procfile.dev&lt;/code&gt;内容如下：&lt;br&gt;    web:       python manage.py runserver 0.0.0.0:$PORT&lt;br&gt;    celery:    celery -A cabot worker –loglevel=DEBUG -B -c 8 -Ofair&lt;/p&gt;
&lt;p&gt;其中定义了启动cabot-web和celery任务队列时使用的命令，针对不同的环境，可以酌情修改&lt;code&gt;.foreman&lt;/code&gt;和对应的&lt;code&gt;procfile&lt;/code&gt;及&lt;code&gt;env&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;对于邮件报警，需要修改&lt;a href=&quot;https://gist.github.com/jqlblue/a6329a7649be16e92df4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;conf/development.env&lt;/a&gt;中的如下内容：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;DATABASE_URL -- 数据库配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TIME_ZONE -- 时区&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ADMIN_EMAIL&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CABOT_FROM_EMAIL&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CELERY_BROKER_URL -- celery任务队列配置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SES_HOST -- smtp host&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SES_USER -- 发送邮件的用户&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SES_PASS -- 发送邮件用户的密码&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SES_PORT -- smtp port&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动cabot&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;nohup foreman start 2&amp;gt;&amp;amp;1 &amp;gt; /dev/null &amp;amp;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/images/graphite/cabot_service.jpg&quot; title=&quot;cabot service&quot;&gt;
&lt;img src=&quot;/images/graphite/cabot_service_check.jpg&quot; title=&quot;cabot service check&quot;&gt;
&lt;img src=&quot;/images/graphite/cabot_service_check_detail.jpg&quot; title=&quot;cabot service check detail&quot;&gt;
&lt;p&gt;reference：&lt;/p&gt;
&lt;p&gt;[^1] &lt;a href=&quot;http://graphite.readthedocs.org/en/latest/overview.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://graphite.readthedocs.org/en/latest/overview.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^2] &lt;a href=&quot;http://cabotapp.com/qs/quickstart.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cabotapp.com/qs/quickstart.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^3] &lt;a href=&quot;https://gist.github.com/jirutka/8636572&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/jirutka/8636572&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      如何使用python实现的开源系统graphite搭建监控系统，并结合定时任务，收集服务器和webserver运行状态，配合cabot进行相关监控数值的报警
    
    </summary>
    
      <category term="devops" scheme="http://debughacks.github.io/categories/devops/"/>
    
    
      <category term="devops" scheme="http://debughacks.github.io/tags/devops/"/>
    
      <category term="monitor" scheme="http://debughacks.github.io/tags/monitor/"/>
    
  </entry>
  
  <entry>
    <title>在Linux服务器之间同步用户账号</title>
    <link href="http://debughacks.github.io/2014/08/02/synchronization-user-account-on-linux/"/>
    <id>http://debughacks.github.io/2014/08/02/synchronization-user-account-on-linux/</id>
    <published>2014-08-02T09:26:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html">&lt;p&gt;最近负责运帷的同事离职了，原先由运帷可以一手搞定的事情，分摊到了几个研发同事的身上。但是多人公用一个账号，实在感觉不爽。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;由于公司没有几台服务器上，所以可以逐一登录服务器创建新账号。但是对于一个码农而言，这不科学，它违背了&lt;code&gt;DRY&lt;/code&gt;原则。&lt;/p&gt;
&lt;p&gt;当然，也可以配置一个ldap服务器，修改linux用户登录使用ldap验证。但这让我有一种从火窟跳到冰窖的感觉。先不说是否能搞定配置的事情，引入的这个ldap，又会变成另外一个坑。&lt;/p&gt;
&lt;p&gt;昨天听一个同事时，我们来上班，要对得起自己的良心。所以我不能让上班时间在纠结中度过，用土方法解决问题先。&lt;/p&gt;
&lt;h2 id=&quot;同步步骤&quot;&gt;&lt;a href=&quot;#同步步骤&quot; class=&quot;headerlink&quot; title=&quot;同步步骤&quot;&gt;&lt;/a&gt;同步步骤&lt;/h2&gt;&lt;p&gt;因为目前有一台服务器是登录的跳板机，所以只需要在跳板机上创建好新账号，然后把用户账号同步到其他机器上就好。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果没有跳板机，也可以随便选一台服务器（A），在A服务器上创建账号，并同步到其他机器上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在跳板机上创建用户账号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在要同步的服务器上创建账号，并将该用户在跳板机上如下文件中对于的条目追加到要同步到机器上&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;/etc/passwd&lt;/code&gt;， &lt;code&gt;/etc/group&lt;/code&gt;, &lt;code&gt;/etc/shadow&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以跳板机ip：&lt;code&gt;192.168.1.1&lt;/code&gt;，要同步的服务器：&lt;code&gt;192.168.1.8&lt;/code&gt;，新增用户名：&lt;code&gt;jqlblue&lt;/code&gt;为例，登录跳板机执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ useradd jqlblue
$ ssh -l root -p 22 192.168.1.8 &amp;quot;useradd jqlblue&amp;quot;
$ grep jqlblue: /etc/group | xargs -I {} ssh -l root -p 22 192.168.1.8 &amp;quot;echo {} &amp;gt;&amp;gt; /etc/group&amp;quot;
$ grep jqlblue: /etc/passwd | xargs -I {} ssh -l root -p 22 192.168.1.8 &amp;quot;echo {} &amp;gt;&amp;gt; /etc/passwd&amp;quot;
$ grep jqlblue: /etc/shadow | xargs -I {} ssh -l root -p 22 192.168.1.8 &amp;quot;echo {} &amp;gt;&amp;gt; /etc/shadow&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述操作，编写成脚本即可。当需要新增或者修改用户时，只需在跳板机上进行操作，同步问题，由脚本来完成。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;上述脚本要在生产环境使用，需要注意如下问题：&lt;/em&gt;&lt;br&gt;    1 新增用户时，uid或者gid重复的问题&lt;br&gt;    2 修改用户密码或者组信息后，产生多条记录的问题&lt;/p&gt;
</content>
    
    <summary type="html">
    
      如何在多台linux服务器之间同步用户账号，linux操作系统用户登录过程解析
    
    </summary>
    
      <category term="linux" scheme="http://debughacks.github.io/categories/linux/"/>
    
      <category term="devops" scheme="http://debughacks.github.io/categories/linux/devops/"/>
    
    
      <category term="linux" scheme="http://debughacks.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>0012</title>
    <link href="http://debughacks.github.io/2014/07/05/0012/"/>
    <id>http://debughacks.github.io/2014/07/05/0012/</id>
    <published>2014-07-05T05:59:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html">&lt;p&gt;从小到大，我最不喜欢的就是离别。但这却是我们每天都要经历的事情，只是或长，或短。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前些天整理屋子时翻出刚毕业时的照片，老婆打趣地说：“你的青葱都去哪儿了？”。&lt;/p&gt;
&lt;p&gt;我自然只能说：“都给你了啊！”。&lt;/p&gt;
&lt;p&gt;老婆呵呵一笑说道：“你一天才陪我多会儿啊，你的青葱，都给了你的电脑，你的代码。一天就知道敲敲敲，赶紧去喝点水。家里快没米了，一会去超市拎袋米回来。。。”&lt;/p&gt;
&lt;h2 id=&quot;十年&quot;&gt;&lt;a href=&quot;#十年&quot; class=&quot;headerlink&quot; title=&quot;十年&quot;&gt;&lt;/a&gt;十年&lt;/h2&gt;&lt;p&gt;在休假的期间，去山东找了一趟儿时的大哥。&lt;/p&gt;
&lt;p&gt;在不太拥挤的人群中，第一眼就找出了那个熟悉的身影。当年60米短跑健将的风采已然不再，零零星星的白发，也小成气候。&lt;/p&gt;
&lt;p&gt;见面后，吃饭是少不了的。在我的强烈要求下，找了一家兰州拉面馆。份量的确实在，但却是另一种滋味。吃着我从北京带过去的五香花生米，聊着各自的境况。&lt;/p&gt;
&lt;p&gt;本来想一起看看世界杯，找找儿时的感觉，可是因为电视线路发生了故障，于是晃悠到了一家网吧。原以为可以畅快淋漓地玩几把路人局，结果屡屡被虐。&lt;/p&gt;
&lt;p&gt;回来的车上，想起来这个城市已经十年。&lt;/p&gt;
&lt;h2 id=&quot;在路上&quot;&gt;&lt;a href=&quot;#在路上&quot; class=&quot;headerlink&quot; title=&quot;在路上&quot;&gt;&lt;/a&gt;在路上&lt;/h2&gt;&lt;p&gt;我是个胸无大志的人，所以每当别人问起我的梦想，问起我的三年，五年规划，只会让我更加茫然。&lt;/p&gt;
&lt;p&gt;因为录取通知书中附带的地图显示，我们学校就在长城脚下，所以我就兴高采烈地来了帝都。我盼望着起早可以去长城跑步。&lt;/p&gt;
&lt;p&gt;报到时，我就傻眼了：去长城不止得花钱，而且就算花一上午，我也不一定能跑地到。&lt;/p&gt;
&lt;p&gt;做毕设时，无意被导师介绍到了她同学的公司，然后就顺利地留了下来，随之开启了我的码农之路。&lt;/p&gt;
&lt;p&gt;期间不断遇到很好的上司，不错的同事，一直过地不好不坏。&lt;/p&gt;
&lt;h2 id=&quot;再见360&quot;&gt;&lt;a href=&quot;#再见360&quot; class=&quot;headerlink&quot; title=&quot;再见360&quot;&gt;&lt;/a&gt;再见360&lt;/h2&gt;&lt;p&gt;我也不是一个睿智的人。虽然我老婆经常说：你没吃过猪肉，你还没见过猪跑吗？&lt;/p&gt;
&lt;p&gt;我这样的人，或许就像一颗树芽。&lt;/p&gt;
&lt;p&gt;在某个微风和煦的清晨，悄悄地探出头，努力一番，长成一片叶子。又在某个萧瑟的秋夜里，落在了地上，随着一场雨水，和在了泥土中。&lt;/p&gt;
&lt;p&gt;轻轻地来，轻轻地走，不被任何人察觉。&lt;/p&gt;
&lt;p&gt;虽然我注定是一片叶子，但是我曾努力去绽放成为一朵绚丽的花，这就已经足够。&lt;/p&gt;
&lt;p&gt;再见360，希望你们一切都好。&lt;/p&gt;
&lt;img src=&quot;/images/0012.jpg&quot; title=&quot;card&quot;&gt;
</content>
    
    <summary type="html">
    
      0012
    
    </summary>
    
      <category term="essay" scheme="http://debughacks.github.io/categories/essay/"/>
    
    
      <category term="essay" scheme="http://debughacks.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>手动刷入Android 4.4.3 OTA 更新包</title>
    <link href="http://debughacks.github.io/2014/06/08/manual-update-android-ota-update/"/>
    <id>http://debughacks.github.io/2014/06/08/manual-update-android-ota-update/</id>
    <published>2014-06-07T22:35:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html">&lt;p&gt;今天上午，nexus4终于收到了google android 4.4.3 的ota更新包，但是从上午到晚上，愣是没有下载下来。这就像因为长智齿而牙龈肿痛的你被人请吃麻辣香锅那样难受。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;作为一个吃货，怎么能受得了这份煎熬？就算用半边牙齿，也不能虚此行。&lt;/p&gt;
&lt;p&gt;当然，作为码农。就算被铜墙铁壁包围，也要想办法越过长城，对世界说出那句“hello world”。&lt;/p&gt;
&lt;h1 id=&quot;诊断&quot;&gt;&lt;a href=&quot;#诊断&quot; class=&quot;headerlink&quot; title=&quot;诊断&quot;&gt;&lt;/a&gt;诊断&lt;/h1&gt;&lt;p&gt;更新包为什么下不下来，这肯定是有原因的。对手机的网络请求进行抓包，应该可以查明原因。&lt;/p&gt;
&lt;p&gt;如何对手机进行抓包，可以参见之前的博文“&lt;a href=&quot;http://jqlblue.github.io/2013/08/04/guide-of-packet-mobile-capture/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;移动应用无线抓包指南&lt;/a&gt;”。&lt;br&gt;如果手机使用的是家里的wifi网络，那对手机进行抓包会非常easy。两步即可：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 在电脑上对fiddle进行设置
2. 修改手机上的网络设置，设置代理，其中代理服务器的ip就是电脑的ip
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;如何设置可参见博文&lt;a href=&quot;http://jqlblue.github.io/2013/08/04/guide-of-packet-mobile-capture/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;移动应用无线抓包指南&lt;/a&gt;”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;设置完成后，再请求时发现更新包的无法下载。&lt;br&gt;&lt;img src=&quot;/images/mobile/android-4.4.3-update.png&quot; title=&quot;android-4.4.3-update&quot;&gt;&lt;/p&gt;
&lt;p&gt;这时有两种方案：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 通过代理等途径，获取更新包域名的对应的ip，绑定host。
2. 因为已经抓包获取到了更新包的下载地址，可以通过代理等途径，下载更新包并手动刷入。
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;因为在手机上设置的代理服务器是电脑的ip，所以只要在电脑上绑定host，手机上也会生效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于更新包下载地址的域名是动态的，所以没法绑定host。于是只有选择下载更新包，手动刷入。&lt;/p&gt;
&lt;h1 id=&quot;下载4-4-3-OTA-更新号&quot;&gt;&lt;a href=&quot;#下载4-4-3-OTA-更新号&quot; class=&quot;headerlink&quot; title=&quot;下载4.4.3 OTA 更新号&quot;&gt;&lt;/a&gt;下载4.4.3 OTA 更新号&lt;/h1&gt;&lt;p&gt;为了方便，已下载针对nexus4的android4.4.3的ota更新包。需要的，可直接通过如下地址下载&lt;a href=&quot;http://pan.baidu.com/s/1mgjxxLA#dir/path=%2Fsoft%2Fandroid-4.4.3-update%2Fkitkat-4.4.3-update&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-4.4.3-ota&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;使用adb手动刷入OTA更新包&quot;&gt;&lt;a href=&quot;#使用adb手动刷入OTA更新包&quot; class=&quot;headerlink&quot; title=&quot;使用adb手动刷入OTA更新包&quot;&gt;&lt;/a&gt;使用adb手动刷入OTA更新包&lt;/h1&gt;&lt;h2 id=&quot;手动刷入的准备工作&quot;&gt;&lt;a href=&quot;#手动刷入的准备工作&quot; class=&quot;headerlink&quot; title=&quot;手动刷入的准备工作&quot;&gt;&lt;/a&gt;手动刷入的准备工作&lt;/h2&gt;&lt;p&gt;在手动刷入更新包时，除了下载更新包，还需要做如下准备工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在手机的&lt;code&gt;开发者选项&lt;/code&gt;中，开启&lt;code&gt;USB调试&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在&lt;code&gt;设置&lt;/code&gt;，&lt;code&gt;关于手机&lt;/code&gt;中，狂点&lt;code&gt;版本号&lt;/code&gt;，可开启&lt;code&gt;开发者选项&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在电脑上使用usb线连接手机&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;手机上应该会出现如下画面。选择&lt;code&gt;允许&lt;/code&gt;&lt;/p&gt;
&lt;img src=&quot;/images/mobile/android-usb-debug.png&quot; title=&quot;安卓usb调试&quot;&gt;
&lt;p&gt;使用usb连接手机后，电脑上可能会自动安装相关驱动程序，请耐心等待完成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载adb&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;adb&lt;/code&gt;包含在android的sdk中，但是我们只需要&lt;code&gt;adb.exe&lt;/code&gt;, &lt;code&gt;AdbWinApi.dll&lt;/code&gt;, &lt;code&gt;AdbWinUsbApi.dll&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果不想去下载android的sdk，可以通过如下地址下载&lt;a href=&quot;http://pan.baidu.com/s/1mgjxxLA#dir/path=%2Fsoft%2Fandroid-4.4.3-update%2Fadb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;刷机adb&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下载完成后，解压到某个目录，如&lt;code&gt;D:\soft\nexus4\Tools&lt;/code&gt;，在命令行执行：&lt;br&gt;    cd D:\soft\nexus4\Tools&lt;br&gt;    d:&lt;br&gt;    adb.exe devices&lt;/p&gt;
&lt;p&gt;如果看到下图，说明准备工作告一段落。如果没有，可能是相关驱动安装地有问题，可自行查阅解决。&lt;/p&gt;
&lt;img src=&quot;/images/mobile/android-adb-devices.png&quot; title=&quot;安卓adb devices&quot;&gt;
&lt;h2 id=&quot;开刷&quot;&gt;&lt;a href=&quot;#开刷&quot; class=&quot;headerlink&quot; title=&quot;开刷&quot;&gt;&lt;/a&gt;开刷&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;关机，然后按住&lt;code&gt;音量下键&lt;/code&gt;和&lt;code&gt;电源键&lt;/code&gt;，进入fastboot模式：&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/images/mobile/android-fastboot.png&quot; title=&quot;安卓fastboot&quot;&gt;
&lt;ul&gt;
&lt;li&gt;通过按&lt;code&gt;音量上下键&lt;/code&gt;进行切换，切换到&lt;code&gt;Recovery Mode&lt;/code&gt;模式，按&lt;code&gt;电源键&lt;/code&gt;选择进入：&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/images/mobile/android-recovery-mode.png&quot; title=&quot;安卓recovery-mode&quot;&gt;
&lt;p&gt;此时，你可以看到一个倒地的机器人：&lt;/p&gt;
&lt;img src=&quot;/images/mobile/android-recovery-mode-2.png&quot; title=&quot;安卓recovery-mode&quot;&gt;
&lt;ul&gt;
&lt;li&gt;按&lt;code&gt;电源键&lt;/code&gt;，然后再迅速按&lt;code&gt;音量上键&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这一步比较艰难，需要多尝试几次&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直到看到如下界面：&lt;/p&gt;
&lt;img src=&quot;/images/mobile/android-apply-update.png&quot; title=&quot;安卓adb update&quot;&gt;
&lt;p&gt;再按&lt;code&gt;音量上下键&lt;/code&gt;进行切换，切换到&lt;code&gt;apply update from ADB&lt;/code&gt;，按&lt;code&gt;电源键&lt;/code&gt;选择进入：&lt;/p&gt;
&lt;img src=&quot;/images/mobile/android-sideload.png&quot; title=&quot;安卓sideload&quot;&gt;
&lt;ul&gt;
&lt;li&gt;通过USB再次连接电脑和手机&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在命令行执行：&lt;br&gt;    adb.exe sideload kitkat-4.4.3.zip&lt;/p&gt;
&lt;img src=&quot;/images/mobile/android-adb-sideload.png&quot; title=&quot;安卓 adb sideload&quot;&gt;
&lt;p&gt;手机上将会出现如下界面：&lt;/p&gt;
&lt;img src=&quot;/images/mobile/android-update-ota-1.png&quot; title=&quot;安卓 ota update&quot;&gt;
&lt;p&gt;耐心等待，等ota更新包安装完成时，会出现如下界面，按&lt;code&gt;电源键&lt;/code&gt;选择重启即可。&lt;/p&gt;
&lt;img src=&quot;/images/mobile/android-update-ota-2.png&quot; title=&quot;安卓 ota update&quot;&gt;
&lt;p&gt;重启后，会对已安装的应用进行优化。通过&lt;code&gt;设置&lt;/code&gt;，&lt;code&gt;关于手机&lt;/code&gt;查看系统版本，发现已经是&lt;code&gt;4.4.3&lt;/code&gt;。&lt;/p&gt;
&lt;img src=&quot;/images/mobile/android-4.4.3-update-end.jpg&quot; title=&quot;安卓 ota 更新完成&quot;&gt;
</content>
    
    <summary type="html">
    
      下载安卓4.4.3 ota更新包，通过adb手动更新到最新的安卓系统
    
    </summary>
    
      <category term="mobile" scheme="http://debughacks.github.io/categories/mobile/"/>
    
    
      <category term="mobile" scheme="http://debughacks.github.io/tags/mobile/"/>
    
  </entry>
  
  <entry>
    <title>再话Tcpcopy的胞弟gryphon</title>
    <link href="http://debughacks.github.io/2014/05/28/tcpcopy-gryphon-introduction/"/>
    <id>http://debughacks.github.io/2014/05/28/tcpcopy-gryphon-introduction/</id>
    <published>2014-05-28T07:57:00.000Z</published>
    <updated>2016-06-30T08:07:11.000Z</updated>
    
    <content type="html">&lt;p&gt;gryphon是由网易研发，能够模拟千万级别并发用户进行压力测试的一个软件，可用于网络消息推送服务方面的压力测试和传统web服务的压力测试。目前由网易的 &lt;a href=&quot;http://weibo.com/tcpcopy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;王斌&lt;/a&gt;进行维护。更多介绍可参见&lt;a href=&quot;https://github.com/wangbin579/gryphon&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A powerful tool to simulate millions of concurrent users for loading testing&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;gryphon的安装和使用方法分为&lt;code&gt;传统架构方式&lt;/code&gt;和&lt;code&gt;高级架构方式&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;相关角色说明&quot;&gt;&lt;a href=&quot;#相关角色说明&quot; class=&quot;headerlink&quot; title=&quot;相关角色说明&quot;&gt;&lt;/a&gt;相关角色说明&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;gryphon客户端（/usr/local/bin/gryphon）&lt;/li&gt;
&lt;li&gt;intercept拦截进程（/usr/local/bin/intercept）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;测试时，gryphon客户端读取录制的pcap文件（可以通过tcpdump产生），通过&lt;code&gt;Raw Socket&lt;/code&gt;修改请求并发送到测试机。因为这些请求的来源ip可能是模拟的，为了连接的正常关闭，需要拦截测试机的响应包。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;在传统架构下：
1 netfilter-iptables在协议栈将数据包交给内核中的ip_queue模块
2 intercept在用户态通过netlink socket接收内核传来的数据报文
3 将处理后的报文以及对报文的处理意见（ACCEPT，DROP等）传递给内核协议栈
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;figcaption&gt;&lt;span&gt;communication/tc_socket.c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;tc_raw_socket_out_init()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd, n;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    n = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * On Linux when setting the protocol as IPPROTO_RAW,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * then by default the kernel sets the IP_HDRINCL option and&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * thus does not prepend its own IP header.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fd = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;figcaption&gt;&lt;span&gt;communication/tc_interception.c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;tc_nl_event_process(&lt;span class=&quot;keyword&quot;&gt;tc_event_t&lt;/span&gt; *rev)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;            buffer[&lt;span class=&quot;number&quot;&gt;65536&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;    i, pass_through_flag = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;   packet_id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;tc_ip_header_t&lt;/span&gt; *ip_hdr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tc_nl_socket_recv(rev-&amp;gt;fd, buffer, &lt;span class=&quot;number&quot;&gt;65536&lt;/span&gt;) == TC_ERROR)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TC_ERROR;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ip_hdr = tc_nl_ip_header(buffer);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    packet_id = tc_nl_packet_id(buffer);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ip_hdr != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* check if it is the valid user to pass through firewall */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; srv_settings.passed_ips.num; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (srv_settings.passed_ips.ips[i] == ip_hdr-&amp;gt;daddr) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                pass_through_flag = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        tot_resp_packs++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pass_through_flag) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/* pass through the firewall */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            dispose_netlink_packet(rev-&amp;gt;fd, NF_ACCEPT, packet_id);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            tot_copy_resp_packs++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            router_update(srv_settings.old, ip_hdr);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/* drop the packet */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            dispose_netlink_packet(rev-&amp;gt;fd, NF_DROP, packet_id);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TC_OK;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;在高级架构下，是通过在测试机上配置静态路由规则，将响应路由到辅助服务器进行处理。
&lt;/code&gt;&lt;/pre&gt;&lt;img src=&quot;/images/gryphon/raw_socket.jpg&quot; title=&quot;raw socket&quot;&gt;
&lt;h1 id=&quot;传统架构下安装并使用&quot;&gt;&lt;a href=&quot;#传统架构下安装并使用&quot; class=&quot;headerlink&quot; title=&quot;传统架构下安装并使用&quot;&gt;&lt;/a&gt;传统架构下安装并使用&lt;/h1&gt;&lt;p&gt;在传统架构下，&lt;code&gt;intercept拦截进程&lt;/code&gt;需要运行在测试机上，用于拦截测试机的响应包。&lt;/p&gt;
&lt;h2 id=&quot;安装与使用&quot;&gt;&lt;a href=&quot;#安装与使用&quot; class=&quot;headerlink&quot; title=&quot;安装与使用&quot;&gt;&lt;/a&gt;安装与使用&lt;/h2&gt;&lt;h3 id=&quot;在测试机安装intercept拦截进程&quot;&gt;&lt;a href=&quot;#在测试机安装intercept拦截进程&quot; class=&quot;headerlink&quot; title=&quot;在测试机安装intercept拦截进程&quot;&gt;&lt;/a&gt;在测试机安装intercept拦截进程&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;git clone git://github.com/wangbin579/tcpcopy.git
cd tcpcopy
sh autogen.sh
./configure --prefix=/usr/local/tcocopy --enable-single
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;安装gryphon客户端&quot;&gt;&lt;a href=&quot;#安装gryphon客户端&quot; class=&quot;headerlink&quot; title=&quot;安装gryphon客户端&quot;&gt;&lt;/a&gt;安装gryphon客户端&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;git clone git://github.com/wangbin579/gryphon.git
cd gryphon
sh autogen.sh
./configure --prefix=/usr/local/gryphon --enable-single
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;p&gt;以&lt;code&gt;intercept拦截进程&lt;/code&gt;安装在测试机&lt;strong&gt;10.16.15.118&lt;/strong&gt;，应用端口是&lt;strong&gt;80&lt;/strong&gt;，&lt;code&gt;gryphon客户端&lt;/code&gt;安装在&lt;strong&gt;10.16.15.117&lt;/strong&gt;为例，说明gryphon在传统架构下的基本使用方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tcpdump抓包录制pcap文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以在线上服务器抓包录制，并拷贝到&lt;code&gt;gryphon客户端&lt;/code&gt;所在的服务器&lt;strong&gt;10.16.15.117&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tcpdump -i eth0 port 80 -s 0 -w xxx.pcap
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;拦截响应包&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在测试机&lt;strong&gt;10.16.15.118&lt;/strong&gt;上操作&lt;br&gt;    modprobe ip_queue&lt;br&gt;    iptables -I OUTPUT -p tcp –sport 80 -j QUEUE&lt;br&gt;    /usr/local/tcpcopy/bin/intercept&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果内核版本3.5，可以使用nfqueue&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;发送测试请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;code&gt;gryphon客户端&lt;/code&gt;所在服务器&lt;strong&gt;10.16.15.117&lt;/strong&gt;上操作&lt;br&gt;    /usr/local/gryphon/bin/gryphon -x 80-10.16.15.118:80 -f ./xxx.pcap -s 10.16.15.118 -u 1000 -a 2 -c 10.17.15.*&lt;/p&gt;
&lt;p&gt;上述命令，从xxx.pcap抓包文件中提取出访问80端口的用户会话过程，模拟1000个用户，将请求复制到测试机&lt;strong&gt;10.16.15.118&lt;/strong&gt;的&lt;strong&gt;80&lt;/strong&gt;端口中去。其中用户ip地址的范围是10.17.15.*。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-a参数用于加快数据包的发送速度。-a 2代表将数据包之间的发送间隔缩短一半，相当于加速2倍。也可和－i配合，如 －a 10 －i 2048&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;gryphon拦截进程中各个基本参数的释义如下：&lt;br&gt;    gryphon -x historyServerPort-targetServerIP:targetServerPort -f &lt;pcapfile,&gt; -s &lt;intercept address=&quot;&quot;&gt; -u &lt;user num=&quot;&quot;&gt; -c &lt;ip range,=&quot;&quot;&gt;&lt;/ip&gt;&lt;/user&gt;&lt;/intercept&gt;&lt;/pcapfile,&gt;&lt;/p&gt;
&lt;h2 id=&quot;调试步骤&quot;&gt;&lt;a href=&quot;#调试步骤&quot; class=&quot;headerlink&quot; title=&quot;调试步骤&quot;&gt;&lt;/a&gt;调试步骤&lt;/h2&gt;&lt;p&gt;&lt;code&gt;gryphon客户端&lt;/code&gt;和&lt;code&gt;intercept拦截进程&lt;/code&gt;运行时，会在当前工作目录生成&lt;code&gt;error_gryphon.log&lt;/code&gt;，&lt;code&gt;error_intercept.log&lt;/code&gt;日志文件，里面有相关运行信息。当测试过程不能正常工作时，可优先查看相关日志。&lt;/p&gt;
&lt;p&gt;其次就是在测试机或者&lt;code&gt;gryphon客户端&lt;/code&gt;所在的服务器上进行抓包。确保&lt;code&gt;gryphon客户端&lt;/code&gt;发出请求，并且没有收到测试机的响应包，如：&lt;br&gt;&lt;img src=&quot;/images/gryphon/gryphon_tcpdump.png&quot; title=&quot;gryphon tcpdump&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;高级架构下安装并使用&quot;&gt;&lt;a href=&quot;#高级架构下安装并使用&quot; class=&quot;headerlink&quot; title=&quot;高级架构下安装并使用&quot;&gt;&lt;/a&gt;高级架构下安装并使用&lt;/h1&gt;&lt;p&gt;在高级架构下，&lt;code&gt;intercept拦截进程&lt;/code&gt;需要运行在辅助服务上，用于拦截测试机的响应包。&lt;/p&gt;
&lt;h2 id=&quot;安装与使用-1&quot;&gt;&lt;a href=&quot;#安装与使用-1&quot; class=&quot;headerlink&quot; title=&quot;安装与使用&quot;&gt;&lt;/a&gt;安装与使用&lt;/h2&gt;&lt;h3 id=&quot;在测试机安装intercept拦截进程-1&quot;&gt;&lt;a href=&quot;#在测试机安装intercept拦截进程-1&quot; class=&quot;headerlink&quot; title=&quot;在测试机安装intercept拦截进程&quot;&gt;&lt;/a&gt;在测试机安装intercept拦截进程&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;git clone git://github.com/wangbin579/tcpcopy.git
cd tcpcopy
sh autogen.sh
./configure --prefix=/usr/local/adv-tcpcopy --enable-single  --enable-pcap --enable-advanced
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;安装gryphon客户端-1&quot;&gt;&lt;a href=&quot;#安装gryphon客户端-1&quot; class=&quot;headerlink&quot; title=&quot;安装gryphon客户端&quot;&gt;&lt;/a&gt;安装gryphon客户端&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;git clone git://github.com/wangbin579/gryphon.git
cd gryphon
sh autogen.sh
./configure --prefix=/usr/local/adv-gryphon --enable-single --enable-advanced
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;使用方法-1&quot;&gt;&lt;a href=&quot;#使用方法-1&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;p&gt;以&lt;code&gt;intercept拦截进程&lt;/code&gt;安装在辅助服务器&lt;strong&gt;10.16.15.116&lt;/strong&gt;，&lt;code&gt;gryphon客户端&lt;/code&gt;安装在&lt;strong&gt;10.16.15.117&lt;/strong&gt;，测试机&lt;strong&gt;10.16.15.118&lt;/strong&gt;的应用端口是&lt;strong&gt;80&lt;/strong&gt;为例，说明gryphon在高级架构下的使用方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tcpdump抓包录制pcap文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以在线上服务器抓包录制，并拷贝到&lt;code&gt;gryphon客户端&lt;/code&gt;所在的服务器&lt;strong&gt;10.16.15.117&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tcpdump -i eth0 port 80 -s 0 -w xxx.pcap
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;拦截响应包&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在测试机&lt;strong&gt;10.16.15.118&lt;/strong&gt;上设置静态路由，将响应包路由到辅助服务器&lt;strong&gt;10.16.15.116&lt;/strong&gt;&lt;br&gt;    route add -net 10.17.15.0 netmask 255.255.255.0 gw 10.16.15.116&lt;/p&gt;
&lt;p&gt;查看是否设置成功&lt;br&gt;    $ route&lt;br&gt;    Kernel IP routing table&lt;br&gt;    Destination     Gateway         Genmask         Flags Metric Ref    Use Iface&lt;br&gt;    10.17.15.0      10.16.15.116    255.255.255.0   UG    0      0        0 eth0&lt;br&gt;    10.16.14.0      &lt;em&gt;               255.255.254.0   U     0      0        0 eth0&lt;br&gt;    169.254.0.0     &lt;/em&gt;               255.255.0.0     U     0      0        0 eth0&lt;br&gt;    default         10.16.14.1      0.0.0.0         UG    0      0        0 eth0&lt;/p&gt;
&lt;p&gt;如果设置错了，可以删除并重新添加&lt;br&gt;    route del -net 10.17.15.0 netmask 255.255.255.0&lt;/p&gt;
&lt;p&gt;在辅助服务器&lt;strong&gt;10.16.15.116&lt;/strong&gt;上启动intercept拦截进程&lt;br&gt;    /usr/local/adv-tcpcopy/bin/intercept -F ‘tcp and src port 80’&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送测试请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;code&gt;gryphon客户端&lt;/code&gt;所在服务器&lt;strong&gt;10.16.15.117&lt;/strong&gt;上操作&lt;br&gt;    /usr/local/adv-gryphon/bin/gryphon -x 80-10.16.15.118:80 -f ./xxx.pcap -s 10.16.15.116 -u 1000 -c 10.17.15.*&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Reference &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[^1] &lt;a href=&quot;http://www.ibm.com/developerworks/cn/linux/l-ntflt/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ibm.com/developerworks/cn/linux/l-ntflt/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^2] &lt;a href=&quot;http://www.ibm.com/developerworks/cn/linux/l-netlink/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ibm.com/developerworks/cn/linux/l-netlink/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^3] &lt;a href=&quot;http://www.tenouk.com/Module42a.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.tenouk.com/Module42a.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      tcpcopy的胞弟gryphon的介绍，安装，测试和使用
    
    </summary>
    
      <category term="devops" scheme="http://debughacks.github.io/categories/devops/"/>
    
    
      <category term="devops, linux" scheme="http://debughacks.github.io/tags/devops-linux/"/>
    
  </entry>
  
  <entry>
    <title>一个使用Curl请求https资源的问题排查</title>
    <link href="http://debughacks.github.io/2014/05/14/a-trouble-in-request-https-in-curl/"/>
    <id>http://debughacks.github.io/2014/05/14/a-trouble-in-request-https-in-curl/</id>
    <published>2014-05-14T06:50:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html">&lt;p&gt;昨天临下班前，应客户端大牛的要求，开发了一个返回下载服务器ip列表的接口，用于在客户端指定host以解决用户下载时遭遇运营商dns劫持的问题。&lt;/p&gt;
&lt;p&gt;开发时略微有少许忐忑，但测试时一切顺利，于是就轻松地回家了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;早上一上线代码，就收到了通过&lt;code&gt;sentry&lt;/code&gt;发出的报警邮件。原以为是缓存没有及时更新的问题，立马手动进行更新。但还是没有通过接口获取到相关ip。随即回滚代码，重新上线。&lt;/p&gt;
&lt;h1 id=&quot;排查过程&quot;&gt;&lt;a href=&quot;#排查过程&quot; class=&quot;headerlink&quot; title=&quot;排查过程&quot;&gt;&lt;/a&gt;排查过程&lt;/h1&gt;&lt;p&gt;后来下线一台服务器进行调试时发现，在调用ops提供的接口获取ip列表时没有获取到返回数据，而相关接口是&lt;code&gt;https&lt;/code&gt;的。&lt;/p&gt;
&lt;p&gt;再跟踪请求资源的函数发现，相关函数没有对&lt;code&gt;https&lt;/code&gt;请求做特殊处理。相关函数实现如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public static function get($url, array $headers = array(), $timeout = 5)
{
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, $url);

    if ($headers) {
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    }

    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    $content = curl_exec($ch);
    $response = curl_getinfo($ch);

    curl_close($ch);

    if ($response[&amp;apos;http_code&amp;apos;] == 200) {
        return $content;
    }

    return null;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这或许就是昨天那少许忐忑的缘由。于是增加如下代码，测试通过后重新上线。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (substr($url, 0, 5) == &amp;apos;https&amp;apos;) {
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;进一步排查&quot;&gt;&lt;a href=&quot;#进一步排查&quot; class=&quot;headerlink&quot; title=&quot;进一步排查&quot;&gt;&lt;/a&gt;进一步排查&lt;/h1&gt;&lt;p&gt;线上的问题虽然暂时解决了，但是在问题解决之前，测试机上是正常的，这是为什么呢？&lt;/p&gt;
&lt;h2 id=&quot;在命令行运行curl排查问题&quot;&gt;&lt;a href=&quot;#在命令行运行curl排查问题&quot; class=&quot;headerlink&quot; title=&quot;在命令行运行curl排查问题&quot;&gt;&lt;/a&gt;在命令行运行curl排查问题&lt;/h2&gt;&lt;p&gt;在命令行使用curl请求ops的接口，其中线上服务器的运行结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl &amp;apos;https://x.x.x.x/get_ips&amp;apos;

curl: (60) SSL certificate problem, verify that the CA cert is OK. Details:
error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed
More details here: http://curl.haxx.se/docs/sslcerts.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试机上可以正常获取到结果。&lt;/p&gt;
&lt;p&gt;然后分别查看curl的版本和curl使用的动态连接库，都没有发现差异&lt;br&gt;    $ /usr/bin/curl -V&lt;br&gt;    $ type curl&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/bin/curl
$ ldd /usr/bin/curl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再查看上面的错误，发现可能是&lt;code&gt;https&lt;/code&gt;证书的问题。于是添加&lt;code&gt;--verbose&lt;/code&gt;参数，再次使用curl进行请求，以获取更多交互信息。&lt;/p&gt;
&lt;p&gt;截取部分输出如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl &amp;apos;https://x.x.x.x/get_ips&amp;apos; --verbose

* About to connect() to x.x.x.x port 80
*   Trying x.x.x.x... connected
* Connected to x.x.x.x (x.x.x.x) port 80
* successfully set certificate verify locations:
*   CAfile: /etc/pki/tls/certs/ca-bundle.crt
CApath: none
* SSLv2, Client hello (1):
SSLv3, TLS handshake, Server hello (2):
SSLv3, TLS handshake, CERT (11):
SSLv3, TLS alert, Server hello (2):
SSL certificate problem, verify that the CA cert is OK. Details:
error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed
* Closing connection #0
curl: (60) SSL certificate problem, verify that the CA cert is OK. Details:
error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed
More details here: http://curl.haxx.se/docs/sslcerts.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可见使用的证书的是&lt;code&gt;/etc/pki/tls/certs/ca-bundle.crt&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;使用测试机上的证书替换线上服务器的证书后，问题解决。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果没有可用的证书，可以使用如下方法：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ curl http://curl.haxx.se/ca/cacert.pem -o /etc/pki/tls/certs/ca-bundle.crt
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;问题总结&quot;&gt;&lt;a href=&quot;#问题总结&quot; class=&quot;headerlink&quot; title=&quot;问题总结&quot;&gt;&lt;/a&gt;问题总结&lt;/h1&gt;&lt;p&gt;在请求https的资源时，遇到证书不匹配的问题，一般的工具都有不进行https证书验证的选项，比如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget &amp;apos;https://x.x.x.x/get_ips&amp;apos; --no-check-certificate
$ curl &amp;apos;https://x.x.x.x/get_ips&amp;apos; -k
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然，也可以在请求时指定证书，或者对使用的https ca证书进行更新。&lt;/p&gt;
&lt;p&gt;reference:&lt;br&gt;[^1] &lt;a href=&quot;http://curl.haxx.se/docs/sslcerts.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://curl.haxx.se/docs/sslcerts.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      排查在linux环境下，在某些服务器上，使用curl请求https资源发生证书验证失败的问题
    
    </summary>
    
      <category term="php" scheme="http://debughacks.github.io/categories/php/"/>
    
    
      <category term="linux" scheme="http://debughacks.github.io/tags/linux/"/>
    
      <category term="php" scheme="http://debughacks.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Php中的单例模式面面观</title>
    <link href="http://debughacks.github.io/2014/04/26/singleton-pattern-in-php/"/>
    <id>http://debughacks.github.io/2014/04/26/singleton-pattern-in-php/</id>
    <published>2014-04-26T12:47:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html">&lt;p&gt;最近在面试时发现好多人都喜欢在简历中添加“熟悉各种设计模式”那一项。但也不乏对于最为简单的单例，也仅限于书本上的一点认知，所以扯一扯php中单例模式的几种使用场景。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;何为单例模式&quot;&gt;&lt;a href=&quot;#何为单例模式&quot; class=&quot;headerlink&quot; title=&quot;何为单例模式&quot;&gt;&lt;/a&gt;何为单例模式&lt;/h1&gt;&lt;p&gt;单例模式属于创建型的应用模式，可以确保某一个类只有一个实例。这在获取数据库，缓存服务器的连接句柄，以及获取配置信息方面非常方便。&lt;/p&gt;
&lt;p&gt;使用单例模式，可以减少在一次web请求中多次连接数据库或者解析配置文件等操作对系统资源的消耗，也可以避免大量的new操作。&lt;/p&gt;
&lt;p&gt;其UML结构图如下：&lt;/p&gt;
&lt;img src=&quot;/images/pattern/singleton-uml.png&quot; title=&quot;singleton-uml&quot;&gt;
&lt;p&gt;在php中实现单例模式需要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要一个静态变量保存实例&lt;/li&gt;
&lt;li&gt;需要提供一个公共的静态方法，用于返回需要获取的实例&lt;/li&gt;
&lt;li&gt;需要防止外部程序通过new和clone等操作产生相关实例，从而失去单例模式的意义&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;代码实现解析&quot;&gt;&lt;a href=&quot;#代码实现解析&quot; class=&quot;headerlink&quot; title=&quot;代码实现解析&quot;&gt;&lt;/a&gt;代码实现解析&lt;/h1&gt;&lt;p&gt;一个单例模式的php实现大致如下:&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; $_instance = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__clone&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        trigger_error(&lt;span class=&quot;string&quot;&gt;&quot;clone method is not allowed.&quot;&lt;/span&gt;, E_USER_ERROR);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$_instance === &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$_instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$_instance;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;上述代码通过&lt;code&gt;静态成员变量&lt;/code&gt;保存创建的实例，通过将构造函数设置为私有的，并使用魔术方法&lt;code&gt;__clone&lt;/code&gt;“重载”clone方法以避免通过外部程序获取相关实例。&lt;/p&gt;
&lt;p&gt;由于php中的静态变量包括：&lt;code&gt;静态全局变量&lt;/code&gt;，&lt;code&gt;静态局部变量&lt;/code&gt;，&lt;code&gt;静态成员变量&lt;/code&gt;，所以也可以通过&lt;code&gt;静态局部变量&lt;/code&gt;来保存创建的实例。但是在子类中获取创建的实例时，会遇到一些问题。示例如下：&lt;/p&gt;
&lt;h2 id=&quot;使用静态局部变量&quot;&gt;&lt;a href=&quot;#使用静态局部变量&quot; class=&quot;headerlink&quot; title=&quot;使用静态局部变量&quot;&gt;&lt;/a&gt;使用静态局部变量&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;figcaption&gt;&lt;span&gt;singleton-static.php&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; $_handle = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;_handle = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StdClass();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__clone&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        trigger_error(&lt;span class=&quot;string&quot;&gt;&quot;clone method is not allowed.&quot;&lt;/span&gt;, E_USER_ERROR);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; $_instance = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ($_instance === &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            $_instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $_instance;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getObj&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;_handle;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserModel&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        var_dump(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::getInstance()-&amp;gt;getObj());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//logic no care&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GroupModel&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getGroup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        var_dump(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::getInstance()-&amp;gt;getObj());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//logic no care&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;UserModel::getUser();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;GroupModel::getGroup();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;$ php /.singleton-static.php
object(Singleton)#2 (0) {
}
object(Singleton)#4 (0) {
}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;此例没有获取到唯一实例，因为局部静态变量，也就是在函数中定义的静态变量。其信息是存储在zend vm为每个函数分配的一个私有符号表中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;php中当继承发生时，会进行函数的合并。UserModel中调用的，实际上是合并在UserModel中的getInstance，GroupModel中调用的，也是合并在GroupModel中的getInstance方法。&lt;/p&gt;
&lt;p&gt;因为是在两个不同方法的私有符号表中获取数据，所以取到的不是同一个实例。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以将self换成parent试试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;使用静态成员变量&quot;&gt;&lt;a href=&quot;#使用静态成员变量&quot; class=&quot;headerlink&quot; title=&quot;使用静态成员变量&quot;&gt;&lt;/a&gt;使用静态成员变量&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;figcaption&gt;&lt;span&gt;singleton-static-member.php&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; $_handle = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; $_instance = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;_handle = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StdClass();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__clone&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        trigger_error(&lt;span class=&quot;string&quot;&gt;&quot;clone method is not allowed.&quot;&lt;/span&gt;, E_USER_ERROR);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$_instance === &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$_instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$_instance;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getObj&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;_handle;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserModel&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        var_dump(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::getInstance()-&amp;gt;getObj());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//logic no care&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GroupModel&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getGroup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        var_dump(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::getInstance()-&amp;gt;getObj());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//logic no care&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;UserModel::getUser();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;GroupModel::getGroup();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;$ php /.singleton-static-member.php
object(Singleton)#2 (0) {
}
object(Singleton)#2 (0) {
}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;此时获取到了唯一实例，因为静态成员变量的信息是存储在类结构的 default_static_members 字段，为所有实例所共用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;编写一个单例的基类&quot;&gt;&lt;a href=&quot;#编写一个单例的基类&quot; class=&quot;headerlink&quot; title=&quot;编写一个单例的基类&quot;&gt;&lt;/a&gt;编写一个单例的基类&lt;/h1&gt;&lt;p&gt;有时我们的项目中有个缓存类，还有数据库类，还有个文件操作类。想让这三个类都是单例的话，我们需要实现三个单例，这有点繁琐。于是我们可以创建一个单例的基类，要实现单例的类继承这个基类即可。直接上代码：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; $_instances = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__clone&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        trigger_error(&lt;span class=&quot;string&quot;&gt;&quot;clone method is not allowed.&quot;&lt;/span&gt;, E_USER_ERROR);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $c = get_called_class();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$_instances[$c])) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$_instances[$c] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; $c;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$_instances[$c];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Cache&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; $_handle = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;_connect();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;_connect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;_handle = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StdClass();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getHandle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;_handle;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Db&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; $_handle = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;_connect();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;_connect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;_handle = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StdClass();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getHandle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;_handle;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;reference：&lt;/p&gt;
&lt;p&gt;[^1] &lt;a href=&quot;http://www.php-internals.com/book/?p=chapt05/05-04-class-inherit-abstract&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.php-internals.com/book/?p=chapt05/05-04-class-inherit-abstract&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^2] &lt;a href=&quot;http://zh.wikipedia.org/zh/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zh.wikipedia.org/zh/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^3] &lt;a href=&quot;http://www.phptherightway.com/pages/Design-Patterns.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.phptherightway.com/pages/Design-Patterns.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^4] &lt;a href=&quot;http://rancoud.com/read-phps-opcode/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://rancoud.com/read-phps-opcode/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      php语言中单例设计模式的几种使用场景，静态局部变量，静态成员变量
    
    </summary>
    
      <category term="php" scheme="http://debughacks.github.io/categories/php/"/>
    
    
      <category term="php" scheme="http://debughacks.github.io/tags/php/"/>
    
      <category term="pattren" scheme="http://debughacks.github.io/tags/pattren/"/>
    
  </entry>
  
  <entry>
    <title>如何静态编译Php</title>
    <link href="http://debughacks.github.io/2014/04/09/statically-compile-php/"/>
    <id>http://debughacks.github.io/2014/04/09/statically-compile-php/</id>
    <published>2014-04-09T10:13:00.000Z</published>
    <updated>2016-07-19T09:37:05.000Z</updated>
    
    <content type="html">&lt;p&gt;有些时候，我们写了一个php脚本，但是对方的服务器上没有php环境。&lt;/p&gt;
&lt;p&gt;这时，我们可以通过静态方式编译php，并将相关扩展一起打包进php可执行文件，然后在运行脚本时指定php binary。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;安装步骤如下：&lt;/p&gt;
&lt;h1 id=&quot;准备源文件&quot;&gt;&lt;a href=&quot;#准备源文件&quot; class=&quot;headerlink&quot; title=&quot;准备源文件&quot;&gt;&lt;/a&gt;准备源文件&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wget -c http://www.php.net/get/php-5.5.11.tar.gz/from/this/mirror&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tar zxvf php-5.5.11.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;wget http://pecl.php.net/get/redis-2.2.5.tgz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tar xvf redis-2.2.5.tgz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mv redis-2.2.5 php-5.5.11/ext/redis&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h1&gt;&lt;h2 id=&quot;重新生成configure&quot;&gt;&lt;a href=&quot;#重新生成configure&quot; class=&quot;headerlink&quot; title=&quot;重新生成configure&quot;&gt;&lt;/a&gt;重新生成configure&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cd php-5.5.11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rm -f ./configure&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;./buildconf --force&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;configure&quot;&gt;&lt;a href=&quot;#configure&quot; class=&quot;headerlink&quot; title=&quot;configure&quot;&gt;&lt;/a&gt;configure&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;./configure LDFLAGS=-static \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--prefix=/usr/local/php5-static \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--disable-all \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--enable-shared=no \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--enable-static=yes \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--enable-inline-optimization \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--enable-hash \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--enable-mbstring \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--with-layout=GNU \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--enable-filter \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--with-pcre-regex \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--with-zlib \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--enable-json \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--enable-ctype \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--disable-redis-session \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--enable-redis&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;遇到的问题&quot;&gt;&lt;a href=&quot;#遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;遇到的问题&quot;&gt;&lt;/a&gt;遇到的问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;configure: error: C compiler cannot create executables&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要安装&lt;code&gt;glibc-static&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;yum install glibc-static&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;undefined reference to `zm_startup_password’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要修改&lt;code&gt;ext/standard/basic_functions.c&lt;/code&gt;，具体内容参见 &lt;a href=&quot;https://github.com/thekid/php-src/commit/4c2b86ef006c71523ca2a8a613cc779773a2bcc6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/thekid/php-src/commit/4c2b86ef006c71523ca2a8a613cc779773a2bcc6&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;修改Makefile&quot;&gt;&lt;a href=&quot;#修改Makefile&quot; class=&quot;headerlink&quot; title=&quot;修改Makefile&quot;&gt;&lt;/a&gt;修改Makefile&lt;/h2&gt;&lt;p&gt;将&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;BUILD_CLI = $(LIBTOOL) --mode=link $(CC) -export-dynamic $(CFLAGS_CLEAN) $(EXTRA_CFLAGS) $(EXTRA_LDFLAGS_PROGRAM) $(LDFLAGS) $(PHP_RPATHS) $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_CLI_OBJS) $(EXTRA_LIBS) $(ZEND_EXTRA_LIBS) -o $(SAPI_CLI_PATH)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;BUILD_CGI = $(LIBTOOL) --mode=link $(CC) -export-dynamic $(CFLAGS_CLEAN) $(EXTRA_CFLAGS) $(EXTRA_LDFLAGS_PROGRAM) $(LDFLAGS) $(PHP_RPATHS) $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_CGI_OBJS) $(EXTRA_LIBS) $(ZEND_EXTRA_LIBS) -o $(SAPI_CGI_PATH)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;替换成&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;BUILD_CLI = $(LIBTOOL) --mode=link $(CC) $(CFLAGS_CLEAN) $(EXTRA_CFLAGS) $(EXTRA_LDFLAGS_PROGRAM) $(LDFLAGS) $(PHP_RPATHS) $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_CLI_OBJS) $(EXTRA_LIBS) $(ZEND_EXTRA_LIBS) -all-static -o $(SAPI_CLI_PATH)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;BUILD_CGI = $(LIBTOOL) --mode=link $(CC) $(CFLAGS_CLEAN) $(EXTRA_CFLAGS) $(EXTRA_LDFLAGS_PROGRAM) $(LDFLAGS) $(PHP_RPATHS) $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_CGI_OBJS) $(EXTRA_LIBS) $(ZEND_EXTRA_LIBS) -all-static -o $(SAPI_CGI_PATH)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;即：&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;BUILD_CLI&lt;/code&gt;和&lt;code&gt;BUILD_CGI&lt;/code&gt;对应的行中移除&lt;code&gt;-export-dynamic&lt;/code&gt;，在&lt;code&gt;-o $(SAPI_CGI_PATH)&lt;/code&gt;和&lt;code&gt;-o $(SAPI_CLI_PATH)&lt;/code&gt;之前，添加&lt;code&gt;-all-static&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;make LDFLAGS=-ldl&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo make install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;检查&quot;&gt;&lt;a href=&quot;#检查&quot; class=&quot;headerlink&quot; title=&quot;检查&quot;&gt;&lt;/a&gt;检查&lt;/h1&gt;&lt;p&gt;在命令行执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ file /usr/local/php5-static/bin/php
/usr/local/php5-static/bin/php: ELF 64-bit LSB executable, AMD x86-64, version 1 (SYSV), for GNU/Linux 2.6.9, statically linked, for GNU/Linux 2.6.9, not stripped

$ /usr/local/php5-static/bin/php -m
[PHP Modules]
Core
ctype
date
ereg
filter
hash
json
mbstring
pcre
redis
Reflection
SPL
standard
zlib

[Zend Modules]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为可执行文件中包含了调试信息，所以体积较大&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ll -h /usr/local/php5-static/bin/php
-rwxr-xr-x 1 root root 18M 04-09 18:11 /usr/local/php5-static/bin/php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以通过&lt;code&gt;strip&lt;/code&gt;命令移除调试信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo strip /usr/local/php5-static/bin/php
$ ll -h /usr/local/php5-static/bin/php
-rwxr-xr-x 1 root root 6.1M 04-09 18:11 /usr/local/php5-static/bin/php
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;原始文件大小&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;去除符号表后大小&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;18M&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;6.1M&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt; reference :&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[^1] &lt;a href=&quot;http://www.php.net/manual/zh/install.pecl.static.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.php.net/manual/zh/install.pecl.static.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^2] &lt;a href=&quot;http://d.hatena.ne.jp/shimooka/comment/20110216/1297827454&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://d.hatena.ne.jp/shimooka/comment/20110216/1297827454&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^3] &lt;a href=&quot;http://www.gnu.org/software/libtool/manual/html_node/Link-mode.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.gnu.org/software/libtool/manual/html_node/Link-mode.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^4] &lt;a href=&quot;http://markmail.org/message/cpoenglavs4vwv32&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://markmail.org/message/cpoenglavs4vwv32&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^5] &lt;a href=&quot;https://github.com/thekid/php-src/commit/4c2b86ef006c71523ca2a8a613cc779773a2bcc6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/thekid/php-src/commit/4c2b86ef006c71523ca2a8a613cc779773a2bcc6&lt;/a&gt;&lt;br&gt;[^6] &lt;a href=&quot;http://www.serveridol.com/2014/06/23/configure-error-c-compiler-cannot-create-executables/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.serveridol.com/2014/06/23/configure-error-c-compiler-cannot-create-executables/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      php静态编译，如何在linix操作系统上，通过静态编译的方式，编译一个可以随意拷贝的php可执行文件。
    
    </summary>
    
      <category term="php" scheme="http://debughacks.github.io/categories/php/"/>
    
    
      <category term="linux" scheme="http://debughacks.github.io/tags/linux/"/>
    
      <category term="devops" scheme="http://debughacks.github.io/tags/devops/"/>
    
      <category term="php" scheme="http://debughacks.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件系统如何进行文件存取</title>
    <link href="http://debughacks.github.io/2014/03/29/read-wirite-on-linux-file-system/"/>
    <id>http://debughacks.github.io/2014/03/29/read-wirite-on-linux-file-system/</id>
    <published>2014-03-29T05:32:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html">&lt;p&gt;乍一看，这个题目好像有点小儿科。&lt;/p&gt;
&lt;p&gt;写文件嘛&lt;br&gt;    echo hello &amp;gt; /tmp/foo&lt;/p&gt;
&lt;p&gt;读文件嘛&lt;br&gt;    cat /tmp/foo&lt;/p&gt;
&lt;p&gt;对于普通文件的存取，的确可以使用上面的方法。但是在linux操作系统上，一&lt;br&gt;切都是文件。除了&lt;code&gt;普通文件&lt;/code&gt;，还包括：&lt;code&gt;目录&lt;/code&gt;，&lt;code&gt;符号链接&lt;/code&gt;，&lt;code&gt;IPC Endpoints&lt;/code&gt;（如pipe，unix socket）和&lt;code&gt;设备文件&lt;/code&gt;(块设备，字符设备)。&lt;/p&gt;
&lt;p&gt;当然，本文的重点不在于介绍相关操作技巧，而是希望可以探寻操作背后的机制。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;我们要存取的文件，一般都是保存在普通的磁盘上，通过电磁变换来实现文件的读取和写入。所以我们先从磁盘说起。&lt;/p&gt;
&lt;h3 id=&quot;磁盘物理结构&quot;&gt;&lt;a href=&quot;#磁盘物理结构&quot; class=&quot;headerlink&quot; title=&quot;磁盘物理结构&quot;&gt;&lt;/a&gt;磁盘物理结构&lt;/h3&gt;&lt;p&gt;&lt;em&gt;磁盘的机械结构如下图&lt;/em&gt;：&lt;/p&gt;
&lt;img src=&quot;/images/os/disk-structure.png&quot; title=&quot;disk strucrure %}
&lt;p&gt;如上图，一块磁盘中有好几块&lt;code&gt;盘片&lt;/code&gt;（platter），一个盘片上的盘面被划分成若干个同心圆（即&lt;code&gt;磁道&lt;/code&gt;（track））。&lt;br&gt;将磁盘上&lt;code&gt;机械臂&lt;/code&gt;的&lt;code&gt;磁头&lt;/code&gt;径向移动到盘面的相关位置（磁道）后，通过盘片在磁头下方的高速旋转，就可以读取并写入所在&lt;code&gt;柱面&lt;/code&gt;（cylinder）上的数据。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;盘面的示意图如下&lt;/em&gt;：&lt;/p&gt;
{% img /images/os/disk-structure-2.gif disk strucrure&quot;&gt;
&lt;p&gt;磁盘是个块设备，它的最小存储单位是&lt;code&gt;扇区&lt;/code&gt;（sector），每个扇区存取512字节。&lt;/p&gt;
&lt;p&gt;为了提升文件的读取效率，文件系统会以&lt;code&gt;块&lt;/code&gt;（block）为单位进行文件读取。块是linux系统上文件存取的最小单位，一个块一般为连续的8个扇区，即4K。&lt;/p&gt;
&lt;p&gt;直接对磁盘等硬件进行操作，是很困难的。不过操作系统的主要任务就是隐藏硬件，呈现良好，清晰，优雅，一致的抽象。linux文件系统对文件的处理进行了良好的抽象。&lt;/p&gt;
&lt;h3 id=&quot;VFS虚拟文件系统&quot;&gt;&lt;a href=&quot;#VFS虚拟文件系统&quot; class=&quot;headerlink&quot; title=&quot;VFS虚拟文件系统&quot;&gt;&lt;/a&gt;VFS虚拟文件系统&lt;/h3&gt;&lt;p&gt;linux文件系统的体系结构图如下：&lt;/p&gt;
&lt;img src=&quot;/images/os/fs-structure.gif&quot; title=&quot;linux file system strucrure %}
&lt;p&gt;用户态的程序要进行文件读写时，只要通过系统调用，调用VFS提供的接口就好。&lt;/p&gt;
&lt;p&gt;虽然VFS需要调用ext2，ext3，NFS等具体的文件系统实现进行磁盘上文件的操作。但是它屏蔽了下层的各种异构文件系统的特点，为上层提供了统一的接口。&lt;/p&gt;
&lt;p&gt;以ext2文件系统为例，其文件系统结构图示意如下：&lt;/p&gt;
{% img /images/os/ext2-fs-structure.gif ext2 file system strucrure&quot;&gt;
&lt;ul&gt;
&lt;li&gt;一块硬盘会被划分成多个分区&lt;/li&gt;
&lt;li&gt;每个分区挂载着相应的文件系统具体实现，如ext2&lt;/li&gt;
&lt;li&gt;为了减少需要管理的block的数量，在ext2文件系统产生了块组的概念。每个块组包含多个block，并且有独立的superblock和inode。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;相关名词说明&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Boot Sector&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;即引导扇区。包括：本分区的操作系统类型，数据区大小，根目录区允许的最大目录项
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Super Block&lt;/code&gt;&lt;br&gt;    超级块。定义了文件系统的静态结构，包括：分区中每个block的大小，分区中block group的数目，以及每个block group中有inode等。每个block group不一定都有超级块，其他block group中的超级块仅仅是block group 0中超级块的一个拷贝，以备当block group 0中的超级块损坏时可以对其进行恢复。Linux启动时，block group 0中的超级块的内容会被读入到内存中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GDT&lt;/code&gt;&lt;br&gt;    组描述符表。记录了块位图（Block Bitmap）所在块的块号，inode位图（inode Bitmap）所在块的块号，inode表（inode Table）所在块的起始块号，本组空闲块的个数等组内信息。文件系统根据这些信息来查找数据块位图，索引结点位图，索引结点表的位置&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Block Bitmap&lt;/code&gt;&lt;br&gt;    Ext2文件系统的数据块位图。其中每一位对应了一个数据块，某一位上位0时表示该位所对应的数据块空闲，反之表示该位所对应的数据块已经被分配。Data Block Bitmap占了1个块的空间，因此，一个组中的数据块的个数就已经决定了。如果每个块为b-byte，那么该Group Block就有8&lt;em&gt;b个块，可以存放（8&lt;/em&gt;b）*b字节的数据&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Inode Bitamp&lt;/code&gt;&lt;br&gt;    inode节点位图。其工作方式跟Block Bitmap相同，只不过代表的是Inode的使用情况，每个位代表一个inode，如果是1则表示被使用，为1表示空闲&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Inode Table&lt;/code&gt;&lt;br&gt;    存储inode number对应文件的元信息，包括：文件类型，权限位，链接数（有多少文件名指向这个inode），文件数据块的位置。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Data Blocks&lt;/code&gt;&lt;br&gt;    数据块存放文件的实际内容。需要特别指出的是，在Linux下目录也是一种文件。目录中的文件及子目录都以目录项（directory entry）的形式存放在该目录的数据块中。目录项中主要记录了文件的inode号，文件名以及文件类型等内容&lt;/p&gt;
&lt;p&gt;Linux开机启动时，会首先载入MBR（主引导记录），MBR会告诉电脑从该设备的某一个分区来装载boot loader（boot loader储存有操作系统的相关信息，比如操作系统名称，操作系统内核 (kernel)所在位置等），通过boot loader会加载kernel，kernel通过initrd加载硬件驱动，在主分区表中搜索活动分区，加载引导分区，挂载文件系统，进行操作系统的启动。&lt;/p&gt;
&lt;h3 id=&quot;文件查找示例&quot;&gt;&lt;a href=&quot;#文件查找示例&quot; class=&quot;headerlink&quot; title=&quot;文件查找示例&quot;&gt;&lt;/a&gt;文件查找示例&lt;/h3&gt;&lt;p&gt;以查找文件/home/alex/foobar为例进行说明。&lt;/p&gt;
&lt;p&gt;假设根目录（ROOT directory），在磁盘空间上的inode number是2，其对应数据块的结构如下&lt;br&gt;        +—-+—–+—————————————–+&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#2  |. 2 |.. 2 | home 5 | usr 9 | tmp 11 | etc 23 | ...  |
    +----+-----+-----------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过跟目录下home目录的名字home，可以获取其inode number是5，其对应数据块的结构如下&lt;br&gt;        +—-+—–+—————————————————+&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#5  |. 5 |.. 2 | alex 31 | leslie 36 | pat 39 | abcd0001 21 | ...  |
    +----+-----+---------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过home目录下alex目录的名字alex，可以获取其inode number是31，其数据块的结构如下&lt;br&gt;        +—-+—–+—————————————————+&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#31 |. 31|.. 5 | foobar 12 | temp 15 | literature 7 | demo 6 | ... |
    +----+-----+---------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;继续查看inode number是12（foobar文件）的inode所对应的数据块结构，就可以获取路径为/home/alex/foobar的文件的数据内容。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    *-----------*
#12 | file data |
    *-----------*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从上面也可以看出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目录也是一种文件，其中包含了该目录下子目录的名字和文件名，以及其对应的inode number。&lt;/li&gt;
&lt;li&gt;文件名和inode number，是多对一的关系。多个文件名可以对应同一个inode number（硬链接）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了访问路径为/home/alex/foobar的文件的数据，需要有合适的权限在根目录的inode，home目录的inode，alex目录的inode，foobar数据文件的inode。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目录的inode权限，决定了是否有权限修改，移动，删除该目录，以及目录下的文件。&lt;/li&gt;
&lt;li&gt;文件的inode权限，决定了是否有权限读取或者修改该文件的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;文件存取流程&quot;&gt;&lt;a href=&quot;#文件存取流程&quot; class=&quot;headerlink&quot; title=&quot;文件存取流程&quot;&gt;&lt;/a&gt;文件存取流程&lt;/h3&gt;&lt;p&gt;在进行文件存取时，实际上就是解析文件路径，加载相应分区上的inode table，获取对应的inode number，对inode number对于的数据块进行存取。&lt;/p&gt;
&lt;p&gt;对于访问过的文件路径，会被缓存在dentry目录项中。&lt;/p&gt;
&lt;p&gt;为了提升磁盘设备的IO性能，操作系统会使用内存作为磁盘设备的cache，并使用memory map方式在访问时建立与文件系统的缓存映射。文件系统的缓存，是以Page Cache为单位，一个Page Cache包含多个Buffer Cache。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;向文件中写入数据时，数据会先缓存在Page Cache中，内存中的这部分数据被标注为Dirty Page，linux系统上的pdflush守护进程会跟进系统设置将将这部分Dirty Page刷到磁盘上，也可以通过fsync系统调用在数据写入后强制刷到磁盘上。将写入的数据刷入磁盘时，是以Buffer Cache为单位，每次回写若干个Buffer Cache。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;读取文件内容时，系统会一次性连续读取包括所请求页面在内的多个页面（如预读页面个数为n）。如果请求的页面在page cache中命中的话，会从缓存中返回页面内容，增加读取的页面数量，异步读取2n个页面;如果请求的页面没有在page cache中命中，也会增加读取页面数量，同步读取2n个页面。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;预读机制示意图&lt;/p&gt;
&lt;img src=&quot;/images/os/fs-pre-read.gif&quot;&gt;</content>
    
    <summary type="html">
    
      深入linux文件系统中文件存取的机制
    
    </summary>
    
      <category term="linux" scheme="http://debughacks.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://debughacks.github.io/tags/linux/"/>
    
      <category term="fs" scheme="http://debughacks.github.io/tags/fs/"/>
    
  </entry>
  
  <entry>
    <title>在Mac系统上使用emacs24打造web开发环境</title>
    <link href="http://debughacks.github.io/2014/02/28/emacs24-on-mac-and-linux/"/>
    <id>http://debughacks.github.io/2014/02/28/emacs24-on-mac-and-linux/</id>
    <published>2014-02-28T06:16:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html">&lt;p&gt;Emacs 是一个强大的、可扩展的文本编辑器。不同于vim，它是一个流行的无模式文本编辑器。尤其是当emacs24内置包管理elpa后，使用通过&lt;code&gt;prelude&lt;/code&gt;，&lt;code&gt;goblin&lt;/code&gt;等，轻松使用emacs打造一个顺手的diy的web开发环境。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装Emacs24-3&quot;&gt;&lt;a href=&quot;#安装Emacs24-3&quot; class=&quot;headerlink&quot; title=&quot;安装Emacs24.3&quot;&gt;&lt;/a&gt;安装Emacs24.3&lt;/h3&gt;&lt;h5 id=&quot;安装Homebrew&quot;&gt;&lt;a href=&quot;#安装Homebrew&quot; class=&quot;headerlink&quot; title=&quot;安装Homebrew&quot;&gt;&lt;/a&gt;安装Homebrew&lt;/h5&gt;&lt;p&gt;&lt;code&gt;Homebrew&lt;/code&gt;是mac系统上的包管理软件，是用&lt;code&gt;Ruby&lt;/code&gt;语言编写的。我们可以使用它在终端安装系统没有自带的&lt;code&gt;Unix&lt;/code&gt;相关工具。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;安装步骤&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ruby -e &amp;quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&amp;quot;
cd /usr/local/Library &amp;amp;&amp;amp; git stash &amp;amp;&amp;amp; git clean -d -f
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&quot;通过编译源代码安装Emacs&quot;&gt;&lt;a href=&quot;#通过编译源代码安装Emacs&quot; class=&quot;headerlink&quot; title=&quot;通过编译源代码安装Emacs&quot;&gt;&lt;/a&gt;通过编译源代码安装Emacs&lt;/h5&gt;&lt;p&gt;在安装&lt;code&gt;Homebrew&lt;/code&gt;时，会同时安装&lt;code&gt;gcc&lt;/code&gt;和&lt;code&gt;autoconf&lt;/code&gt;，所以我们可以直接下载源代码进行编译安装。通过如下地址可以下载到最新的emacs安装文件。&lt;br&gt;    &lt;a href=&quot;http://www.gnu.org/software/emacs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.gnu.org/software/emacs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果没有&lt;code&gt;wget&lt;/code&gt;等工具，可以通过&lt;code&gt;brew&lt;/code&gt;进行安装，如：&lt;br&gt;    brew install wget&lt;/p&gt;
&lt;p&gt;&lt;em&gt;安装步骤&lt;/em&gt;&lt;br&gt;    cd /somepath/&lt;br&gt;    wget &lt;a href=&quot;http://mirror.bjtu.edu.cn/gnu/emacs/emacs-24.3.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mirror.bjtu.edu.cn/gnu/emacs/emacs-24.3.tar.gz&lt;/a&gt;&lt;br&gt;    tar zxvf emacs-24.3.tar.gz&lt;br&gt;    cd emacs-24.3&lt;br&gt;    ./autogen.sh&lt;br&gt;    ./configure –with-ns&lt;br&gt;    make install&lt;br&gt;    sudo ln -s /somepath/emacs-24.3/nextstep/Emacs.app /Applications/Emacs24.3.app&lt;/p&gt;
&lt;h5 id=&quot;通过Homebrew安装Emacs&quot;&gt;&lt;a href=&quot;#通过Homebrew安装Emacs&quot; class=&quot;headerlink&quot; title=&quot;通过Homebrew安装Emacs&quot;&gt;&lt;/a&gt;通过Homebrew安装Emacs&lt;/h5&gt;&lt;p&gt;&lt;code&gt;Homebrew&lt;/code&gt;本身也是下载源代码进行编译安装，但是它可以帮我们简化这一过程。这就是技术的魅力 – make live easier。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;安装步骤&lt;/em&gt;&lt;br&gt;    brew install emacs –cocoa&lt;br&gt;    brew linkapps&lt;/p&gt;
&lt;p&gt;顺利的话，最新版的emacs就安装在mac了。如果中途遇到问题，按照提示解决下就好。&lt;/p&gt;
&lt;p&gt;有可能下载地址被墙，这时通过通过修改源代码的下载地址解决，方法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. brew edit softname，如 brew edit emacs
2. 修改其中的url，保存退出
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如：&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;formula&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Emacs&lt;/span&gt; &amp;lt; Formula&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    homepage &lt;span class=&quot;string&quot;&gt;&#39;http://www.gnu.org/software/emacs/&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#url &#39;http://ftpmirror.gnu.org/emacs/emacs-24.3.tar.gz&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    url &lt;span class=&quot;string&quot;&gt;&#39;http://mirror.bjtu.edu.cn/gnu/emacs/emacs-24.3.tar.gz&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装完成后可以在&lt;code&gt;应用程序&lt;/code&gt;，或者&lt;code&gt;Launchpad&lt;/code&gt;中启动emacs，它默认长这样：&lt;/p&gt;
&lt;img src=&quot;/images/emacs/startup.png&quot; title=&quot;emacs start up %}
&lt;h3 id=&quot; alt=&quot;配置Emacs&quot;&gt;
&lt;p&gt;完成&lt;code&gt;jedi&lt;/code&gt;，python自动完成的配置&lt;br&gt;    cd ~/.emacs.d/elpa/jedi*&lt;br&gt;    sudo pip install -r requirements.txt&lt;/p&gt;
&lt;p&gt;或者指定pypi源&lt;br&gt;    sudo pip install -i &lt;a href=&quot;http://pypi.douban.com/simple&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pypi.douban.com/simple&lt;/a&gt; -r requirements.txt&lt;/p&gt;
&lt;h3 id=&quot;补充说明&quot;&gt;&lt;a href=&quot;#补充说明&quot; class=&quot;headerlink&quot; title=&quot;补充说明&quot;&gt;&lt;/a&gt;补充说明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Goblin-emacs简介&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;goblin-emacs在prelude的基础上，对&lt;code&gt;PHP&lt;/code&gt;，&lt;code&gt;Python&lt;/code&gt;等&lt;code&gt;mode&lt;/code&gt;进行了增强，并尽量保持原生的快捷键。相关功能介绍：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;flymake语法检测
php-mode
php基于字典的自动完成
python基于jedi的自动完成
org-mode
doxymacs 生成文档注释
slime－mode
版本控制工具的集成
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当使用emacs编辑&lt;code&gt;ruby&lt;/code&gt;或者&lt;code&gt;lua&lt;/code&gt;源码时，会自动下载并安装相关&lt;code&gt;mode&lt;/code&gt;，相关映射在&lt;code&gt;core/goblin-packages.el&lt;/code&gt;中进行配置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;交换&lt;code&gt;Control&lt;/code&gt;键和&lt;code&gt;Caps-Lock&lt;/code&gt;键&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为emacs上的很多快捷键默认都是以&lt;code&gt;Control&lt;/code&gt;开始。操作久了小拇指会比较难受，将&lt;code&gt;Control&lt;/code&gt;和&lt;code&gt;Caps-Lock&lt;/code&gt;进行交换，可以解放要经常蜷缩的小拇指。&lt;br&gt;&lt;img src=&quot;/images/emacs/swap-control-capslock.png&quot;&gt;&lt;/p&gt;</content>
    
    <summary type="html">
    
      如何在mac系统上使用emacs 24 配置php，python的web开发环境
    
    </summary>
    
      <category term="emacs" scheme="http://debughacks.github.io/categories/emacs/"/>
    
    
      <category term="linux" scheme="http://debughacks.github.io/tags/linux/"/>
    
      <category term="mac" scheme="http://debughacks.github.io/tags/mac/"/>
    
      <category term="emacs" scheme="http://debughacks.github.io/tags/emacs/"/>
    
  </entry>
  
  <entry>
    <title>使用Tcpcopy导入线上流量进行功能和压力测试</title>
    <link href="http://debughacks.github.io/2014/01/08/use-tcpcopy-test-online/"/>
    <id>http://debughacks.github.io/2014/01/08/use-tcpcopy-test-online/</id>
    <published>2014-01-08T09:29:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html">&lt;p&gt;假设我们要上线一个两年内不会宕机的先进架构。在上线前，免不了单元测试，功能测试，还有使用ab，webbench等等进行压力测试。&lt;/p&gt;
&lt;p&gt;但这些步骤非生产环境下正式用户的行为。或许你会想到灰度上线，但毕竟可能会影响到部分用户，这怎么对得起我们两年内不宕机的承诺呢？&lt;/p&gt;
&lt;p&gt;好在网易的 &lt;a href=&quot;http://weibo.com/tcpcopy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;王斌&lt;/a&gt; 开发了&lt;a href=&quot;https://github.com/wangbin579/tcpcopy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tcpcopy&lt;/a&gt;， 可以导入线上流量进行功能和压力测试。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;tcpcopy介绍&quot;&gt;&lt;a href=&quot;#tcpcopy介绍&quot; class=&quot;headerlink&quot; title=&quot;tcpcopy介绍&quot;&gt;&lt;/a&gt;tcpcopy介绍&lt;/h3&gt;&lt;p&gt;&lt;code&gt;tcpcopy&lt;/code&gt;是一种请求复制工具。可以将线上流量拷贝到测试机器，实时的模拟线上环境。在不影响线上用户的情况下，使用线上流量进行测试，以尽早发现bug。也可以通过放大流量，进行压力测试，评估系统承载能力。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tcpcopy&lt;/code&gt;可以从线上服务器的&lt;code&gt;IP&lt;/code&gt;层抓取在线请求的数据包，修改相关属性，利用&lt;code&gt;raw socket output&lt;/code&gt;技术（&lt;code&gt;packet injection&lt;/code&gt; 技术之一）将其发送给测试服务器进行测试。&lt;/p&gt;
&lt;p&gt;发送到测试服务器的数据包会在&lt;code&gt;TCP/IP&lt;/code&gt;协议栈被识别，其中带有&lt;code&gt;payload&lt;/code&gt;（tcp data）的数据包最终进入到测试服务器的上层应用（如nginx），上层应用在处理完请求之后，将响应传递给测试服务器的&lt;code&gt;TCP/IP&lt;/code&gt;协议栈。&lt;/p&gt;
&lt;p&gt;在测试服务器上启用&lt;code&gt;ip_queue&lt;/code&gt;模块，并使用&lt;code&gt;iptables&lt;/code&gt;在&lt;code&gt;IP&lt;/code&gt;层将响应结果数据包发往QUEUE（&lt;code&gt;ip_queue&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;测试服务器上运行在&lt;code&gt;用户空间&lt;/code&gt;的拦截程序（intercept进程），通过打开&lt;code&gt;netlink&lt;/code&gt;的socket接受内核通过&lt;code&gt;ip_queue&lt;/code&gt;所传递来的网络数据包（即上层应用的响应内容）进行裁定，将结果返回内核，进行出队列的操作。intercept进程默认会丢弃上层应用的响应内容，返回ip header，以释放tcp连接。&lt;/p&gt;
&lt;p&gt;intercept进程也可以通过&lt;code&gt;-x&lt;/code&gt;（passlist）参数，不drop指定ip lists发出请求的响应内容。默认drop是为了：&lt;br&gt;    1 减少出口带宽占用，节约成本&lt;br&gt;    2 不影响客户端（线上服务）的&lt;code&gt;TCP/IP&lt;/code&gt;协议栈&lt;br&gt;    3 不会在互联网上产生ghost数据包&lt;/p&gt;
&lt;h3 id=&quot;tcpcopy工作流程&quot;&gt;&lt;a href=&quot;#tcpcopy工作流程&quot; class=&quot;headerlink&quot; title=&quot;tcpcopy工作流程&quot;&gt;&lt;/a&gt;tcpcopy工作流程&lt;/h3&gt;&lt;img src=&quot;/images/tcpcopy_flow.png&quot; title=&quot;tcpcopy flow&quot;&gt;
&lt;p&gt;如上图，tcpcopy拷贝一次流量访问的步骤如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;①　一个访问到达线上前端机；
②　socket数据包在ip层被拷贝了一份传给tcpcopy进程；
③　tcpcopy修改包的目的及源地址，发给目标测试机；
④　拷贝的包到达目标测试机；
⑤　目标测试机的nginx处理访问，并返回结果；
⑥　返回结果在ip层被截获、丢弃，由intercpet进程拷贝返回结果的ip header并返回；
⑦　ip header被发送给线上前端机的tcpcopy进程。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;安装和配置&quot;&gt;&lt;a href=&quot;#安装和配置&quot; class=&quot;headerlink&quot; title=&quot;安装和配置&quot;&gt;&lt;/a&gt;安装和配置&lt;/h3&gt;&lt;p&gt;tcpcopy有两种工作模式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 实时拷贝数据包
2 通过使用tcpdump等抓包生成的文件进行离线（offline）请求重放
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果采用实时拷贝线上流程进行导入的方式，需要分别在线上服务器和测试服务器安装&lt;code&gt;tcpcopy&lt;/code&gt;，对于离线模式，只需要在测试服务器上安装&lt;code&gt;tcpcopy&lt;/code&gt;，编译时指定 &lt;code&gt;--enable-offline&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&quot;安装步骤如下：&quot;&gt;&lt;a href=&quot;#安装步骤如下：&quot; class=&quot;headerlink&quot; title=&quot;安装步骤如下：&quot;&gt;&lt;/a&gt;安装步骤如下：&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;wget https://github.com/wangbin579/tcpcopy/archive/0.9.0.tar.gz -O tcpcopy-0.9.0.tar.gz --no-check-certificate
tar zxvf tcpcopy-0.9.0.tar.gz
cd tcpcopy-0.9.0
./autogen.sh
./configure --prefix=/usr/local/tcpcopy
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&quot;目标测试机配置&quot;&gt;&lt;a href=&quot;#目标测试机配置&quot; class=&quot;headerlink&quot; title=&quot;目标测试机配置&quot;&gt;&lt;/a&gt;目标测试机配置&lt;/h5&gt;&lt;p&gt;线上服务器拷贝的数据包发送至测试服务器进行处理之后，测试服务器需要通过&lt;code&gt;iptables&lt;/code&gt;将响应结果发送至QUEUE（&lt;code&gt;ip_queue&lt;/code&gt;），这样测试服务器上运行的&lt;code&gt;intercept&lt;/code&gt;拦截进程才能通过打开的&lt;code&gt;netlink&lt;/code&gt;socket获取传递过来的数据包并进行裁定。所以测试服务器上需要开启&lt;code&gt;iptables&lt;/code&gt;防火墙，并启用内核模块&lt;code&gt;ip_queue&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;modprobe ip_queue
/etc/init.d/iptables start
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为线上服务器需要和目标测试服务器通信，传递请求数据包和控制信息（封装的ip packet header），所以需要在测试服务器上添加相关&lt;code&gt;iptables&lt;/code&gt;防火墙规则。编辑&lt;code&gt;/etc/sysconfig/iptables&lt;/code&gt;，添加：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 36524 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后重启&lt;code&gt;iptables&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/etc/init.d/iptables restart
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接着执行：&lt;br&gt;    iptables -I OUTPUT -p tcp –sport 80 -j QUEUE&lt;/p&gt;
&lt;p&gt;将响应结果发送至QUEUE（&lt;code&gt;ip_queue&lt;/code&gt;），从而实现运行在用户态的进程对相关数据包进行裁定。&lt;/p&gt;
&lt;h3 id=&quot;相关使用&quot;&gt;&lt;a href=&quot;#相关使用&quot; class=&quot;headerlink&quot; title=&quot;相关使用&quot;&gt;&lt;/a&gt;相关使用&lt;/h3&gt;&lt;p&gt;本文以线上和测试机的web服务都使用80端口，传递控制信息使用默认的36524端口为例。如果使用别的端口，记得修改相关&lt;code&gt;iptables&lt;/code&gt;防火墙规则。&lt;/p&gt;
&lt;h5 id=&quot;离线-offline&quot;&gt;&lt;a href=&quot;#离线-offline&quot; class=&quot;headerlink&quot; title=&quot;离线 offline&quot;&gt;&lt;/a&gt;离线 offline&lt;/h5&gt;&lt;p&gt;1） 在线上服务器抓包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tcpdump -i eth0 tcp and port 80 -s 0 -w online.pcap
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2） 将抓包生成的文件拷贝到测试服务器&lt;/p&gt;
&lt;p&gt;3） 在测试服务器上进行执行如下命令进行重放&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /usr/local/tcpcopy/bin
sudo ./intercept
sudo ./tcpcopy -i /path/online.pcap -x 80-10.16.12.11:80

tcpcopy -i &amp;lt;抓包文件地址&amp;gt; -x &amp;lt;port&amp;gt;-&amp;lt;本地ip&amp;gt;:&amp;lt;port&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&quot;在线实时复制-online&quot;&gt;&lt;a href=&quot;#在线实时复制-online&quot; class=&quot;headerlink&quot; title=&quot;在线实时复制 online&quot;&gt;&lt;/a&gt;在线实时复制 online&lt;/h5&gt;&lt;p&gt;1） 在测试服务器上启动&lt;code&gt;intercept&lt;/code&gt;拦截进程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /usr/local/tcpcopy/bin
sudo ./intercept
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2） 在线上服务器复制流量到测试服务器&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /usr/local/tcpcopy/bin
sudo ./tcpcopy -x 80-10.16.12.11:80 -c 10.16.12.12

tcpcopy -x 服务器应用端口号-测试服务器ip地址:测试服务器应用端口 -c 本地服务器ip
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;reference：&lt;/p&gt;
&lt;p&gt;[^1] &lt;a href=&quot;https://github.com/wangbin579/tcpcopy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/wangbin579/tcpcopy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^2] &lt;a href=&quot;http://www.searchtb.com/2012/05/using-tcpcopy-to-simulate-traffic.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.searchtb.com/2012/05/using-tcpcopy-to-simulate-traffic.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^3] &lt;a href=&quot;http://hi.baidu.com/yacker/item/e6bd5b287fe5a3f150fd8731&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hi.baidu.com/yacker/item/e6bd5b287fe5a3f150fd8731&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^4] &lt;a href=&quot;http://blog.yam.com/hn12303158/article/35207136&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.yam.com/hn12303158/article/35207136&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      介绍tcpcopy的相关组件，工作流程，以及安装与配置。如何使tcpcopy的online和离线方式进行测试
    
    </summary>
    
      <category term="devops" scheme="http://debughacks.github.io/categories/devops/"/>
    
    
      <category term="devops" scheme="http://debughacks.github.io/tags/devops/"/>
    
      <category term="tcpcopy" scheme="http://debughacks.github.io/tags/tcpcopy/"/>
    
  </entry>
  
  <entry>
    <title>在生产环境部署Sentry进行错误收集和提醒</title>
    <link href="http://debughacks.github.io/2013/12/18/deploy-sentry-in-product/"/>
    <id>http://debughacks.github.io/2013/12/18/deploy-sentry-in-product/</id>
    <published>2013-12-18T03:10:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html">&lt;p&gt;Sentry正如其名，是一个实时的日志聚合平台，可以通过捕获程序事件（&lt;code&gt;Error&lt;/code&gt;，&lt;code&gt;Exception&lt;/code&gt;），或者主动上报的方式将错误信息等进行收集汇总和提醒，以帮助我们及时发现项目中的问题。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;Sentry Server端是使用python语言开发的，目前有如下平台的客户端sdk：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Python&lt;/code&gt;，&lt;code&gt;PHP&lt;/code&gt;，&lt;code&gt;Ruby&lt;/code&gt;，&lt;code&gt;Javascript&lt;/code&gt;，&lt;code&gt;Java&lt;/code&gt;，&lt;code&gt;Nodejs&lt;/code&gt;，&lt;code&gt;IOS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/getsentry/sentry&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/getsentry/sentry&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文以收集&lt;code&gt;PHP&lt;/code&gt;错误为例。&lt;/p&gt;
&lt;h3 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h3&gt;&lt;p&gt;Sentry的文档清晰且完善，包括&lt;code&gt;安装&lt;/code&gt;，&lt;code&gt;配置&lt;/code&gt;，&lt;code&gt;调优&lt;/code&gt;以及&lt;code&gt;客户端调用&lt;/code&gt;，正式使用之前，建议看看，以加深理解。地址：&lt;a href=&quot;http://sentry.readthedocs.org/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://sentry.readthedocs.org/en/latest/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;python环境安装&quot;&gt;&lt;a href=&quot;#python环境安装&quot; class=&quot;headerlink&quot; title=&quot;python环境安装&quot;&gt;&lt;/a&gt;python环境安装&lt;/h4&gt;&lt;p&gt;Sentry需要python2.5以上，本文以&lt;code&gt;python2.7.3&lt;/code&gt;为例，使用&lt;code&gt;virtualenv&lt;/code&gt;进行环境隔离，使用&lt;code&gt;pip&lt;/code&gt;安装需要的包&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;figcaption&gt;&lt;span&gt;python2.7.3-install.sh&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yum install -y bzip2-devel.x86_64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yum install -y sqlite-devel.x86_64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yum install -y readline-devel.x86_64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;wget http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tar jxvf Python-2.7.3.tar.bz2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; Python-2.7.3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;./configure --prefix=/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/python2.7.3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;make&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo make install&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;wget https://pypi.python.org/packages/&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;/d/distribute/distribute-0.6.49.tar.gz --no-check-certificate&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tar zxvf distribute-0.6.49.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; distribute-0.6.49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/python2.7.3/bin/python setup.py install&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/python2.7.3/bin/easy_install virtualenv&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/python2.7.3/bin/easy_install -i http://e.pypi.python.org/simple virtualenvwrapper&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;至此，就完成了python2.7.3和pip，以及virtualenv的安装，使用如下命令进行测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/local/python2.7.3/bin/python
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;安装Sentry-server&quot;&gt;&lt;a href=&quot;#安装Sentry-server&quot; class=&quot;headerlink&quot; title=&quot;安装Sentry server&quot;&gt;&lt;/a&gt;安装Sentry server&lt;/h4&gt;&lt;p&gt;初始化安装目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p /data/server/python-envs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;添加相关环境变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;添加：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export WORKON_HOME=/data/server/python-envs
export VIRTUALENVWRAPPER_PYTHON=/usr/local/python2.7.3/bin/python
export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/python2.7.3/bin/virtualenv
source /usr/local/python2.7.3/bin/virtualenvwrapper.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使环境变量生效&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装Sentry server&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkvirtualenv sentry
pip install sentry
pip install sentry[mysql]
pip install sentry[mysql] --upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改&lt;code&gt;~/.bashrc&lt;/code&gt;，添加如下代码，以便登录后自动切换到相关python环境&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;source /data/server/python-envs/sentry/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;快速配置&quot;&gt;&lt;a href=&quot;#快速配置&quot; class=&quot;headerlink&quot; title=&quot;快速配置&quot;&gt;&lt;/a&gt;快速配置&lt;/h3&gt;&lt;p&gt;或许你还没有做好决定，只是想尽快体验下Sentry，在完成上面的安装之后，通过下面三个步骤即可满足你的愿望：&lt;/p&gt;
&lt;p&gt;1 初始化配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sentry init ~/sentry.conf.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2 修改配置&lt;/p&gt;
&lt;p&gt;修改初始配置中的如下两项就行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SENTRY_WEB_HOST&lt;/code&gt;，&lt;code&gt;SENTRY_URL_PREFIX&lt;/code&gt;，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SENTRY_URL_PREFIX = &amp;apos;http://10.16.15.1:9000&amp;apos;
SENTRY_WEB_HOST = &amp;apos;10.16.15.1&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3 创建超级管理员帐号，启动server&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sentry --config=~/sentry.conf.py upgrade
sentry --config=~/sentry.conf.py createsuperuser
sentry --config=~/sentry.conf.py start
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后就可以通过url &lt;a href=&quot;http://server_host:port&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://server_host:port&lt;/a&gt; ，使用创建的帐号登录系统后台，进行项目，帐号等管理，和已收集日志的查看等等&lt;/p&gt;
&lt;h3 id=&quot;配置在生产环境中使用&quot;&gt;&lt;a href=&quot;#配置在生产环境中使用&quot; class=&quot;headerlink&quot; title=&quot;配置在生产环境中使用&quot;&gt;&lt;/a&gt;配置在生产环境中使用&lt;/h3&gt;&lt;h4 id=&quot;Sentry-server&quot;&gt;&lt;a href=&quot;#Sentry-server&quot; class=&quot;headerlink&quot; title=&quot;Sentry server&quot;&gt;&lt;/a&gt;Sentry server&lt;/h4&gt;&lt;p&gt;&lt;em&gt;我们在生产环境下的使用状况：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用&lt;code&gt;mysql&lt;/code&gt;作为后端数据存储&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用&lt;code&gt;celery&lt;/code&gt;任务队列（&lt;code&gt;broker&lt;/code&gt;使用&lt;code&gt;redis&lt;/code&gt;），处理数据入库，发送邮件提醒等工作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同时，使用&lt;code&gt;redis&lt;/code&gt;作为&lt;code&gt;Update Buffers&lt;/code&gt;，用于将频繁出现的相同事件合并，这在高并发时会相当有用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用&lt;code&gt;memcache&lt;/code&gt;作为前端&lt;code&gt;Cache&lt;/code&gt;，管理后台通过轮询的访问获取是否有新的事件提醒，使用&lt;code&gt;memcache&lt;/code&gt;，可以减轻直接查询数据库的压力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用&lt;code&gt;Udp&lt;/code&gt;协议发送并接收相关事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用&lt;code&gt;Nginx&lt;/code&gt;反向代理前端http请求，并使用&lt;code&gt;HttpLimitReqModule&lt;/code&gt;限制请求的发送速率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用&lt;code&gt;supervisor&lt;/code&gt;管理&lt;code&gt;celery&lt;/code&gt;和&lt;code&gt;sentry&lt;/code&gt;server&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;相关安装步骤：&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install redis hiredis nydus
pip install redis hiredis nydus --upgrade
pip install python-memcached
pip install gevent
pip install eventlet
pip install supervisor
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;初始化配置&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p /data/server/sentry/etc
sentry init /data/server/sentry/etc/sentry.conf.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;创建超级管理员帐号&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sentry --config=/data/server/sentry/etc/sentry.conf.py upgrade
sentry --config=/data/server/sentry/etc/sentry.conf.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;初始化supervisor配置&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo_supervisord_conf &amp;gt; /data/server/sentry/etc/supervisord.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;配置Sentry&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;示例配置请参见 &lt;a href=&quot;https://gist.github.com/jqlblue/8018185&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/jqlblue/8018185&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;修改&lt;code&gt;/data/server/sentry/etc/supervisord.conf&lt;/code&gt;，添加：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[program:web]
command=/data/server/python-envs/sentry/bin/sentry --config=/data/server/sentry/etc/sentry.conf.py start
process_name=%(program_name)s_%(process_num)02d
numprocs=3
numprocs_start=0
startsecs=5
startretries=3
stopsignal=QUIT
stopwaitsecs=10
stopasgroup=true
killasgroup=true
environment=SENTRY_CONF=&amp;quot;/data/server/sentry/etc/sentry.conf.py&amp;quot;
directory=/data/server/python-envs/sentry/

[program:sentry_udp]
command=/data/server/python-envs/sentry/bin/sentry --config=/data/server/sentry/etc/sentry.conf.py start udp
process_name=sentry_udp_server
numprocs=1
numprocs_start=0
startsecs=5
startretries=3
stopsignal=QUIT
stopwaitsecs=10
stopasgroup=true
killasgroup=true
environment=SENTRY_CONF=&amp;quot;/data/server/sentry/etc/sentry.conf.py&amp;quot;
directory=/data/server/python-envs/sentry/

[program:celeryd]
command=/data/server/python-envs/sentry/bin/sentry celery worker -c 6 -P processes -l WARNING -n worker-%(process_num)02d.worker
process_name=%(program_name)s_%(process_num)02d
numprocs=1
numprocs_start=0
startsecs=1
startretries=3
stopsignal=TERM
stopwaitsecs=10
stopasgroup=false
killasgroup=true
environment=SENTRY_CONF=&amp;quot;/data/server/sentry/etc/sentry.conf.py&amp;quot;
directory=/data/server/python-envs/sentry/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;管理Sentry server&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动superviord&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行如下命令，同时，&lt;code&gt;celery&lt;/code&gt;，&lt;code&gt;sentry web&lt;/code&gt;，&lt;code&gt;sentry udp server&lt;/code&gt;也将随之启动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;supervisord -c /data/server/sentry/etc/supervisord.conf
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;停止sentry相关server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行如下命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;supervisorctl -c /data/server/sentry/etc/supervisord.conf stop all
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;停止superviord&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行如下命令，同时，已启动的&lt;code&gt;centry&lt;/code&gt;相关server也将停止&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;supervisorctl -c /data/server/sentry/etc/supervisord.conf stop all
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;supervisor&lt;/code&gt;更多使用方法请参见 &lt;a href=&quot;http://supervisord.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://supervisord.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nginx&lt;/code&gt;配置请参见 &lt;a href=&quot;https://gist.github.com/jqlblue/8019629&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/jqlblue/8019629&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;Sentry-client&quot;&gt;&lt;a href=&quot;#Sentry-client&quot; class=&quot;headerlink&quot; title=&quot;Sentry client&quot;&gt;&lt;/a&gt;Sentry client&lt;/h4&gt;&lt;p&gt;可以通过在程序中&lt;code&gt;registerExceptionHandler&lt;/code&gt;和&lt;code&gt;registerErrorHandler&lt;/code&gt;将相关信息即时发送至server端。&lt;/p&gt;
&lt;p&gt;相关sdk项目地址 &lt;a href=&quot;https://github.com/getsentry/raven-php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/getsentry/raven-php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实例化&lt;code&gt;Raven_Client&lt;/code&gt;时使用的&lt;code&gt;DSN&lt;/code&gt;中的&lt;code&gt;public:secret&lt;/code&gt;可以在使用管理员登录后台后，在&lt;code&gt;项目&lt;/code&gt;-&lt;code&gt;设置&lt;/code&gt;下面查看到。示例地址：&lt;a href=&quot;http://sentry_host/team_name/project_name/docs/php/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://sentry_host/team_name/project_name/docs/php/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们采用通过增量读取php error log，使用crontab将错误信息上报。&lt;/p&gt;
&lt;p&gt;基于sentry php sdk修改之后的代码地址：&lt;a href=&quot;https://gist.github.com/jqlblue/8019312&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/jqlblue/8019312&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装依赖&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install -y logcheck.noarch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;logcheck&lt;/code&gt;中的&lt;code&gt;logtail2&lt;/code&gt;用于增量读取日志，&lt;code&gt;flock&lt;/code&gt;用于防止定时任务堆积。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;另外，需要安装php的sockets扩展&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;添加定时任务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* * * * * /usr/bin/flock -xn /tmp/sentry_client.lock /opt/php-5.5.4/bin/php /path/client.php --project=project_name 2&amp;gt;&amp;amp;1 &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      如何在线上生产环境部署sentry哨兵，对运行时错误进行收集，并通过邮件提醒等方式，及时帮助我们发现线上问题。改善服务质量
    
    </summary>
    
      <category term="devops" scheme="http://debughacks.github.io/categories/devops/"/>
    
    
      <category term="devops" scheme="http://debughacks.github.io/tags/devops/"/>
    
      <category term="sentry" scheme="http://debughacks.github.io/tags/sentry/"/>
    
      <category term="monitor" scheme="http://debughacks.github.io/tags/monitor/"/>
    
  </entry>
  
  <entry>
    <title>初探Android应用性能分析</title>
    <link href="http://debughacks.github.io/2013/11/22/android-app-profile-tools/"/>
    <id>http://debughacks.github.io/2013/11/22/android-app-profile-tools/</id>
    <published>2013-11-22T10:03:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html">&lt;p&gt;如果一个android应用打开时比较慢，或者使用起来比较卡。这个可能是客户端代码有待优化，也可能是服务端性能比较挫。对一个客户端开发者而言，在客户端代码中增加相关debug日志，即可比较准确地定位问题。但这活要落到一个服务端开发人员手里，要怎么办？&lt;/p&gt;
&lt;p&gt;本文将在没有apk源码的情况下，以服务端开发人员的视角进行客户端app性能的分析。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;在分析之前，我们先补充点android基础知识。&lt;/p&gt;
&lt;h3 id=&quot;android基础知识&quot;&gt;&lt;a href=&quot;#android基础知识&quot; class=&quot;headerlink&quot; title=&quot;android基础知识&quot;&gt;&lt;/a&gt;android基础知识&lt;/h3&gt;&lt;p&gt;我们所说的android应用，一般都是通过将一个以apk结尾的文件安装在手机等移动设备上才能运行起来的。所以我们先从apk说起。&lt;/p&gt;
&lt;h5 id=&quot;什么是apk&quot;&gt;&lt;a href=&quot;#什么是apk&quot; class=&quot;headerlink&quot; title=&quot;什么是apk&quot;&gt;&lt;/a&gt;什么是apk&lt;/h5&gt;&lt;p&gt;我们先从网上下载一个apk&lt;br&gt;    $ wget &lt;a href=&quot;http://shouji.360tpcdn.com/131106/0124832c4cf8c35a762cfece3bac52b1/com.sina.weibo_650.apk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://shouji.360tpcdn.com/131106/0124832c4cf8c35a762cfece3bac52b1/com.sina.weibo_650.apk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后查看这个文件的类型&lt;br&gt;    $ file com.sina.weibo_650.apk&lt;br&gt;    com.sina.weibo_650.apk: Zip archive data, at least v2.0 to extract&lt;/p&gt;
&lt;p&gt;会发现&lt;code&gt;com.sina.weibo_650.apk&lt;/code&gt;是一个zip压缩文件。解压缩后的文件，主要包括&lt;em&gt;一些资源文件&lt;/em&gt;，&lt;em&gt;一些配置文件&lt;/em&gt;，&lt;em&gt;一些类库&lt;/em&gt;，还有&lt;em&gt;一个class.dex&lt;/em&gt;。目录结构如下&lt;br&gt;    AndroidManifest.xml&lt;br&gt;    assets&lt;br&gt;    classes.dex&lt;br&gt;    lib&lt;br&gt;    META-INF&lt;br&gt;    org&lt;br&gt;    res&lt;br&gt;    resources.arsc&lt;/p&gt;
&lt;p&gt;粗略一看，发现 &lt;code&gt;class.dex&lt;/code&gt; 这个文件有5.9M，这应该就是主角。继续执行如下命令&lt;br&gt;    $ file classes.dex&lt;br&gt;    classes.dex: Dalvik dex file version 035&lt;/p&gt;
&lt;p&gt;因为没有开发过android应用，不明白用java开发的app和这个Dalvik dex file之间有什么关系？所以我们先跳出apk的视角。&lt;/p&gt;
&lt;h5 id=&quot;android平台架构&quot;&gt;&lt;a href=&quot;#android平台架构&quot; class=&quot;headerlink&quot; title=&quot;android平台架构&quot;&gt;&lt;/a&gt;android平台架构&lt;/h5&gt;&lt;img src=&quot;/images/mobile/android_architecture.png&quot; title=&quot;android architecture images&quot;&gt;
&lt;p&gt;如上图，android基于linux操作系统，使用linux内核与设备的硬件进行交互。在内核之上，又抽象出了一层，包括Dalvik虚拟机等。&lt;/p&gt;
&lt;p&gt;因为&lt;code&gt;dex&lt;/code&gt;是&lt;code&gt;Dalvik VM&lt;/code&gt; Executes的全称，即android &lt;code&gt;Dalvik&lt;/code&gt;虚拟机执行程序。&lt;/p&gt;
&lt;p&gt;那一个apk的生产和执行过程将是：&lt;br&gt;&lt;code&gt;*.java -&amp;gt; *.class -&amp;gt; classes.dex（classes.dex将由Dalvik VM转换成机器码，由linux内核交给cpu去执行）&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样的话，在linux系统上使用profile软件的经验，也将派上用场。&lt;/p&gt;
&lt;p&gt;android相关基础知识先介绍到此，感兴趣的请进一步查阅本文后面的参看资料。&lt;/p&gt;
&lt;h3 id=&quot;android应用性能分析&quot;&gt;&lt;a href=&quot;#android应用性能分析&quot; class=&quot;headerlink&quot; title=&quot;android应用性能分析&quot;&gt;&lt;/a&gt;android应用性能分析&lt;/h3&gt;&lt;h5 id=&quot;apk启动速度&quot;&gt;&lt;a href=&quot;#apk启动速度&quot; class=&quot;headerlink&quot; title=&quot;apk启动速度&quot;&gt;&lt;/a&gt;apk启动速度&lt;/h5&gt;&lt;p&gt;在分析之前，我们先看看android程序的执行流程&lt;br&gt;&lt;img src=&quot;/images/mobile/android_application_execute_flow.png&quot; title=&quot;android application execute flow images&quot;&gt;&lt;/p&gt;
&lt;p&gt;如上图，只要获取到启动ActivityManager所需要的时间，即是apk的启动时间。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;adb logcat | grep ActivityManager
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中”Displayed”对应的时间，即是launch Activity对应的时间，也就是apk启动时间，也可以使用如下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;adb logcat -c &amp;amp;&amp;amp; adb logcat -s ActivityManager | grep  &amp;quot;Displayed&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;要使用 &lt;code&gt;adb&lt;/code&gt;，需要先用usb线连接电脑和手机，并在手机的&lt;code&gt;设置&lt;/code&gt;-&amp;gt;&lt;code&gt;开发者选项&lt;/code&gt;中开启&lt;code&gt;USB调试&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adb&lt;/code&gt;这个工具，可以通过在android sdk的platform-tools目录中找到。后面介绍的&lt;code&gt;systrace&lt;/code&gt;也在这个目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;页面渲染性能&quot;&gt;&lt;a href=&quot;#页面渲染性能&quot; class=&quot;headerlink&quot; title=&quot;页面渲染性能&quot;&gt;&lt;/a&gt;页面渲染性能&lt;/h5&gt;&lt;p&gt;android应用中的页面，是由android系统一帧，一帧地绘制的，其中每一帧的处理如下图：&lt;br&gt;&lt;img src=&quot;/images/mobile/android_view_execute_flow.png&quot; title=&quot;android view execute flow images&quot;&gt;&lt;/p&gt;
&lt;p&gt;即：&lt;br&gt;&lt;code&gt;计算视图大小（measure） -&amp;gt; 安置视图的位置（layout） -&amp;gt; 绘制（draw）视图&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通过收集每帧的处理时间，即可以了解页面的渲染性能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当fps（每秒处理帧数，页面刷新率）为60时，页面的渲染看起来会比较平滑，这就需要每帧的处理时间不能大于16ms（1000/60）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要检测一个应用在渲染页面时的每帧处理时间，通过如下命令，即可获得每帧的处理时间&lt;br&gt;    adb shell dumpsys gfxinfo com.sina.weibo&lt;/p&gt;
&lt;p&gt;在输出日志的&lt;code&gt;Profile&lt;/code&gt;数据段，包含了三列&lt;code&gt;Draw&lt;/code&gt;，&lt;code&gt;Process&lt;/code&gt;，&lt;code&gt;Execute&lt;/code&gt;分别对应的处理时间，单位是ms。这三列的总和，就是渲染每帧时的处理时间。如&lt;br&gt;    Draw    Process    Execute&lt;br&gt;    0.95    0.93    0.72&lt;br&gt;    0.84    1.16    0.56&lt;br&gt;    0.83    0.89    0.69&lt;br&gt;    1.32    2.15    1.14&lt;br&gt;    1.29    1.37    1.01&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在进行分析之前，需要在&lt;code&gt;设置&lt;/code&gt;-&amp;gt;&lt;code&gt;开发者选项&lt;/code&gt;中点击&lt;code&gt;GPU呈现模式分析&lt;/code&gt;，选择&lt;code&gt;在adb shell dumpsys gfxinfo中&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;收集步骤：&lt;br&gt;    1.重新启动app&lt;br&gt;    2.在界面完全加载完之后，在界面上慢慢上下滑动几个像素&lt;br&gt;    3.在终端执行adb shell dumpsys gfxinfo com.sina.weibo&lt;br&gt;这时将在终端输出页面渲染时的最后128帧中每帧所花费的时间，将相关数据贴到excel表格中，点击其中的&lt;code&gt;insert&lt;/code&gt;-&amp;gt;&lt;code&gt;chart&lt;/code&gt;，即可生成相关图表&lt;br&gt;&lt;img src=&quot;/images/mobile/frame_render_time.png&quot; title=&quot;frame render time images&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其中&lt;code&gt;com.sina.weibo&lt;/code&gt;就是app的包名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;获取包名的方法:&lt;br&gt;    adb shell pm list packages&lt;/p&gt;
&lt;h5 id=&quot;使用systrace进一步分析&quot;&gt;&lt;a href=&quot;#使用systrace进一步分析&quot; class=&quot;headerlink&quot; title=&quot;使用systrace进一步分析&quot;&gt;&lt;/a&gt;使用systrace进一步分析&lt;/h5&gt;&lt;p&gt;通过收集该apk的启动速度和每帧的渲染时间，并与竟品进行对比发现。该app启动时间的确比较慢，也偶尔有丢帧的现象发生。如何近一步分析呢？这时就需要&lt;code&gt;systrace&lt;/code&gt;了。&lt;/p&gt;
&lt;p&gt;示例使用方法如下：&lt;br&gt;    cd android-sdk-linux/platform-tools/systrace&lt;br&gt;    python systrace.py –app=com.qihoo.appstore gfx view&lt;/p&gt;
&lt;p&gt;上面这条命令将会在&lt;code&gt;android-sdk-linux/platform-tools/systrace&lt;/code&gt;目录下生成&lt;code&gt;trace.html&lt;/code&gt;。其中收集了包名为&lt;code&gt;com.qihoo.appstore&lt;/code&gt;的应用在android系统上针对&lt;code&gt;gfx&lt;/code&gt;和&lt;code&gt;view&lt;/code&gt; category的执行数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;trace.html&lt;/code&gt;在浏览器中打开如下图：&lt;br&gt;&lt;img src=&quot;/images/mobile/android_systrace_output.png&quot; title=&quot;android systrace output images&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以使用如下方法，对&lt;code&gt;trace.html&lt;/code&gt;进行进一步分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过鼠标点击左侧的&lt;code&gt;+&lt;/code&gt;，&lt;code&gt;-&lt;/code&gt;可以展开或者收缩相关显示数据&lt;/li&gt;
&lt;li&gt;通过键盘上的&lt;code&gt;a&lt;/code&gt;，&lt;code&gt;d&lt;/code&gt;可以使显示的内容沿着顶部的时间轴向左或者向右移动&lt;/li&gt;
&lt;li&gt;通过键盘上的&lt;code&gt;w&lt;/code&gt;，&lt;code&gt;s&lt;/code&gt;可以对显示的内容进行放大或者缩小&lt;/li&gt;
&lt;li&gt;使用鼠标点击内容页面的某一个块，在下方会显示详情&lt;/li&gt;
&lt;li&gt;使用鼠标选择一块内容页面，在下方会显示汇总信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将光标定位到最后一行，使用&lt;code&gt;w&lt;/code&gt;进行放大，使用&lt;code&gt;d&lt;/code&gt;向左移动到2260ms左右，如下图：&lt;br&gt;&lt;img src=&quot;/images/mobile/android_systrace_output_zoom.png&quot; title=&quot;android systrace output detail images&quot;&gt;&lt;/p&gt;
&lt;p&gt;发现对于那些&lt;code&gt;performTraversals&lt;/code&gt;处理超过16ms的帧，其中&lt;code&gt;eglSwapBuffers&lt;/code&gt;处理的时间都比较长，这应该就是问题所在。&lt;/p&gt;
&lt;p&gt;使用usb线连接上手机，在命令行下运行：&lt;br&gt;    python systrace.py -h&lt;/p&gt;
&lt;p&gt;可以查看相关使用方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;systrace是在在android4.1上新增的工具，在4.1,4.2和4.3上使用的方法不同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;reference：&lt;/p&gt;
&lt;p&gt;[^1] &lt;a href=&quot;http://www.curious-creature.org/docs/android-performance-case-study-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.curious-creature.org/docs/android-performance-case-study-1.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^2] &lt;a href=&quot;http://www.curious-creature.org/docs/android-performance-case-study-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.curious-creature.org/docs/android-performance-case-study-1.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^3] &lt;a href=&quot;http://www.vogella.com/articles/AndroidTools/article.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.vogella.com/articles/AndroidTools/article.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^4] &lt;a href=&quot;http://blog.csdn.net/aaa2832/article/details/7849400&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/aaa2832/article/details/7849400&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^5] &lt;a href=&quot;http://www.cnblogs.com/taobox/articles/3405931.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/taobox/articles/3405931.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^6] &lt;a href=&quot;http://bigflake.com/systrace/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bigflake.com/systrace/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^7] &lt;a href=&quot;http://developer.android.com/tools/debugging/systrace.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/tools/debugging/systrace.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^8] &lt;a href=&quot;http://kitoslab-eng.blogspot.com/2013/01/aprof-android-profiler-profiling-tool.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kitoslab-eng.blogspot.com/2013/01/aprof-android-profiler-profiling-tool.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[^9] &lt;a href=&quot;http://udinic.wordpress.com/tag/rendering/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://udinic.wordpress.com/tag/rendering/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      通过通过服务端开发人员的视角，对安卓(android)手机上应用(app)的渲染性能进行分析，找到性能瓶颈
    
    </summary>
    
      <category term="mobile" scheme="http://debughacks.github.io/categories/mobile/"/>
    
    
      <category term="mobile" scheme="http://debughacks.github.io/tags/mobile/"/>
    
      <category term="android" scheme="http://debughacks.github.io/tags/android/"/>
    
      <category term="profile" scheme="http://debughacks.github.io/tags/profile/"/>
    
  </entry>
  
  <entry>
    <title>在php5.5中使用pdo和mysql_escape_string的一个坑</title>
    <link href="http://debughacks.github.io/2013/11/16/pdo-mysql-escape-string/"/>
    <id>http://debughacks.github.io/2013/11/16/pdo-mysql-escape-string/</id>
    <published>2013-11-16T10:04:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html">&lt;p&gt;最近在项目中使用了鸟哥的yar扩展，但是在php5.2.10环境中没有安装成功，所以将php升级到了5.5。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;升级步骤&quot;&gt;&lt;a href=&quot;#升级步骤&quot; class=&quot;headerlink&quot; title=&quot;升级步骤&quot;&gt;&lt;/a&gt;升级步骤&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;安装php5.5.0&lt;/li&gt;
&lt;li&gt;检测代码兼容性&lt;/li&gt;
&lt;li&gt;从线上服务器日志中收集最热的一百条访问日志&lt;/li&gt;
&lt;li&gt;下线一台服务器，启动php5.5环境，根据日志中最热的请求进行重放&lt;/li&gt;
&lt;li&gt;检测服务器日志进行改进&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;升级过程很顺利，但是上线后在日志中发现如下信息：&lt;br&gt;    mysql_escape_string(): This function is deprecated; use mysql_real_escape_string() instead&lt;br&gt;于是顺手修复上线。鉴于最近没怎么写代码，手有点生，先发布到了测试环境测试没问题才上线。&lt;/p&gt;
&lt;p&gt;就在去茶水间接了一杯水的当儿，运营反馈说线上页面显示异常。于是马上回滚代码。&lt;/p&gt;
&lt;p&gt;问题代码如下：&lt;br&gt;    $db = getDb();&lt;br&gt;    $a = mysql_real_escape_string($keyword);&lt;br&gt;    $sql = ‘select info from table where keyword = ‘ . $a;&lt;br&gt;    $res = $db-&amp;gt;getRow($sql);&lt;/p&gt;
&lt;p&gt;通过调试，发现：&lt;br&gt;    $keyword在mysql_real_escape_string处理之后，变成了false，所以在进行后面的查询时获取不到相应结果，页面就异常了。&lt;/p&gt;
&lt;p&gt;再进一步调试发现：&lt;br&gt;    getDb使用的是pdo。&lt;br&gt;    $dbh = new PDO(‘mysql:host=xxx;port=xxx;dbname=xxx’, ‘xxx’, ‘xxx’);&lt;/p&gt;
&lt;p&gt;于是原因浮出水面&lt;br&gt;    1 在使用string mysql_real_escape_string时没有指定link_identifier&lt;br&gt;    2 所以会去找使用mysql_connect()打开的最后一个连接&lt;br&gt;    3 使用的是pdo，没有找到相关连接。于是尝试使用不带任何参数的mysql_connect()去建立一个连接来使用&lt;br&gt;    4 本机没有mysql server，自然建立连接失败。于是发生错误，并产生警告信息（E_WARNING）&lt;br&gt;    5 服务器上设置的错误报告等级已经屏蔽了E_WARNING，所以也没有监控到相关错误&lt;/p&gt;
</content>
    
    <summary type="html">
    
      php 5.5 环境下，在pdo扩展下使用在mysql_escape_string函数时遇到的一个坑
    
    </summary>
    
      <category term="php" scheme="http://debughacks.github.io/categories/php/"/>
    
    
      <category term="php5.5" scheme="http://debughacks.github.io/tags/php5-5/"/>
    
      <category term="mysql" scheme="http://debughacks.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>在Fedora上安装fcitx输入法和云拼音</title>
    <link href="http://debughacks.github.io/2013/10/26/fcitx-fedora/"/>
    <id>http://debughacks.github.io/2013/10/26/fcitx-fedora/</id>
    <published>2013-10-26T04:30:00.000Z</published>
    <updated>2016-06-30T03:47:34.000Z</updated>
    
    <content type="html">&lt;p&gt;从fedora18开始，ibus感觉渐渐不如以前好用了，尤其是在emacs下使用的时候，经过死机。restart input method是家常便饭。&lt;/p&gt;
&lt;p&gt;一次发现同事的ubuntu上在使用google输入法，让我眼前一亮。但是在64位的&lt;br&gt;fedora19上没有配置成功。于是尝试了下fcitx输入法，特此记录。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;figcaption&gt;&lt;span&gt;fcitx install step&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;yum install fcitx.x86_64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yum install fcitx-configtool.x86_64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yum install fcitx-gtk3.x86_64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yum install fcitx-cloudpinyin.x86_64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yum install fcitx-table-chinese.noarch&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yum intall fcitx-qt4.x86_64&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;p&gt;编辑~/.bashrc，添加：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export GTK_IM_MODULE=fcitx
export QT_IM_MODULE=fcitx
export XMODIFIERS=&amp;quot;@im=fcitx&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重启系统或者logout，使之生效。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如果将im_module设置为xim，系统重启时可能会造成应用程序卡死。
此时可以通过键盘快捷键“CTRL+ALT+F2”，切换成tty2，
通过console模式登录系统杀死fcitx进程，再切回X window，或者直接重启。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;相关设置&quot;&gt;&lt;a href=&quot;#相关设置&quot; class=&quot;headerlink&quot; title=&quot;相关设置&quot;&gt;&lt;/a&gt;相关设置&lt;/h3&gt;&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 在“input method”Tab，可以添加或者删除输入法
2. “Global Config”Tab，主要用于设置相关快捷键
3. “Appearance”列用于设置输入法弹出框的显示界面
4. 点击“Addon”Tab，通过Cloud Pinyin可以设置云拼音。即可以将谷歌拼音，搜狗，百度，QQ输入法的内容合并进来。
   下图的设置，是当输入第二个词的时候，将云拼音的结果合并到第二个位置。
&lt;/code&gt;&lt;/pre&gt;&lt;img src=&quot;/images/fcitx_config.png&quot; title=&quot;fcitx_config images&quot;&gt;
&lt;img src=&quot;/images/fcitx_config_cloud_pinyin.png&quot; title=&quot;fcitx_config_cloud_pinyin images&quot;&gt;
&lt;p&gt;reference：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Fcitx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fcitx&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      如何在fedora操作系统上安装fcitx输入法并使用google云拼音
    
    </summary>
    
      <category term="linux" scheme="http://debughacks.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://debughacks.github.io/tags/linux/"/>
    
  </entry>
  
</feed>
